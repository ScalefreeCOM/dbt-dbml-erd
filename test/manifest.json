{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.4", "generated_at": "2023-02-01T15:29:12.868667Z", "invocation_id": "35c0f6a8-8888-4226-a9ff-6360cf0fe64e", "env": {}, "project_id": "be9b5bda41cd1c3e04886952fe502a70", "user_id": "bdd46d45-e2e8-45c7-b547-d7b9259941d3", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.datavault4dbt_snowflake_demo.stg_nation": {"raw_sql": "{%- set yaml_metadata -%}\r\nsource_model:\r\n    'tpc-h_sf1': 'nation'\r\nhashed_columns: \r\n    hk_nation_h:\r\n        - n_name\r\nldts: \"{{ random_ldts() }}\"\r\nrsrc: '!tpc_h_sf1.nation'\r\n{%- endset -%}\r\n\r\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\r\n\r\n{{ datavault4dbt.stage(source_model=metadata_dict['source_model'],\r\n                    ldts=metadata_dict['ldts'],\r\n                    rsrc=metadata_dict['rsrc'],\r\n                    hashed_columns=metadata_dict['hashed_columns'],\r\n                    derived_columns=none,\r\n                    missing_columns=none,\r\n                    prejoined_columns=none,\r\n                    include_source_columns=true) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt_snowflake_demo.random_ldts", "macro.datavault4dbt.stage"], "nodes": ["source.datavault4dbt_snowflake_demo.tpc-h_sf1.nation"]}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_stage", "fqn": ["datavault4dbt_snowflake_demo", "stage", "stg_nation"], "unique_id": "model.datavault4dbt_snowflake_demo.stg_nation", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "stage/stg_nation.sql", "original_file_path": "models/stage/stg_nation.sql", "name": "stg_nation", "alias": "stg_nation", "checksum": {"name": "sha256", "checksum": "db1df937eaadd45724ba2de3d28ebe822403c90247c1714457f0a5a839dde533"}, "tags": [], "refs": [], "sources": [["tpc-h_sf1", "nation"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/stage/stg_nation.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stage"}, "created_at": 1675265327.9988477, "compiled_sql": "\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"N_NATIONKEY\",\n        \"N_NAME\",\n        \"N_REGIONKEY\",\n        \"N_COMMENT\"\n\n  FROM snowflake_sample_data.tpch_sf1.nation\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    CASE uniform(1, 5, random()) WHEN 1 THEN TO_TIMESTAMP('2022-10-01T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 2 THEN TO_TIMESTAMP('2022-10-02T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 3 THEN TO_TIMESTAMP('2022-10-03T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 4 THEN TO_TIMESTAMP('2022-10-04T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 5 THEN TO_TIMESTAMP('2022-10-05T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') END AS ldts,\n    CAST( 'tpc_h_sf1.nation' as STRING ) AS rsrc,\n      \n        \"N_NATIONKEY\",\n        \"N_NAME\",\n        \"N_REGIONKEY\",\n        \"N_COMMENT\"\n    \n\n  FROM source_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"N_NATIONKEY\",\n        \"N_NAME\",\n        \"N_REGIONKEY\",\n        \"N_COMMENT\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(n_name AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_nation_h\n\n    FROM ldts_rsrc_data\n  \n),\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        0 AS N_NATIONKEY\n     ,\n        '(unknown)' AS N_NAME\n     ,\n        0 AS N_REGIONKEY\n     ,\n        '(unknown)' AS N_COMMENT\n     ,\n        CAST('00000000000000000000000000000000' as STRING) as hk_nation_h\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        -1 AS N_NATIONKEY\n     ,\n        '(error)' AS N_NAME\n     ,\n        -1 AS N_REGIONKEY\n     ,\n        '(error)' AS N_COMMENT\n     ,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_nation_h\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"N_NATIONKEY\",\n        \"N_NAME\",\n        \"N_REGIONKEY\",\n        \"N_COMMENT\",\n        \"HK_NATION_H\"\n\n    FROM hashed_columns\n\n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"N_NATIONKEY\",\n        \"N_NAME\",\n        \"N_REGIONKEY\",\n        \"N_COMMENT\",\n        \"HK_NATION_H\"\n\n    FROM ghost_records\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_stage.stg_nation"}, "model.datavault4dbt_snowflake_demo.stg_lineitem": {"raw_sql": "{%- set yaml_metadata -%}\nsource_model:\n    'tpc-h_sf1': 'lineitem'\nhashed_columns: \n    hk_lineitem_l:\n        - l_orderkey\n        - l_partkey\n        - l_suppkey\n        - l_linenumber\n    hk_orders_h:\n        - l_orderkey\n    hk_parts_h:\n        - l_partkey\n    hk_supplier_h:\n        - l_suppkey\nldts: \"{{ random_ldts() }}\"\nrsrc: '!tpc_h_sf1.lineitem'\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{{ datavault4dbt.stage(source_model=metadata_dict['source_model'],\n                    ldts=metadata_dict['ldts'],\n                    rsrc=metadata_dict['rsrc'],\n                    hashed_columns=metadata_dict['hashed_columns'],\n                    derived_columns=none,\n                    missing_columns=none,\n                    prejoined_columns=none,\n                    include_source_columns=true) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt_snowflake_demo.random_ldts", "macro.datavault4dbt.stage"], "nodes": ["source.datavault4dbt_snowflake_demo.tpc-h_sf1.lineitem"]}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_stage", "fqn": ["datavault4dbt_snowflake_demo", "stage", "stg_lineitem"], "unique_id": "model.datavault4dbt_snowflake_demo.stg_lineitem", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "stage/stg_lineitem.sql", "original_file_path": "models/stage/stg_lineitem.sql", "name": "stg_lineitem", "alias": "stg_lineitem", "checksum": {"name": "sha256", "checksum": "ccc3cf9ce99bcf222183898c04f470eedef1568b7afbaf1a0a24e75b4132f2f1"}, "tags": [], "refs": [], "sources": [["tpc-h_sf1", "lineitem"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/stage/stg_lineitem.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stage"}, "created_at": 1675265328.1955326, "compiled_sql": "\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"L_ORDERKEY\",\n        \"L_PARTKEY\",\n        \"L_SUPPKEY\",\n        \"L_LINENUMBER\",\n        \"L_QUANTITY\",\n        \"L_EXTENDEDPRICE\",\n        \"L_DISCOUNT\",\n        \"L_TAX\",\n        \"L_RETURNFLAG\",\n        \"L_LINESTATUS\",\n        \"L_SHIPDATE\",\n        \"L_COMMITDATE\",\n        \"L_RECEIPTDATE\",\n        \"L_SHIPINSTRUCT\",\n        \"L_SHIPMODE\",\n        \"L_COMMENT\"\n\n  FROM snowflake_sample_data.tpch_sf1.lineitem\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    CASE uniform(1, 5, random()) WHEN 1 THEN TO_TIMESTAMP('2022-10-01T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 2 THEN TO_TIMESTAMP('2022-10-02T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 3 THEN TO_TIMESTAMP('2022-10-03T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 4 THEN TO_TIMESTAMP('2022-10-04T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 5 THEN TO_TIMESTAMP('2022-10-05T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') END AS ldts,\n    CAST( 'tpc_h_sf1.lineitem' as STRING ) AS rsrc,\n      \n        \"L_ORDERKEY\",\n        \"L_PARTKEY\",\n        \"L_SUPPKEY\",\n        \"L_LINENUMBER\",\n        \"L_QUANTITY\",\n        \"L_EXTENDEDPRICE\",\n        \"L_DISCOUNT\",\n        \"L_TAX\",\n        \"L_RETURNFLAG\",\n        \"L_LINESTATUS\",\n        \"L_SHIPDATE\",\n        \"L_COMMITDATE\",\n        \"L_RECEIPTDATE\",\n        \"L_SHIPINSTRUCT\",\n        \"L_SHIPMODE\",\n        \"L_COMMENT\"\n    \n\n  FROM source_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"L_ORDERKEY\",\n        \"L_PARTKEY\",\n        \"L_SUPPKEY\",\n        \"L_LINENUMBER\",\n        \"L_QUANTITY\",\n        \"L_EXTENDEDPRICE\",\n        \"L_DISCOUNT\",\n        \"L_TAX\",\n        \"L_RETURNFLAG\",\n        \"L_LINESTATUS\",\n        \"L_SHIPDATE\",\n        \"L_COMMITDATE\",\n        \"L_RECEIPTDATE\",\n        \"L_SHIPINSTRUCT\",\n        \"L_SHIPMODE\",\n        \"L_COMMENT\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(l_orderkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(l_partkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(l_suppkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(l_linenumber AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_lineitem_l,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(l_orderkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_orders_h,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(l_partkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_parts_h,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(l_suppkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_supplier_h\n\n    FROM ldts_rsrc_data\n  \n),\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        0 AS L_ORDERKEY\n     ,\n        0 AS L_PARTKEY\n     ,\n        0 AS L_SUPPKEY\n     ,\n        0 AS L_LINENUMBER\n     ,\n        0 AS L_QUANTITY\n     ,\n        0 AS L_EXTENDEDPRICE\n     ,\n        0 AS L_DISCOUNT\n     ,\n        0 AS L_TAX\n     ,\n        '(unknown)' AS L_RETURNFLAG\n     ,\n        '(unknown)' AS L_LINESTATUS\n     ,\n        NULL AS L_SHIPDATE\n     ,\n        NULL AS L_COMMITDATE\n     ,\n        NULL AS L_RECEIPTDATE\n     ,\n        '(unknown)' AS L_SHIPINSTRUCT\n     ,\n        '(unknown)' AS L_SHIPMODE\n     ,\n        '(unknown)' AS L_COMMENT\n     ,\n        CAST('00000000000000000000000000000000' as STRING) as hk_lineitem_l,\n        CAST('00000000000000000000000000000000' as STRING) as hk_orders_h,\n        CAST('00000000000000000000000000000000' as STRING) as hk_parts_h,\n        CAST('00000000000000000000000000000000' as STRING) as hk_supplier_h\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        -1 AS L_ORDERKEY\n     ,\n        -1 AS L_PARTKEY\n     ,\n        -1 AS L_SUPPKEY\n     ,\n        -1 AS L_LINENUMBER\n     ,\n        -1 AS L_QUANTITY\n     ,\n        -1 AS L_EXTENDEDPRICE\n     ,\n        -1 AS L_DISCOUNT\n     ,\n        -1 AS L_TAX\n     ,\n        '(error)' AS L_RETURNFLAG\n     ,\n        '(error)' AS L_LINESTATUS\n     ,\n        NULL AS L_SHIPDATE\n      ,\n        NULL AS L_COMMITDATE\n      ,\n        NULL AS L_RECEIPTDATE\n      ,\n        '(error)' AS L_SHIPINSTRUCT\n     ,\n        '(error)' AS L_SHIPMODE\n     ,\n        '(error)' AS L_COMMENT\n     ,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_lineitem_l,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_orders_h,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_parts_h,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_supplier_h\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"L_ORDERKEY\",\n        \"L_PARTKEY\",\n        \"L_SUPPKEY\",\n        \"L_LINENUMBER\",\n        \"L_QUANTITY\",\n        \"L_EXTENDEDPRICE\",\n        \"L_DISCOUNT\",\n        \"L_TAX\",\n        \"L_RETURNFLAG\",\n        \"L_LINESTATUS\",\n        \"L_SHIPDATE\",\n        \"L_COMMITDATE\",\n        \"L_RECEIPTDATE\",\n        \"L_SHIPINSTRUCT\",\n        \"L_SHIPMODE\",\n        \"L_COMMENT\",\n        \"HK_LINEITEM_L\",\n        \"HK_ORDERS_H\",\n        \"HK_PARTS_H\",\n        \"HK_SUPPLIER_H\"\n\n    FROM hashed_columns\n\n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"L_ORDERKEY\",\n        \"L_PARTKEY\",\n        \"L_SUPPKEY\",\n        \"L_LINENUMBER\",\n        \"L_QUANTITY\",\n        \"L_EXTENDEDPRICE\",\n        \"L_DISCOUNT\",\n        \"L_TAX\",\n        \"L_RETURNFLAG\",\n        \"L_LINESTATUS\",\n        \"L_SHIPDATE\",\n        \"L_COMMITDATE\",\n        \"L_RECEIPTDATE\",\n        \"L_SHIPINSTRUCT\",\n        \"L_SHIPMODE\",\n        \"L_COMMENT\",\n        \"HK_LINEITEM_L\",\n        \"HK_ORDERS_H\",\n        \"HK_PARTS_H\",\n        \"HK_SUPPLIER_H\"\n\n    FROM ghost_records\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_stage.stg_lineitem"}, "model.datavault4dbt_snowflake_demo.stg_orders": {"raw_sql": "{%- set yaml_metadata -%}\nsource_model:\n    'tpc-h_sf1': 'orders'\nhashed_columns: \n    hk_orders_h:\n        - o_orderkey\n    hk_customer_h:\n        - o_custkey\n    hk_l_orders_customer:\n        - o_orderkey\n        - o_custkey\n    hd_orders_n_s:\n        is_hashdiff: true\n        columns:\n            - o_orderstatus\n            - o_totalprice\n            - o_orderdate\n            - o_orderpriority\n            - o_clerk\n            - o_shippriority\n            - o_comment\n            - is_highest_priority\n            - description\n            - legacy_orderkey\n            - customer_name\nderived_columns:\n    is_highest_priority:\n        value: \"CASE WHEN (o_orderpriority = '1-URGENT') THEN true ELSE false END\"\n        datatype: 'BOOLEAN'\n        src_cols_required: 'o_orderpriority'\n    description:\n        value: '!Orders from TPC_H, reference to customer.'\n        datatype: 'STRING'\nmissing_columns:\n    legacy_orderkey: 'STRING'\nprejoined_columns:\n    customer_name:\n        src_name: 'tpc-h_sf1'\n        src_table: 'customer'\n        bk: 'c_name'\n        this_column_name: 'o_custkey'\n        ref_column_name: 'c_custkey'\nldts: \"{{ random_ldts() }}\"\nrsrc: '!tpc_h_sf1.orders'\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{{ datavault4dbt.stage(source_model=metadata_dict['source_model'],\n                    ldts=metadata_dict['ldts'],\n                    rsrc=metadata_dict['rsrc'],\n                    hashed_columns=metadata_dict['hashed_columns'],\n                    derived_columns=metadata_dict['derived_columns'],\n                    missing_columns=metadata_dict['missing_columns'],\n                    prejoined_columns=metadata_dict['prejoined_columns'],\n                    include_source_columns=true) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt_snowflake_demo.random_ldts", "macro.datavault4dbt.stage"], "nodes": ["source.datavault4dbt_snowflake_demo.tpc-h_sf1.orders", "source.datavault4dbt_snowflake_demo.tpc-h_sf1.customer", "source.datavault4dbt_snowflake_demo.tpc-h_sf1.customer", "source.datavault4dbt_snowflake_demo.tpc-h_sf1.customer"]}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_stage", "fqn": ["datavault4dbt_snowflake_demo", "stage", "stg_orders"], "unique_id": "model.datavault4dbt_snowflake_demo.stg_orders", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "stage/stg_orders.sql", "original_file_path": "models/stage/stg_orders.sql", "name": "stg_orders", "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "223374a848eb0843002f8d16008331fe5dcfd9525b1680cc02b7cbfa54e1dbcd"}, "tags": [], "refs": [], "sources": [["tpc-h_sf1", "orders"], ["tpc-h_sf1", "customer"], ["tpc-h_sf1", "customer"], ["tpc-h_sf1", "customer"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/stage/stg_orders.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stage"}, "created_at": 1675265328.2169886, "compiled_sql": "\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"O_ORDERKEY\",\n        \"O_CUSTKEY\",\n        \"O_ORDERSTATUS\",\n        \"O_TOTALPRICE\",\n        \"O_ORDERDATE\",\n        \"O_ORDERPRIORITY\",\n        \"O_CLERK\",\n        \"O_SHIPPRIORITY\",\n        \"O_COMMENT\"\n\n  FROM snowflake_sample_data.tpch_sf1.orders\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    CASE uniform(1, 5, random()) WHEN 1 THEN TO_TIMESTAMP('2022-10-01T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 2 THEN TO_TIMESTAMP('2022-10-02T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 3 THEN TO_TIMESTAMP('2022-10-03T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 4 THEN TO_TIMESTAMP('2022-10-04T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 5 THEN TO_TIMESTAMP('2022-10-05T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') END AS ldts,\n    CAST( 'tpc_h_sf1.orders' as STRING ) AS rsrc,\n      \n        \"O_ORDERKEY\",\n        \"O_CUSTKEY\",\n        \"O_ORDERSTATUS\",\n        \"O_TOTALPRICE\",\n        \"O_ORDERDATE\",\n        \"O_ORDERPRIORITY\",\n        \"O_CLERK\",\n        \"O_SHIPPRIORITY\",\n        \"O_COMMENT\"\n    \n\n  FROM source_data\n),\n\n\nmissing_columns AS (\n\n  SELECT\n\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"O_ORDERKEY\",\n        \"O_CUSTKEY\",\n        \"O_ORDERSTATUS\",\n        \"O_TOTALPRICE\",\n        \"O_ORDERDATE\",\n        \"O_ORDERPRIORITY\",\n        \"O_CLERK\",\n        \"O_SHIPPRIORITY\",\n        \"O_COMMENT\",\n    CAST(NULL as STRING) as legacy_orderkey\n\n  FROM ldts_rsrc_data\n),\n\nprejoined_columns AS (\n\n  SELECT\n  \n        lcte.\"LDTS\",\n         lcte.\"RSRC\",\n         lcte.\"O_ORDERKEY\",\n         lcte.\"O_CUSTKEY\",\n         lcte.\"O_ORDERSTATUS\",\n         lcte.\"O_TOTALPRICE\",\n         lcte.\"O_ORDERDATE\",\n         lcte.\"O_ORDERPRIORITY\",\n         lcte.\"O_CLERK\",\n         lcte.\"O_SHIPPRIORITY\",\n         lcte.\"O_COMMENT\",\n         lcte.\"LEGACY_ORDERKEY\"\n  ,pj_1.c_name AS customer_name\n  FROM missing_columns lcte\n    left join snowflake_sample_data.tpch_sf1.customer as pj_1 on lcte.o_custkey = pj_1.c_custkey\n  \n\n  \n),\n\nderived_columns AS (\n\n  SELECT\n  \n        \"LDTS\",\n        \"RSRC\",\n        \"O_ORDERKEY\",\n        \"O_CUSTKEY\",\n        \"O_ORDERSTATUS\",\n        \"O_TOTALPRICE\",\n        \"O_ORDERDATE\",\n        \"O_ORDERPRIORITY\",\n        \"O_CLERK\",\n        \"O_SHIPPRIORITY\",\n        \"O_COMMENT\",\n        \"LEGACY_ORDERKEY\",\n        \"CUSTOMER_NAME\",\n  \n  CASE WHEN (o_orderpriority = '1-URGENT') THEN true ELSE false END AS \"IS_HIGHEST_PRIORITY\",\n    'Orders from TPC_H, reference to customer.' AS \"DESCRIPTION\"\n\n  FROM prejoined_columns\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"O_ORDERKEY\",\n        \"O_CUSTKEY\",\n        \"O_ORDERSTATUS\",\n        \"O_TOTALPRICE\",\n        \"O_ORDERDATE\",\n        \"O_ORDERPRIORITY\",\n        \"O_CLERK\",\n        \"O_SHIPPRIORITY\",\n        \"O_COMMENT\",\n        \"LEGACY_ORDERKEY\",\n        \"CUSTOMER_NAME\",\n        \"IS_HIGHEST_PRIORITY\",\n        \"DESCRIPTION\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(o_orderkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_orders_h,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(o_custkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_customer_h,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(o_orderkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(o_custkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_l_orders_customer,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(o_orderstatus AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(o_totalprice AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(o_orderdate AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(o_orderpriority AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(o_clerk AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(o_shippriority AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(o_comment AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(is_highest_priority AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(description AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(legacy_orderkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(customer_name AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hd_orders_n_s\n\n    FROM derived_columns\n  \n),\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        0 AS O_ORDERKEY\n     ,\n        0 AS O_CUSTKEY\n     ,\n        '(unknown)' AS O_ORDERSTATUS\n     ,\n        0 AS O_TOTALPRICE\n     ,\n        NULL AS O_ORDERDATE\n     ,\n        '(unknown)' AS O_ORDERPRIORITY\n     ,\n        '(unknown)' AS O_CLERK\n     ,\n        0 AS O_SHIPPRIORITY\n     ,\n        '(unknown)' AS O_COMMENT\n     ,\n    \n        '(unknown)' AS legacy_orderkey\n     ,\n    \n      '(unknown)' AS customer_name\n     \n        ,\n    \n        '(unknown)' AS description\n     ,\n        CAST('FALSE' AS BOOLEAN) AS is_highest_priority\n     ,\n        CAST('00000000000000000000000000000000' as STRING) as hk_orders_h,\n        CAST('00000000000000000000000000000000' as STRING) as hk_customer_h,\n        CAST('00000000000000000000000000000000' as STRING) as hk_l_orders_customer,\n        CAST('00000000000000000000000000000000' as STRING) as hd_orders_n_s\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        -1 AS O_ORDERKEY\n     ,\n        -1 AS O_CUSTKEY\n     ,\n        '(error)' AS O_ORDERSTATUS\n     ,\n        -1 AS O_TOTALPRICE\n     ,\n        NULL AS O_ORDERDATE\n      ,\n        '(error)' AS O_ORDERPRIORITY\n     ,\n        '(error)' AS O_CLERK\n     ,\n        -1 AS O_SHIPPRIORITY\n     ,\n        '(error)' AS O_COMMENT\n     ,\n    \n        '(error)' AS legacy_orderkey\n     ,\n    '(error)' AS customer_name\n     \n      ,\n    \n        '(error)' AS description\n     ,\n        CAST('FALSE' AS BOOLEAN) AS is_highest_priority\n     ,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_orders_h,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_customer_h,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_l_orders_customer,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hd_orders_n_s\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"O_ORDERKEY\",\n        \"O_CUSTKEY\",\n        \"O_ORDERSTATUS\",\n        \"O_TOTALPRICE\",\n        \"O_ORDERDATE\",\n        \"O_ORDERPRIORITY\",\n        \"O_CLERK\",\n        \"O_SHIPPRIORITY\",\n        \"O_COMMENT\",\n        \"LEGACY_ORDERKEY\",\n        \"CUSTOMER_NAME\",\n        \"IS_HIGHEST_PRIORITY\",\n        \"DESCRIPTION\",\n        \"HK_ORDERS_H\",\n        \"HK_CUSTOMER_H\",\n        \"HK_L_ORDERS_CUSTOMER\",\n        \"HD_ORDERS_N_S\"\n\n    FROM hashed_columns\n\n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"O_ORDERKEY\",\n        \"O_CUSTKEY\",\n        \"O_ORDERSTATUS\",\n        \"O_TOTALPRICE\",\n        \"O_ORDERDATE\",\n        \"O_ORDERPRIORITY\",\n        \"O_CLERK\",\n        \"O_SHIPPRIORITY\",\n        \"O_COMMENT\",\n        \"LEGACY_ORDERKEY\",\n        \"CUSTOMER_NAME\",\n        \"IS_HIGHEST_PRIORITY\",\n        \"DESCRIPTION\",\n        \"HK_ORDERS_H\",\n        \"HK_CUSTOMER_H\",\n        \"HK_L_ORDERS_CUSTOMER\",\n        \"HD_ORDERS_N_S\"\n\n    FROM ghost_records\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_stage.stg_orders"}, "model.datavault4dbt_snowflake_demo.stg_customer": {"raw_sql": "{%- set yaml_metadata -%}\nsource_model:\n    'tpc-h_sf1': 'customer'\nhashed_columns: \n    hk_customer_h:\n        - c_custkey\n    hk_nation_h:\n        - c_nationkey\n    hk_customer_nation_l:\n        - c_custkey\n        - c_nationkey\n    hd_customer_n_s:\n        is_hashdiff: true\n        columns:\n            - c_name\n            - c_address\n            - c_phone\n    hd_customer_p_s:\n        is_hashdiff: true\n        columns:\n            - c_acctbal\n            - c_mktsegment\n            - c_comment\nldts: \"{{ random_ldts() }}\"\nrsrc: '!tpc_h_sf1.customer'\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{{ datavault4dbt.stage(source_model=metadata_dict['source_model'],\n                    ldts=metadata_dict['ldts'],\n                    rsrc=metadata_dict['rsrc'],\n                    hashed_columns=metadata_dict['hashed_columns'],\n                    derived_columns=none,\n                    missing_columns=none,\n                    prejoined_columns=none,\n                    include_source_columns=true) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt_snowflake_demo.random_ldts", "macro.datavault4dbt.stage"], "nodes": ["source.datavault4dbt_snowflake_demo.tpc-h_sf1.customer"]}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_stage", "fqn": ["datavault4dbt_snowflake_demo", "stage", "stg_customer"], "unique_id": "model.datavault4dbt_snowflake_demo.stg_customer", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "stage/stg_customer.sql", "original_file_path": "models/stage/stg_customer.sql", "name": "stg_customer", "alias": "stg_customer", "checksum": {"name": "sha256", "checksum": "78e432f4b359c7f73cb04fa046915fe6834cccc6c90ce71b593748d6a9169a3c"}, "tags": [], "refs": [], "sources": [["tpc-h_sf1", "customer"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/stage/stg_customer.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stage"}, "created_at": 1675265328.302071, "compiled_sql": "\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"C_CUSTKEY\",\n        \"C_NAME\",\n        \"C_ADDRESS\",\n        \"C_NATIONKEY\",\n        \"C_PHONE\",\n        \"C_ACCTBAL\",\n        \"C_MKTSEGMENT\",\n        \"C_COMMENT\"\n\n  FROM snowflake_sample_data.tpch_sf1.customer\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    CASE uniform(1, 5, random()) WHEN 1 THEN TO_TIMESTAMP('2022-10-01T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 2 THEN TO_TIMESTAMP('2022-10-02T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 3 THEN TO_TIMESTAMP('2022-10-03T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 4 THEN TO_TIMESTAMP('2022-10-04T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 5 THEN TO_TIMESTAMP('2022-10-05T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') END AS ldts,\n    CAST( 'tpc_h_sf1.customer' as STRING ) AS rsrc,\n      \n        \"C_CUSTKEY\",\n        \"C_NAME\",\n        \"C_ADDRESS\",\n        \"C_NATIONKEY\",\n        \"C_PHONE\",\n        \"C_ACCTBAL\",\n        \"C_MKTSEGMENT\",\n        \"C_COMMENT\"\n    \n\n  FROM source_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"C_CUSTKEY\",\n        \"C_NAME\",\n        \"C_ADDRESS\",\n        \"C_NATIONKEY\",\n        \"C_PHONE\",\n        \"C_ACCTBAL\",\n        \"C_MKTSEGMENT\",\n        \"C_COMMENT\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(c_custkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_customer_h,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(c_nationkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_nation_h,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(c_custkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(c_nationkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_customer_nation_l,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(c_name AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(c_address AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(c_phone AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hd_customer_n_s,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(c_acctbal AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(c_mktsegment AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(c_comment AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hd_customer_p_s\n\n    FROM ldts_rsrc_data\n  \n),\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        0 AS C_CUSTKEY\n     ,\n        '(unknown)' AS C_NAME\n     ,\n        '(unknown)' AS C_ADDRESS\n     ,\n        0 AS C_NATIONKEY\n     ,\n        '(unknown)' AS C_PHONE\n     ,\n        0 AS C_ACCTBAL\n     ,\n        '(unknown)' AS C_MKTSEGMENT\n     ,\n        '(unknown)' AS C_COMMENT\n     ,\n        CAST('00000000000000000000000000000000' as STRING) as hk_customer_h,\n        CAST('00000000000000000000000000000000' as STRING) as hk_nation_h,\n        CAST('00000000000000000000000000000000' as STRING) as hk_customer_nation_l,\n        CAST('00000000000000000000000000000000' as STRING) as hd_customer_n_s,\n        CAST('00000000000000000000000000000000' as STRING) as hd_customer_p_s\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        -1 AS C_CUSTKEY\n     ,\n        '(error)' AS C_NAME\n     ,\n        '(error)' AS C_ADDRESS\n     ,\n        -1 AS C_NATIONKEY\n     ,\n        '(error)' AS C_PHONE\n     ,\n        -1 AS C_ACCTBAL\n     ,\n        '(error)' AS C_MKTSEGMENT\n     ,\n        '(error)' AS C_COMMENT\n     ,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_customer_h,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_nation_h,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_customer_nation_l,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hd_customer_n_s,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hd_customer_p_s\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"C_CUSTKEY\",\n        \"C_NAME\",\n        \"C_ADDRESS\",\n        \"C_NATIONKEY\",\n        \"C_PHONE\",\n        \"C_ACCTBAL\",\n        \"C_MKTSEGMENT\",\n        \"C_COMMENT\",\n        \"HK_CUSTOMER_H\",\n        \"HK_NATION_H\",\n        \"HK_CUSTOMER_NATION_L\",\n        \"HD_CUSTOMER_N_S\",\n        \"HD_CUSTOMER_P_S\"\n\n    FROM hashed_columns\n\n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"C_CUSTKEY\",\n        \"C_NAME\",\n        \"C_ADDRESS\",\n        \"C_NATIONKEY\",\n        \"C_PHONE\",\n        \"C_ACCTBAL\",\n        \"C_MKTSEGMENT\",\n        \"C_COMMENT\",\n        \"HK_CUSTOMER_H\",\n        \"HK_NATION_H\",\n        \"HK_CUSTOMER_NATION_L\",\n        \"HD_CUSTOMER_N_S\",\n        \"HD_CUSTOMER_P_S\"\n\n    FROM ghost_records\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_stage.stg_customer"}, "model.datavault4dbt_snowflake_demo.stg_supplier": {"raw_sql": "{%- set yaml_metadata -%}\nsource_model:\n    'tpc-h_sf1': 'supplier'\nhashed_columns: \n    hk_supplier_h:\n        - s_suppkey\n    hk_nation_h:\n        - s_nationkey\n    hk_supplier_nation_l:\n        - s_suppkey\n        - s_nationkey\n    hd_supplier_p_s:\n        is_hashdiff: true\n        columns:\n            - s_name\n            - s_address\n            - s_phone\n    hd_supplier_n_s:\n        is_hashdiff: true\n        columns:\n            - s_acctbal\n            - s_comment          \nldts: \"{{ random_ldts() }}\"\nrsrc: '!tpc_h_sf1.supplier'\n{%- endset -%}\n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{{ datavault4dbt.stage(source_model=metadata_dict['source_model'],\n                    ldts=metadata_dict['ldts'],\n                    rsrc=metadata_dict['rsrc'],\n                    hashed_columns=metadata_dict['hashed_columns'],\n                    derived_columns=none,\n                    missing_columns=none,\n                    prejoined_columns=none,\n                    include_source_columns=true) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt_snowflake_demo.random_ldts", "macro.datavault4dbt.stage"], "nodes": ["source.datavault4dbt_snowflake_demo.tpc-h_sf1.supplier"]}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_stage", "fqn": ["datavault4dbt_snowflake_demo", "stage", "stg_supplier"], "unique_id": "model.datavault4dbt_snowflake_demo.stg_supplier", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "stage/stg_supplier.sql", "original_file_path": "models/stage/stg_supplier.sql", "name": "stg_supplier", "alias": "stg_supplier", "checksum": {"name": "sha256", "checksum": "c5eae9d64889122c10f8e533d472cfb6180ce0d5d2f116417ce8d5fd8a07df01"}, "tags": [], "refs": [], "sources": [["tpc-h_sf1", "supplier"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/stage/stg_supplier.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stage"}, "created_at": 1675265328.3281753, "compiled_sql": "\n\n\n\n\n\n\nWITH\n\n\nsource_data AS (\n    SELECT\n\n    \n        \"S_SUPPKEY\",\n        \"S_NAME\",\n        \"S_ADDRESS\",\n        \"S_NATIONKEY\",\n        \"S_PHONE\",\n        \"S_ACCTBAL\",\n        \"S_COMMENT\"\n\n  FROM snowflake_sample_data.tpch_sf1.supplier\n\n  ),\n\n\n\n\n\nldts_rsrc_data AS (\n\n  SELECT\n    CASE uniform(1, 5, random()) WHEN 1 THEN TO_TIMESTAMP('2022-10-01T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 2 THEN TO_TIMESTAMP('2022-10-02T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 3 THEN TO_TIMESTAMP('2022-10-03T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 4 THEN TO_TIMESTAMP('2022-10-04T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') WHEN 5 THEN TO_TIMESTAMP('2022-10-05T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') END AS ldts,\n    CAST( 'tpc_h_sf1.supplier' as STRING ) AS rsrc,\n      \n        \"S_SUPPKEY\",\n        \"S_NAME\",\n        \"S_ADDRESS\",\n        \"S_NATIONKEY\",\n        \"S_PHONE\",\n        \"S_ACCTBAL\",\n        \"S_COMMENT\"\n    \n\n  FROM source_data\n),\n\n\n\n\nhashed_columns AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"S_SUPPKEY\",\n        \"S_NAME\",\n        \"S_ADDRESS\",\n        \"S_NATIONKEY\",\n        \"S_PHONE\",\n        \"S_ACCTBAL\",\n        \"S_COMMENT\",\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(s_suppkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_supplier_h,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(s_nationkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_nation_h,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(s_suppkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(s_nationkey AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_supplier_nation_l,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(s_name AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(s_address AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(s_phone AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hd_supplier_p_s,\n    IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(s_acctbal AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(s_comment AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n        ), '\\n', '') \n        , '\\t', '') \n        , '\\v', '') \n        , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hd_supplier_n_s\n\n    FROM ldts_rsrc_data\n  \n),\nunknown_values AS (\n  \n    SELECT\n\n    TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'SYSTEM' as rsrc,\n    \n        0 AS S_SUPPKEY\n     ,\n        '(unknown)' AS S_NAME\n     ,\n        '(unknown)' AS S_ADDRESS\n     ,\n        0 AS S_NATIONKEY\n     ,\n        '(unknown)' AS S_PHONE\n     ,\n        0 AS S_ACCTBAL\n     ,\n        '(unknown)' AS S_COMMENT\n     ,\n        CAST('00000000000000000000000000000000' as STRING) as hk_supplier_h,\n        CAST('00000000000000000000000000000000' as STRING) as hk_nation_h,\n        CAST('00000000000000000000000000000000' as STRING) as hk_supplier_nation_l,\n        CAST('00000000000000000000000000000000' as STRING) as hd_supplier_p_s,\n        CAST('00000000000000000000000000000000' as STRING) as hd_supplier_n_s\n),\n\n\nerror_values AS (\n\n    SELECT\n\n    TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') as ldts,\n    'ERROR' as rsrc,\n    \n        -1 AS S_SUPPKEY\n     ,\n        '(error)' AS S_NAME\n     ,\n        '(error)' AS S_ADDRESS\n     ,\n        -1 AS S_NATIONKEY\n     ,\n        '(error)' AS S_PHONE\n     ,\n        -1 AS S_ACCTBAL\n     ,\n        '(error)' AS S_COMMENT\n     ,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_supplier_h,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_nation_h,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hk_supplier_nation_l,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hd_supplier_p_s,\n        CAST('ffffffffffffffffffffffffffffffff' as STRING) as hd_supplier_n_s\n),\n\n\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\ncolumns_to_select AS (\n\n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"S_SUPPKEY\",\n        \"S_NAME\",\n        \"S_ADDRESS\",\n        \"S_NATIONKEY\",\n        \"S_PHONE\",\n        \"S_ACCTBAL\",\n        \"S_COMMENT\",\n        \"HK_SUPPLIER_H\",\n        \"HK_NATION_H\",\n        \"HK_SUPPLIER_NATION_L\",\n        \"HD_SUPPLIER_P_S\",\n        \"HD_SUPPLIER_N_S\"\n\n    FROM hashed_columns\n\n    UNION ALL\n    \n    SELECT\n\n    \n        \"LDTS\",\n        \"RSRC\",\n        \"S_SUPPKEY\",\n        \"S_NAME\",\n        \"S_ADDRESS\",\n        \"S_NATIONKEY\",\n        \"S_PHONE\",\n        \"S_ACCTBAL\",\n        \"S_COMMENT\",\n        \"HK_SUPPLIER_H\",\n        \"HK_NATION_H\",\n        \"HK_SUPPLIER_NATION_L\",\n        \"HD_SUPPLIER_P_S\",\n        \"HD_SUPPLIER_N_S\"\n\n    FROM ghost_records\n)\n\nSELECT * FROM columns_to_select", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_stage.stg_supplier"}, "model.datavault4dbt_snowflake_demo.snap_v1": {"raw_sql": "{{ config(materialized='view',\n          schema='Control') }}\n\n{%- set yaml_metadata -%}\ncontrol_snap_v0: 'snap_v0'\nlog_logic: \n    daily:\n        duration: 3\n        unit: 'MONTH'\n    weekly:\n        duration: 1\n        unit: 'YEAR'\n    monthly:\n        duration: 5\n        unit: 'YEAR'\n    yearly:\n        forever: true\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set control_snap_v0 = metadata_dict['control_snap_v0'] -%}\n{%- set log_logic = metadata_dict['log_logic'] -%}\n\n{{ datavault4dbt.control_snap_v1(control_snap_v0=control_snap_v0,\n                                log_logic=log_logic) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.control_snap_v1"], "nodes": ["model.datavault4dbt_snowflake_demo.snap_v0"]}, "config": {"enabled": true, "alias": null, "schema": "Control", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_Control", "fqn": ["datavault4dbt_snowflake_demo", "control", "snap_v1"], "unique_id": "model.datavault4dbt_snowflake_demo.snap_v1", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "control/snap_v1.sql", "original_file_path": "models/control/snap_v1.sql", "name": "snap_v1", "alias": "snap_v1", "checksum": {"name": "sha256", "checksum": "7f58bd177e6c3f84ae1d52bb87a948cf4e8fde37f01ac9ca1fa924d758b6b3f0"}, "tags": [], "refs": [["snap_v0"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/control/snap_v1.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "Control", "materialized": "view"}, "created_at": 1675265328.353892, "compiled_sql": "WITH \n\nlatest_row AS (\n\n    SELECT\n        sdts\n    FROM dev_datavault4dbt.dbt_mgeerken_control.snap_v0\n    ORDER BY sdts DESC\n    LIMIT 1\n\n), \n\nvirtual_logic AS (\n    \n    SELECT\n        c.sdts,\n        c.replacement_sdts,\n        c.force_active,\n        CASE \n            WHEN\n            (DATE_TRUNC('DAY', c.sdts::DATE) BETWEEN CURRENT_DATE() - INTERVAL '3 MONTH' AND CURRENT_DATE()) OR            \n              ((DATE_TRUNC('DAY', c.sdts::DATE) BETWEEN CURRENT_DATE() - INTERVAL '1 YEAR' AND CURRENT_DATE()) AND (c.is_weekly = TRUE)) OR            \n              ((DATE_TRUNC('DAY', c.sdts::DATE) BETWEEN CURRENT_DATE() - INTERVAL '5 YEAR' AND CURRENT_DATE()) AND (c.is_monthly = TRUE)) OR\n              (c.is_yearly = TRUE)\n            THEN TRUE\n            ELSE FALSE\n        END AS is_active,\n\n        CASE\n            WHEN l.sdts IS NULL THEN FALSE\n            ELSE TRUE\n        END AS is_latest,\n\n        c.caption,\n        c.is_hourly,\n        c.is_daily,\n        c.is_weekly,\n        c.is_monthly,\n        c.is_yearly,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.sdts) = EXTRACT(YEAR FROM CURRENT_DATE()) THEN TRUE\n            ELSE FALSE\n        END AS is_current_year,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.sdts) = EXTRACT(YEAR FROM CURRENT_DATE())-1 THEN TRUE\n            ELSE FALSE\n        END AS is_last_year,\n        CASE\n            WHEN DATE_TRUNC('DAY', c.sdts::DATE) BETWEEN (CURRENT_DATE() - INTERVAL '1 YEAR') AND CURRENT_DATE() THEN TRUE\n            ELSE FALSE\n        END AS is_rolling_year,\n        CASE\n            WHEN DATE_TRUNC('DAY', c.sdts::DATE) BETWEEN (CURRENT_DATE() - INTERVAL '2 YEAR') AND (CURRENT_DATE() - INTERVAL '1 YEAR') THEN TRUE\n            ELSE FALSE\n        END AS is_last_rolling_year,\n        c.comment\n    FROM dev_datavault4dbt.dbt_mgeerken_control.snap_v0 c\n    LEFT JOIN latest_row l\n    ON c.sdts = l.sdts\n),\n\nactive_logic_combined AS (\n\n    SELECT \n        sdts,\n        replacement_sdts,\n        CASE\n            WHEN force_active AND is_active THEN TRUE\n            WHEN NOT force_active OR NOT is_active THEN FALSE\n        END AS is_active,\n        is_latest, \n        caption,\n        is_hourly,\n        is_daily,\n        is_weekly,\n        is_monthly,\n        is_yearly,\n        is_current_year,\n        is_last_year,\n        is_rolling_year,\n        is_last_rolling_year,\n        comment\n    FROM virtual_logic\n\n)\n\nSELECT * FROM active_logic_combined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_Control.snap_v1"}, "model.datavault4dbt_snowflake_demo.snap_v0": {"raw_sql": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nstart_date: '2015-01-01'\ndaily_snapshot_time: '07:30:00'\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set start_date = metadata_dict['start_date'] -%}\n{%- set daily_snapshot_time = metadata_dict['daily_snapshot_time'] -%}\n\n{{ datavault4dbt.control_snap_v0(start_date=start_date,\n                                daily_snapshot_time=daily_snapshot_time) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.control_snap_v0"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "control", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_control", "fqn": ["datavault4dbt_snowflake_demo", "control", "snap_v0"], "unique_id": "model.datavault4dbt_snowflake_demo.snap_v0", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "control/snap_v0.sql", "original_file_path": "models/control/snap_v0.sql", "name": "snap_v0", "alias": "snap_v0", "checksum": {"name": "sha256", "checksum": "86467943110982b1516929e75ab0c3316e79d12a873506a0615abe94b5907358"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/control/snap_v0.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "control", "materialized": "incremental"}, "created_at": 1675265328.380673, "compiled_sql": "WITH \n\ninitial_timestamps AS (\n    \n    SELECT\n        DATEADD(DAY, SEQ4(), \n        TIMESTAMPADD(SECOND, EXTRACT(SECOND FROM TO_TIME('07:30:00')), \n            TIMESTAMPADD(MINUTE, EXTRACT(MINUTE FROM TO_TIME('07:30:00')), \n                TIMESTAMPADD(HOUR, EXTRACT(HOUR FROM TO_TIME('07:30:00')), TO_DATE('2015-01-01', 'YYYY-MM-DD')))\n                ))::TIMESTAMP AS sdts\n    FROM \n        TABLE(GENERATOR(ROWCOUNT => 100000))\n    WHERE \n        sdts <= CURRENT_TIMESTAMP\n    AND sdts > (SELECT MAX(sdts) FROM dev_datavault4dbt.dbt_mgeerken_control.snap_v0)\n\n),\n\nenriched_timestamps AS (\n\n    SELECT\n        sdts as sdts,\n        TRUE as force_active,\n        sdts AS replacement_sdts,\n        CONCAT('Snapshot ', DATE(sdts)) AS caption,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END AS is_hourly,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 AND EXTRACT(HOUR FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END AS is_daily,\n        CASE\n            WHEN EXTRACT(DAYOFWEEK FROM  sdts) = 2 THEN TRUE\n            ELSE FALSE\n        END AS is_weekly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_monthly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 AND EXTRACT(MONTH FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_yearly,\n        NULL AS comment\n    FROM initial_timestamps\n\n)\n\nSELECT * FROM enriched_timestamps", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_control.snap_v0"}, "model.datavault4dbt_snowflake_demo.customer_rs": {"raw_sql": "{%- set yaml_metadata -%}\ntracked_hashkey: hk_customer_h\nsource_models:\n    stg_customer:\n        rsrc_static: 'TPC_H_SF1.Customer'\n    stg_supplier:\n        hk_column: hk_supplier_h\n        rsrc_static: 'TPC_H_SF1.Supplier'\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{{ datavault4dbt.rec_track_sat(tracked_hashkey=metadata_dict['tracked_hashkey'],\n                                source_models=metadata_dict['source_models']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.rec_track_sat"], "nodes": ["model.datavault4dbt_snowflake_demo.stg_customer", "model.datavault4dbt_snowflake_demo.stg_supplier"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "customer_rs"], "unique_id": "model.datavault4dbt_snowflake_demo.customer_rs", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/customer_rs.sql", "original_file_path": "models/raw_vault/customer_rs.sql", "name": "customer_rs", "alias": "customer_rs", "checksum": {"name": "sha256", "checksum": "d21c2ab20dd438b4ee5393613315ab84985603258425edcda40f7f57f5fa16ff"}, "tags": [], "refs": [["stg_customer"], ["stg_supplier"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/customer_rs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.396545, "compiled_sql": "\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_concated_target AS (\n\n        SELECT\n        CONCAT_WS('||', hk_customer_h, ldts, rsrc) as concat\n        FROM dev_datavault4dbt.dbt_mgeerken_core.customer_rs\n    ),rsrc_static_unionized AS (\n        \n        \n\n            SELECT \n                    hk_customer_h,\n                    ldts,\n                    'TPC_H_SF1.Customer' AS rsrc_static\n                    FROM dev_datavault4dbt.dbt_mgeerken_core.customer_rs\n                    WHERE rsrc like 'TPC_H_SF1.Customer'\n                UNION ALL \n            \n        \n\n            SELECT \n                    hk_customer_h,\n                    ldts,\n                    'TPC_H_SF1.Supplier' AS rsrc_static\n                    FROM dev_datavault4dbt.dbt_mgeerken_core.customer_rs\n                    WHERE rsrc like 'TPC_H_SF1.Supplier'),\n\n        max_ldts_per_rsrc_static_in_target AS (\n\n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_unionized\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),src_new_1 AS (\n            SELECT DISTINCT\n                hk_customer_h AS hk_customer_h,\n                ldts,\n                CAST('TPC_H_SF1.Customer' AS STRING ) AS rsrc,\n                CAST(UPPER('stg_customer') AS STRING)  AS stg\n            FROM dev_datavault4dbt.dbt_mgeerken_stage.stg_customer src\n                INNER JOIN max_ldts_per_rsrc_static_in_target max\n                    ON max.rsrc_static = 'TPC_H_SF1.Customer'\n                WHERE src.ldts > max.max_ldts\n\n        ),\n\nsrc_new_2 AS (\n            SELECT DISTINCT\n                hk_supplier_h AS hk_customer_h,\n                ldts,\n                CAST('TPC_H_SF1.Supplier' AS STRING ) AS rsrc,\n                CAST(UPPER('stg_supplier') AS STRING)  AS stg\n            FROM dev_datavault4dbt.dbt_mgeerken_stage.stg_supplier src\n                INNER JOIN max_ldts_per_rsrc_static_in_target max\n                    ON max.rsrc_static = 'TPC_H_SF1.Supplier'\n                WHERE src.ldts > max.max_ldts\n\n        ),\n\n\n\n\n\nsource_new_union AS (\n    SELECT\n        hk_customer_h,\n        ldts,\n        rsrc,\n        stg\n        FROM src_new_1\n        UNION ALL\n        SELECT\n        hk_customer_h,\n        ldts,\n        rsrc,\n        stg\n        FROM src_new_2),\n\nrecords_to_insert AS (\n\n    SELECT\n    \n        hk_customer_h,\n        ldts,\n        rsrc,\n        stg\n    FROM source_new_union\n    WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS') \n    AND ldts != TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')\n        AND CONCAT_WS('||', hk_customer_h, ldts, rsrc) NOT IN (SELECT * FROM distinct_concated_target)\n    \n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.customer_rs"}, "model.datavault4dbt_snowflake_demo.orders_h": {"raw_sql": "{%- set yaml_metadata -%}\nsource_models: stg_orders\nhashkey: hk_orders_h\nbusiness_keys: o_orderkey\n{%- endset -%}      \n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.hub(source_models=metadata_dict['source_models'],\n                     hashkey=metadata_dict['hashkey'],\n                     business_keys=metadata_dict['business_keys']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.hub"], "nodes": ["model.datavault4dbt_snowflake_demo.stg_orders"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "orders_h"], "unique_id": "model.datavault4dbt_snowflake_demo.orders_h", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/orders_h.sql", "original_file_path": "models/raw_vault/orders_h.sql", "name": "orders_h", "alias": "orders_h", "checksum": {"name": "sha256", "checksum": "fe1b15cade05881dcb7a680516c74900635c582e5435f08e63efa68c43dc9ed9"}, "tags": [], "refs": [["stg_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/orders_h.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.440362, "compiled_sql": "\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_hashkeys AS (\n\n        SELECT\n            hk_orders_h\n        FROM dev_datavault4dbt.dbt_mgeerken_core.orders_h\n\n    ),\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_orders_h AS hk_orders_h,\n            o_orderkey,\n            ldts,\n            rsrc\n        FROM dev_datavault4dbt.dbt_mgeerken_stage.stg_orders src\n\n    ),\n\nearliest_hk_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM src_new_1 AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_orders_h ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        hk_orders_h,\n        o_orderkey,\n        ldts,\n        rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_orders_h NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.orders_h"}, "model.datavault4dbt_snowflake_demo.lineitem_p_ns": {"raw_sql": "{%- set yaml_metadata -%}\nsource_model: stg_lineitem\nparent_hashkey: hk_lineitem_l\nsrc_payload:\n    - l_extendedprice\n    - l_discount\n    - l_tax\n{%- endset -%}      \n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.nh_sat(source_model=metadata_dict['source_model'],\n                     parent_hashkey=metadata_dict['parent_hashkey'],\n                     src_payload=metadata_dict['src_payload']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.nh_sat"], "nodes": ["model.datavault4dbt_snowflake_demo.stg_lineitem"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "lineitem_p_ns"], "unique_id": "model.datavault4dbt_snowflake_demo.lineitem_p_ns", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/lineitem_p_ns.sql", "original_file_path": "models/raw_vault/lineitem_p_ns.sql", "name": "lineitem_p_ns", "alias": "lineitem_p_ns", "checksum": {"name": "sha256", "checksum": "a48660c00a328cf9edcfdcfedc781ffbd8a206fde3b2908af80325427cb7bcd2"}, "tags": [], "refs": [["stg_lineitem"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/lineitem_p_ns.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.4913917, "compiled_sql": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\nsource_data AS \n(\n    SELECT\n        \n        hk_lineitem_l,\n        ldts,\n        rsrc,\n        l_extendedprice,\n        l_discount,\n        l_tax\n    FROM \n        dev_datavault4dbt.dbt_mgeerken_stage.stg_lineitem\n    WHERE ldts > (\n        SELECT \n            MAX(ldts) \n        FROM \n            dev_datavault4dbt.dbt_mgeerken_core.lineitem_p_ns\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\ndistinct_hashkeys AS \n(\n    SELECT DISTINCT\n        hk_lineitem_l\n    FROM \n        dev_datavault4dbt.dbt_mgeerken_core.lineitem_p_ns    \n),\nrecords_to_insert AS \n(\n    SELECT \n        \n        hk_lineitem_l,\n        ldts,\n        rsrc,\n        l_extendedprice,\n        l_discount,\n        l_tax\n    FROM \n        source_data\n    WHERE hk_lineitem_l NOT IN (SELECT * FROM distinct_hashkeys)\n)\nSELECT \n  * \nFROM \n  records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.lineitem_p_ns"}, "model.datavault4dbt_snowflake_demo.orders_n_s": {"raw_sql": "{%- set yaml_metadata -%}\nsat_v0: orders_n0_s\nhashkey: hk_orders_h\nhashdiff: hd_orders_n_s\nadd_is_current_flag: true\n{%- endset -%}      \n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.sat_v1(sat_v0=metadata_dict['sat_v0'],\n                     hashkey=metadata_dict['hashkey'],\n                     hashdiff=metadata_dict['hashdiff'],\n                     add_is_current_flag=metadata_dict['add_is_current_flag']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.sat_v1"], "nodes": ["model.datavault4dbt_snowflake_demo.orders_n0_s"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "orders_n_s"], "unique_id": "model.datavault4dbt_snowflake_demo.orders_n_s", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/orders_n_s.sql", "original_file_path": "models/raw_vault/orders_n_s.sql", "name": "orders_n_s", "alias": "orders_n_s", "checksum": {"name": "sha256", "checksum": "70db97a96ad8a5c14d931c577f2649745fe62dfafaf822a7b36e9b14c45b5db4"}, "tags": [], "refs": [["orders_n0_s"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/orders_n_s.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.5089235, "compiled_sql": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nend_dated_source AS (\n\n    SELECT\n        hk_orders_h,\n        hd_orders_n_s,\n        rsrc,\n        ldts,\n        COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_orders_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts,\n        \n        O_ORDERSTATUS,\n        O_TOTALPRICE,\n        O_ORDERDATE,\n        O_ORDERPRIORITY,\n        O_CLERK,\n        O_SHIPPRIORITY,\n        O_COMMENT,\n        IS_HIGHEST_PRIORITY,\n        DESCRIPTION,\n        LEGACY_ORDERKEY,\n        CUSTOMER_NAME\n    FROM dev_datavault4dbt.dbt_mgeerken_core.orders_n0_s\n\n)\n\nSELECT\n    hk_orders_h,\n    hd_orders_n_s,\n    rsrc,\n    ldts,\n    ledts,\n        CASE WHEN ledts = TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n          THEN TRUE\n          ELSE FALSE\n        END AS IS_CURRENT,\n    \n        O_ORDERSTATUS,\n        O_TOTALPRICE,\n        O_ORDERDATE,\n        O_ORDERPRIORITY,\n        O_CLERK,\n        O_SHIPPRIORITY,\n        O_COMMENT,\n        IS_HIGHEST_PRIORITY,\n        DESCRIPTION,\n        LEGACY_ORDERKEY,\n        CUSTOMER_NAME\nFROM end_dated_source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.orders_n_s"}, "model.datavault4dbt_snowflake_demo.orders_n0_s": {"raw_sql": "{%- set yaml_metadata -%}\nsource_model: stg_orders\nparent_hashkey: hk_orders_h\nsrc_hashdiff: hd_orders_n_s\nsrc_payload:\n    - o_orderstatus\n    - o_totalprice\n    - o_orderdate\n    - o_orderpriority\n    - o_clerk\n    - o_shippriority\n    - o_comment\n    - is_highest_priority\n    - description\n    - legacy_orderkey\n    - customer_name\n{%- endset -%}      \n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.sat_v0(source_model=metadata_dict['source_model'],\n                     parent_hashkey=metadata_dict['parent_hashkey'],\n                     src_hashdiff=metadata_dict['src_hashdiff'],\n                     src_payload=metadata_dict['src_payload']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.datavault4dbt_snowflake_demo.stg_orders"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "orders_n0_s"], "unique_id": "model.datavault4dbt_snowflake_demo.orders_n0_s", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/orders_n0_s.sql", "original_file_path": "models/raw_vault/orders_n0_s.sql", "name": "orders_n0_s", "alias": "orders_n0_s", "checksum": {"name": "sha256", "checksum": "69f561ab307d254e14821b0bdc93c17db3c4a18a90a0436c28b65310eb587a87"}, "tags": [], "refs": [["stg_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/orders_n0_s.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.528223, "compiled_sql": "\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_orders_h,\n        hd_orders_n_s as hd_orders_n_s,\n        \n        rsrc,\n        ldts,\n        o_orderstatus,\n        o_totalprice,\n        o_orderdate,\n        o_orderpriority,\n        o_clerk,\n        o_shippriority,\n        o_comment,\n        is_highest_priority,\n        description,\n        legacy_orderkey,\n        customer_name\n    FROM dev_datavault4dbt.dbt_mgeerken_stage.stg_orders\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM dev_datavault4dbt.dbt_mgeerken_core.orders_n0_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_orders_h,\n        hd_orders_n_s\n    FROM \n        dev_datavault4dbt.dbt_mgeerken_core.orders_n0_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_orders_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_orders_h,\n    hd_orders_n_s,\n    \n        rsrc,\n        ldts,\n        o_orderstatus,\n        o_totalprice,\n        o_orderdate,\n        o_orderpriority,\n        o_clerk,\n        o_shippriority,\n        o_comment,\n        is_highest_priority,\n        description,\n        legacy_orderkey,\n        customer_name\n    , ROW_NUMBER() OVER(PARTITION BY hk_orders_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_orders_n_s = LAG(hd_orders_n_s) OVER(PARTITION BY hk_orders_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_orders_h,\n    hd_orders_n_s,\n    \n        rsrc,\n        ldts,\n        o_orderstatus,\n        o_totalprice,\n        o_orderdate,\n        o_orderpriority,\n        o_clerk,\n        o_shippriority,\n        o_comment,\n        is_highest_priority,\n        description,\n        legacy_orderkey,\n        customer_name\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_orders_h = deduplicated_numbered_source.hk_orders_h\n            AND latest_entries_in_sat.hd_orders_n_s = deduplicated_numbered_source.hd_orders_n_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.orders_n0_s"}, "model.datavault4dbt_snowflake_demo.lineitem_nl": {"raw_sql": "{%- set yaml_metadata -%}\nsource_models: stg_lineitem\nlink_hashkey: hk_lineitem_l\nforeign_hashkeys: \n    - hk_orders_h\n    - hk_parts_h\n    - hk_supplier_h\npayload:\n    - l_linenumber\n    - l_quantity\n    - l_extendedprice\n    - l_discount\n    - l_tax\n    - l_returnflag\n    - l_linestatus\n    - l_shipdate\n    - l_commitdate\n    - l_receiptdate\n    - l_shipinstruct\n    - l_shipmode\n    - l_comment\n{%- endset -%}      \n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.nh_link(source_models=metadata_dict['source_models'],\n                     link_hashkey=metadata_dict['link_hashkey'],\n                     foreign_hashkeys=metadata_dict['foreign_hashkeys'],\n                     payload=metadata_dict['payload']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.nh_link"], "nodes": ["model.datavault4dbt_snowflake_demo.stg_lineitem"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "lineitem_nl"], "unique_id": "model.datavault4dbt_snowflake_demo.lineitem_nl", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/lineitem_nl.sql", "original_file_path": "models/raw_vault/lineitem_nl.sql", "name": "lineitem_nl", "alias": "lineitem_nl", "checksum": {"name": "sha256", "checksum": "e1a77d33ae6dda356660ea720a2e5d35766100812150a672d117a90748c36fd8"}, "tags": [], "refs": [["stg_lineitem"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/lineitem_nl.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.6423273, "compiled_sql": "\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n    distinct_target_hashkeys AS (\n\n        SELECT\n        hk_lineitem_l\n        FROM dev_datavault4dbt.dbt_mgeerken_core.lineitem_nl\n\n    ),\n\nsrc_new_1 AS (\n\n    SELECT\n        hk_lineitem_l AS hk_lineitem_l,\n\n        \n            hk_orders_h,\n            hk_parts_h,\n            hk_supplier_h,\n\n        ldts,\n        rsrc,\n\n        \n           l_linenumber,\n           l_quantity,\n           l_extendedprice,\n           l_discount,\n           l_tax,\n           l_returnflag,\n           l_linestatus,\n           l_shipdate,\n           l_commitdate,\n           l_receiptdate,\n           l_shipinstruct,\n           l_shipmode,\n           l_comment\n\n    FROM dev_datavault4dbt.dbt_mgeerken_stage.stg_lineitem src\n    \n    \n    \n\n    ),\n\nearliest_hk_over_all_sources AS (\n\n\n    SELECT\n        lcte.*\n    FROM src_new_1 AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_lineitem_l ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n\n\n    SELECT\n    \n        hk_lineitem_l,\n        hk_orders_h,\n        hk_parts_h,\n        hk_supplier_h,\n        ldts,\n        rsrc,\n        l_linenumber,\n        l_quantity,\n        l_extendedprice,\n        l_discount,\n        l_tax,\n        l_returnflag,\n        l_linestatus,\n        l_shipdate,\n        l_commitdate,\n        l_receiptdate,\n        l_shipinstruct,\n        l_shipmode,\n        l_comment\n    FROM earliest_hk_over_all_sources\n    WHERE hk_lineitem_l NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.lineitem_nl"}, "model.datavault4dbt_snowflake_demo.nation_h": {"raw_sql": "{%- set yaml_metadata -%}\r\nsource_models:\r\n    stg_nation:\r\n        rsrc_static: 'tpc_h_sf1.nation'\r\nhashkey: hk_nation_h\r\nbusiness_keys: n_nationkey\r\n{%- endset -%}      \r\n\r\n{% set metadata_dict = fromyaml(yaml_metadata) %}\r\n\r\n{{ datavault4dbt.hub(source_models=metadata_dict['source_models'],\r\n                     hashkey=metadata_dict['hashkey'],\r\n                     business_keys=metadata_dict['business_keys']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.hub"], "nodes": ["model.datavault4dbt_snowflake_demo.stg_nation"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "nation_h"], "unique_id": "model.datavault4dbt_snowflake_demo.nation_h", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/nation_h.sql", "original_file_path": "models/raw_vault/nation_h.sql", "name": "nation_h", "alias": "nation_h", "checksum": {"name": "sha256", "checksum": "42f0b49fe85906a0a0fdb034739111ec547796823d9101a7d545e007a4ecfc1d"}, "tags": [], "refs": [["stg_nation"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/nation_h.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.6862707, "compiled_sql": "\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_hashkeys AS (\n\n        SELECT\n            hk_nation_h\n        FROM dev_datavault4dbt.dbt_mgeerken_core.nation_h\n\n    ),\n         \n\n            rsrc_static_1 AS (SELECT \n                    t.*,\n                    'tpc_h_sf1.nation' AS rsrc_static\n                    FROM dev_datavault4dbt.dbt_mgeerken_core.nation_h t\n                    WHERE rsrc like 'tpc_h_sf1.nation'),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_1\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_nation_h AS hk_nation_h,\n            n_nationkey,\n            ldts,\n            rsrc\n        FROM dev_datavault4dbt.dbt_mgeerken_stage.stg_nation src\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        (max.rsrc_static = 'tpc_h_sf1.nation')\n        WHERE src.ldts > max.max_ldts\n\n    ),\n\nearliest_hk_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM src_new_1 AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_nation_h ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        hk_nation_h,\n        n_nationkey,\n        ldts,\n        rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_nation_h NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.nation_h"}, "model.datavault4dbt_snowflake_demo.customer_p_s": {"raw_sql": "{%- set yaml_metadata -%}\nsat_v0: customer_p0_s\nhashkey: hk_customer_h\nhashdiff: hd_customer_p_s\nadd_is_current_flag: true\n{%- endset -%}      \n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.sat_v1(sat_v0=metadata_dict['sat_v0'],\n                     hashkey=metadata_dict['hashkey'],\n                     hashdiff=metadata_dict['hashdiff'],\n                     add_is_current_flag=metadata_dict['add_is_current_flag']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.sat_v1"], "nodes": ["model.datavault4dbt_snowflake_demo.customer_p0_s"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "customer_p_s"], "unique_id": "model.datavault4dbt_snowflake_demo.customer_p_s", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/customer_p_s.sql", "original_file_path": "models/raw_vault/customer_p_s.sql", "name": "customer_p_s", "alias": "customer_p_s", "checksum": {"name": "sha256", "checksum": "2ac772f75610e30521bddce6d7235dc25a8df50d945d3405b79d74fca1c64d20"}, "tags": [], "refs": [["customer_p0_s"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/customer_p_s.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.695043, "compiled_sql": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nend_dated_source AS (\n\n    SELECT\n        hk_customer_h,\n        hd_customer_p_s,\n        rsrc,\n        ldts,\n        COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_customer_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts,\n        \n        C_ACCTBAL,\n        C_MKTSEGMENT,\n        C_COMMENT\n    FROM dev_datavault4dbt.dbt_mgeerken_core.customer_p0_s\n\n)\n\nSELECT\n    hk_customer_h,\n    hd_customer_p_s,\n    rsrc,\n    ldts,\n    ledts,\n        CASE WHEN ledts = TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n          THEN TRUE\n          ELSE FALSE\n        END AS IS_CURRENT,\n    \n        C_ACCTBAL,\n        C_MKTSEGMENT,\n        C_COMMENT\nFROM end_dated_source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.customer_p_s"}, "model.datavault4dbt_snowflake_demo.customer_p0_s": {"raw_sql": "{%- set yaml_metadata -%}\nsource_model: stg_customer\nparent_hashkey: hk_customer_h\nsrc_hashdiff: hd_customer_p_s\nsrc_payload:\n    - c_acctbal\n    - c_mktsegment\n    - c_comment\n{%- endset -%}      \n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.sat_v0(source_model=metadata_dict['source_model'],\n                     parent_hashkey=metadata_dict['parent_hashkey'],\n                     src_hashdiff=metadata_dict['src_hashdiff'],\n                     src_payload=metadata_dict['src_payload']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.datavault4dbt_snowflake_demo.stg_customer"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "customer_p0_s"], "unique_id": "model.datavault4dbt_snowflake_demo.customer_p0_s", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/customer_p0_s.sql", "original_file_path": "models/raw_vault/customer_p0_s.sql", "name": "customer_p0_s", "alias": "customer_p0_s", "checksum": {"name": "sha256", "checksum": "807db8480db90dd107f390e6b3c7e39f7f74199229c8565027416fc84cae56c4"}, "tags": [], "refs": [["stg_customer"]], "sources": [], "metrics": [], "description": "", "columns": {"hk_customer_h": {"name": "hk_customer_h", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hd_customer_p_s": {"name": "hd_customer_p_s", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rsrc": {"name": "rsrc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ldts": {"name": "ldts", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_acctbal": {"name": "c_acctbal", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_mktsegment": {"name": "c_mktsegment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_comment": {"name": "c_comment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "datavault4dbt_snowflake_demo://models/raw_vault/_schema.yml", "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/customer_p0_s.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.907215, "compiled_sql": "\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_customer_h,\n        hd_customer_p_s as hd_customer_p_s,\n        \n        rsrc,\n        ldts,\n        c_acctbal,\n        c_mktsegment,\n        c_comment\n    FROM dev_datavault4dbt.dbt_mgeerken_stage.stg_customer\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM dev_datavault4dbt.dbt_mgeerken_core.customer_p0_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_customer_h,\n        hd_customer_p_s\n    FROM \n        dev_datavault4dbt.dbt_mgeerken_core.customer_p0_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_customer_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_customer_h,\n    hd_customer_p_s,\n    \n        rsrc,\n        ldts,\n        c_acctbal,\n        c_mktsegment,\n        c_comment\n    , ROW_NUMBER() OVER(PARTITION BY hk_customer_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_customer_p_s = LAG(hd_customer_p_s) OVER(PARTITION BY hk_customer_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_customer_h,\n    hd_customer_p_s,\n    \n        rsrc,\n        ldts,\n        c_acctbal,\n        c_mktsegment,\n        c_comment\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_customer_h = deduplicated_numbered_source.hk_customer_h\n            AND latest_entries_in_sat.hd_customer_p_s = deduplicated_numbered_source.hd_customer_p_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.customer_p0_s"}, "model.datavault4dbt_snowflake_demo.orders_customer_l": {"raw_sql": "{%- set yaml_metadata -%}\nsource_models: stg_orders\nlink_hashkey: hk_l_orders_customer\nforeign_hashkeys: \n    - hk_orders_h\n    - hk_customer_h\n{%- endset -%}      \n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.link(source_models=metadata_dict['source_models'],\n                     link_hashkey=metadata_dict['link_hashkey'],\n                     foreign_hashkeys=metadata_dict['foreign_hashkeys']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.link"], "nodes": ["model.datavault4dbt_snowflake_demo.stg_orders"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "orders_customer_l"], "unique_id": "model.datavault4dbt_snowflake_demo.orders_customer_l", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/orders_customer_l.sql", "original_file_path": "models/raw_vault/orders_customer_l.sql", "name": "orders_customer_l", "alias": "orders_customer_l", "checksum": {"name": "sha256", "checksum": "784648e8fd0aa66228600dbdedae4051e15e20e9ff3605a0ab860c1ef27c6227"}, "tags": [], "refs": [["stg_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/orders_customer_l.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.7147512, "compiled_sql": "\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        hk_l_orders_customer\n        FROM dev_datavault4dbt.dbt_mgeerken_core.orders_customer_l\n\n    ),\n\nsrc_new_1 AS (\n\n        SELECT\n            hk_l_orders_customer AS hk_l_orders_customer,\n            hk_orders_h,\n            hk_customer_h,\n            ldts,\n            rsrc\n        FROM dev_datavault4dbt.dbt_mgeerken_stage.stg_orders src\n\n    ),\n\nearliest_hk_over_all_sources AS (\n    \n\n    SELECT\n        lcte.*\n    FROM src_new_1 AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_l_orders_customer ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    \n\n    SELECT\n        \n            hk_l_orders_customer,\n            hk_orders_h,\n            hk_customer_h,\n            ldts,\n            rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_l_orders_customer NOT IN (SELECT * FROM distinct_target_hashkeys)\n    \n)\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.orders_customer_l"}, "model.datavault4dbt_snowflake_demo.customer_h": {"raw_sql": "{%- set yaml_metadata -%}\nsource_models: \n    stg_customer:\n        rsrc_static: 'tpc_h_sf1.customer'\n    stg_supplier:\n        hk_column: 'hk_supplier_h'\n        bk_columns: s_suppkey\n        rsrc_static: 'tpc_h_sf1.supplier'\nhashkey: hk_customer_h\nbusiness_keys: c_custkey\n{%- endset -%}      \n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.hub(source_models=metadata_dict['source_models'],\n                     hashkey=metadata_dict['hashkey'],\n                     business_keys=metadata_dict['business_keys']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.hub"], "nodes": ["model.datavault4dbt_snowflake_demo.stg_customer", "model.datavault4dbt_snowflake_demo.stg_supplier"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "customer_h"], "unique_id": "model.datavault4dbt_snowflake_demo.customer_h", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/customer_h.sql", "original_file_path": "models/raw_vault/customer_h.sql", "name": "customer_h", "alias": "customer_h", "checksum": {"name": "sha256", "checksum": "1341b4426a1ac4c0bc75c2fe608845b7311c7994c2dae3fad7f45c97af0b83df"}, "tags": [], "refs": [["stg_customer"], ["stg_supplier"]], "sources": [], "metrics": [], "description": "", "columns": {"hk_customer_h": {"name": "hk_customer_h", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_custkey": {"name": "c_custkey", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ldts": {"name": "ldts", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rsrc": {"name": "rsrc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "datavault4dbt_snowflake_demo://models/raw_vault/_schema.yml", "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/customer_h.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.9001198, "compiled_sql": "\n\n\n\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\n    distinct_target_hashkeys AS (\n\n        SELECT\n            hk_customer_h\n        FROM dev_datavault4dbt.dbt_mgeerken_core.customer_h\n\n    ),\n         \n\n            rsrc_static_1 AS (SELECT \n                    t.*,\n                    'tpc_h_sf1.customer' AS rsrc_static\n                    FROM dev_datavault4dbt.dbt_mgeerken_core.customer_h t\n                    WHERE rsrc like 'tpc_h_sf1.customer'),\n         \n\n            rsrc_static_2 AS (SELECT \n                    t.*,\n                    'tpc_h_sf1.supplier' AS rsrc_static\n                    FROM dev_datavault4dbt.dbt_mgeerken_core.customer_h t\n                    WHERE rsrc like 'tpc_h_sf1.supplier'),\n\n        rsrc_static_union AS (\n            \n            SELECT rsrc_static_1.* FROM rsrc_static_1\n            UNION ALL\n            SELECT rsrc_static_2.* FROM rsrc_static_2),\n\n        max_ldts_per_rsrc_static_in_target AS (\n        \n            SELECT\n                rsrc_static,\n                MAX(ldts) as max_ldts\n            FROM rsrc_static_union\n            WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n            GROUP BY rsrc_static\n\n        ),\n\n\n    src_new_1 AS (\n\n        SELECT\n            hk_customer_h AS hk_customer_h,\n            c_custkey,\n            ldts,\n            rsrc\n        FROM dev_datavault4dbt.dbt_mgeerken_stage.stg_customer src\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        (max.rsrc_static = 'tpc_h_sf1.customer')\n        WHERE src.ldts > max.max_ldts\n\n    ),\n\n    src_new_2 AS (\n\n        SELECT\n            hk_supplier_h AS hk_customer_h,\n            s_suppkey,\n            ldts,\n            rsrc\n        FROM dev_datavault4dbt.dbt_mgeerken_stage.stg_supplier src\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        (max.rsrc_static = 'tpc_h_sf1.supplier')\n        WHERE src.ldts > max.max_ldts\n\n    ),\n\nsource_new_union AS (SELECT\n        hk_customer_h,\n\n        c_custkey AS c_custkey,\n        ldts,\n        rsrc\n    FROM src_new_1\n    UNION ALL\n    SELECT\n        hk_customer_h,\n\n        s_suppkey AS c_custkey,\n        ldts,\n        rsrc\n    FROM src_new_2),\n\nearliest_hk_over_all_sources AS (\n    SELECT\n        lcte.*\n    FROM source_new_union AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_customer_h ORDER BY ldts) = 1),\n\nrecords_to_insert AS (\n    SELECT\n        \n        hk_customer_h,\n        c_custkey,\n        ldts,\n        rsrc\n    FROM earliest_hk_over_all_sources\n    WHERE hk_customer_h NOT IN (SELECT * FROM distinct_target_hashkeys)\n    )\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.customer_h"}, "model.datavault4dbt_snowflake_demo.customer_n0_s": {"raw_sql": "{%- set yaml_metadata -%}\nsource_model: stg_customer\nparent_hashkey: hk_customer_h\nsrc_hashdiff: hd_customer_n_s\nsrc_payload:\n    - c_name\n    - c_address\n    - c_phone\n{%- endset -%}      \n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.sat_v0(source_model=metadata_dict['source_model'],\n                     parent_hashkey=metadata_dict['parent_hashkey'],\n                     src_hashdiff=metadata_dict['src_hashdiff'],\n                     src_payload=metadata_dict['src_payload']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.sat_v0"], "nodes": ["model.datavault4dbt_snowflake_demo.stg_customer"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "customer_n0_s"], "unique_id": "model.datavault4dbt_snowflake_demo.customer_n0_s", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/customer_n0_s.sql", "original_file_path": "models/raw_vault/customer_n0_s.sql", "name": "customer_n0_s", "alias": "customer_n0_s", "checksum": {"name": "sha256", "checksum": "6f59353f09a98c655e0783641f1a79f11f8f9811cb6b55958afc4a6a4b5928ba"}, "tags": [], "refs": [["stg_customer"]], "sources": [], "metrics": [], "description": "", "columns": {"hk_customer_h": {"name": "hk_customer_h", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hd_customer_n_s": {"name": "hd_customer_n_s", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rsrc": {"name": "rsrc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ldts": {"name": "ldts", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_name": {"name": "c_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_address": {"name": "c_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_phone": {"name": "c_phone", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "datavault4dbt_snowflake_demo://models/raw_vault/_schema.yml", "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/customer_n0_s.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.9038236, "compiled_sql": "\n\n\n    \n    \n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nsource_data AS (\n\n    SELECT\n        hk_customer_h,\n        hd_customer_n_s as hd_customer_n_s,\n        \n        rsrc,\n        ldts,\n        c_name,\n        c_address,\n        c_phone\n    FROM dev_datavault4dbt.dbt_mgeerken_stage.stg_customer\n    WHERE ldts > (\n        SELECT\n            MAX(ldts) FROM dev_datavault4dbt.dbt_mgeerken_core.customer_n0_s\n        WHERE ldts != TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n    )\n),\n\n\nlatest_entries_in_sat AS (\n\n    SELECT\n        hk_customer_h,\n        hd_customer_n_s\n    FROM \n        dev_datavault4dbt.dbt_mgeerken_core.customer_n0_s\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY hk_customer_h ORDER BY ldts DESC) = 1  \n),\n\n\ndeduplicated_numbered_source AS (\n\n    SELECT\n    hk_customer_h,\n    hd_customer_n_s,\n    \n        rsrc,\n        ldts,\n        c_name,\n        c_address,\n        c_phone\n    , ROW_NUMBER() OVER(PARTITION BY hk_customer_h ORDER BY ldts) as rn\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN hd_customer_n_s = LAG(hd_customer_n_s) OVER(PARTITION BY hk_customer_h ORDER BY ldts) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n\nrecords_to_insert AS (\n\n    SELECT\n    hk_customer_h,\n    hd_customer_n_s,\n    \n        rsrc,\n        ldts,\n        c_name,\n        c_address,\n        c_phone\n    FROM deduplicated_numbered_source\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE latest_entries_in_sat.hk_customer_h = deduplicated_numbered_source.hk_customer_h\n            AND latest_entries_in_sat.hd_customer_n_s = deduplicated_numbered_source.hd_customer_n_s\n            AND deduplicated_numbered_source.rn = 1)\n\n    )\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.customer_n0_s"}, "model.datavault4dbt_snowflake_demo.customer_n_s": {"raw_sql": "{%- set yaml_metadata -%}\nsat_v0: customer_n0_s\nhashkey: hk_customer_h\nhashdiff: hd_customer_n_s\nadd_is_current_flag: true\n{%- endset -%}      \n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ datavault4dbt.sat_v1(sat_v0=metadata_dict['sat_v0'],\n                     hashkey=metadata_dict['hashkey'],\n                     hashdiff=metadata_dict['hashdiff'],\n                     add_is_current_flag=metadata_dict['add_is_current_flag']) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.sat_v1"], "nodes": ["model.datavault4dbt_snowflake_demo.customer_n0_s"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "customer_n_s"], "unique_id": "model.datavault4dbt_snowflake_demo.customer_n_s", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "raw_vault/customer_n_s.sql", "original_file_path": "models/raw_vault/customer_n_s.sql", "name": "customer_n_s", "alias": "customer_n_s", "checksum": {"name": "sha256", "checksum": "00f6222680e3ee74ec59460b3c4bd565f568d962e5abc879d48ac5e03dd1cc89"}, "tags": [], "refs": [["customer_n0_s"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/customer_n_s.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental"}, "created_at": 1675265328.776059, "compiled_sql": "\n\n\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\n\nend_dated_source AS (\n\n    SELECT\n        hk_customer_h,\n        hd_customer_n_s,\n        rsrc,\n        ldts,\n        COALESCE(LEAD(ldts - INTERVAL '1 MICROSECOND') OVER (PARTITION BY hk_customer_h ORDER BY ldts),TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')) AS ledts,\n        \n        C_NAME,\n        C_ADDRESS,\n        C_PHONE\n    FROM dev_datavault4dbt.dbt_mgeerken_core.customer_n0_s\n\n)\n\nSELECT\n    hk_customer_h,\n    hd_customer_n_s,\n    rsrc,\n    ldts,\n    ledts,\n        CASE WHEN ledts = TO_TIMESTAMP('8888-12-31T23:59:59', 'YYYY-MM-DDTHH24:MI:SS')\n          THEN TRUE\n          ELSE FALSE\n        END AS IS_CURRENT,\n    \n        C_NAME,\n        C_ADDRESS,\n        C_PHONE\nFROM end_dated_source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.customer_n_s"}, "model.datavault4dbt_snowflake_demo.customer_pb": {"raw_sql": "{{ config(materialized='incremental',\n          post_hook=\"{{ datavault4dbt.clean_up_pit('snap_v1') }}\") }}\n\n{%- set yaml_metadata -%}\ntracked_entity: customer_h\nhashkey: 'hk_customer_h'\nsat_names:\n    - customer_n_s\n    - customer_p_s\nsnapshot_relation: 'snap_v1'\nsnapshot_trigger_column: 'is_active'\ndimension_key: 'hk_customer_d'\n{%- endset -%}    \n\n{%- set metadata_dict = fromyaml(yaml_metadata) -%}\n\n{%- set pit_type = none -%}\n{%- set tracked_entity = metadata_dict['tracked_entity'] -%}\n{%- set hashkey = metadata_dict['hashkey'] -%}\n{%- set sat_names = metadata_dict['sat_names'] -%}\n{%- set snapshot_relation = metadata_dict['snapshot_relation'] -%}\n{%- set snapshot_trigger_column = metadata_dict['snapshot_trigger_column'] -%}\n{%- set dimension_key = metadata_dict['dimension_key'] -%}\n{%- set custom_rsrc = none -%}\n\n{{ datavault4dbt.pit(pit_type=pit_type,\n                                tracked_entity=tracked_entity,\n                                hashkey=hashkey,\n                                sat_names=sat_names,\n                                snapshot_relation=snapshot_relation,\n                                snapshot_trigger_column=snapshot_trigger_column,\n                                dimension_key=dimension_key,\n                                custom_rsrc=custom_rsrc) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.datavault4dbt.pit", "macro.datavault4dbt.clean_up_pit"], "nodes": ["model.datavault4dbt_snowflake_demo.customer_h", "model.datavault4dbt_snowflake_demo.snap_v1", "model.datavault4dbt_snowflake_demo.customer_n_s", "model.datavault4dbt_snowflake_demo.customer_n_s", "model.datavault4dbt_snowflake_demo.customer_p_s", "model.datavault4dbt_snowflake_demo.customer_p_s", "model.datavault4dbt_snowflake_demo.snap_v1"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "{{ datavault4dbt.clean_up_pit('snap_v1') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_core", "fqn": ["datavault4dbt_snowflake_demo", "business_vault", "customer_pb"], "unique_id": "model.datavault4dbt_snowflake_demo.customer_pb", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "business_vault/customer_pb.sql", "original_file_path": "models/business_vault/customer_pb.sql", "name": "customer_pb", "alias": "customer_pb", "checksum": {"name": "sha256", "checksum": "0b3680c2413b4ef1f72acf38a90bbad8fdd8899a405a9c818c3cb6c90e3f7d33"}, "tags": [], "refs": [["customer_h"], ["snap_v1"], ["customer_n_s"], ["customer_n_s"], ["customer_p_s"], ["customer_p_s"], ["snap_v1"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/business_vault/customer_pb.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "materialized": "incremental", "post-hook": ["{{ datavault4dbt.clean_up_pit('snap_v1') }}"]}, "created_at": 1675265328.7854328, "compiled_sql": "\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n\nWITH\n\nexisting_dimension_keys AS (\n\n    SELECT\n        hk_customer_d\n    FROM dev_datavault4dbt.dbt_mgeerken_core.customer_pb\n\n),\n\npit_records AS (\n\n    SELECT\n        \n        \n        \n        IFNULL(LOWER(MD5(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\n        \n    IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(te.hk_customer_h AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^'),'||',\n        \n    IFNULL((CONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST(snap.sdts AS STRING)), '\\\\', '\\\\\\\\'), '\"', '\\\"'), '^^', '--'), '\\'')), '^^')\n    ), '\\n', '') \n    , '\\t', '') \n    , '\\v', '') \n    , '\\r', '') AS STRING), ''))), '00000000000000000000000000000000') AS hk_customer_d ,\n        te.hk_customer_h,\n        snap.sdts,\n            COALESCE(customer_n_s.hk_customer_h, CAST(00000000000000000000000000000000 AS STRING)) AS hk_customer_n_s,\n            COALESCE(customer_n_s.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_customer_n_s,\n            COALESCE(customer_p_s.hk_customer_h, CAST(00000000000000000000000000000000 AS STRING)) AS hk_customer_p_s,\n            COALESCE(customer_p_s.ldts, TO_TIMESTAMP('0001-01-01T00:00:01', 'YYYY-MM-DDTHH24:MI:SS')) AS ldts_customer_p_s\n\n    FROM\n            dev_datavault4dbt.dbt_mgeerken_core.customer_h te\n        FULL OUTER JOIN\n            dev_datavault4dbt.dbt_mgeerken_Control.snap_v1 snap\n            ON snap.is_active = true\n            \n        \n        LEFT JOIN dev_datavault4dbt.dbt_mgeerken_core.customer_n_s\n            ON\n                customer_n_s.hk_customer_h = te.hk_customer_h\n                    AND snap.sdts BETWEEN customer_n_s.ldts AND customer_n_s.ledts\n        LEFT JOIN dev_datavault4dbt.dbt_mgeerken_core.customer_p_s\n            ON\n                customer_p_s.hk_customer_h = te.hk_customer_h\n                    AND snap.sdts BETWEEN customer_p_s.ldts AND customer_p_s.ledts\n    \n        WHERE snap.is_active\n\n),\n\nrecords_to_insert AS (\n\n    SELECT *\n    FROM pit_records\n    WHERE hk_customer_d NOT IN (SELECT * FROM existing_dimension_keys)\n    )\n\nSELECT * FROM records_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_datavault4dbt.dbt_mgeerken_core.customer_pb"}, "test.datavault4dbt_snowflake_demo.relationships_customer_n0_s_hk_customer_h__hk_customer_h__ref_customer_h_.dd700dfe2c": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_customer_n0_s_57c28e725de0c33670b4a90e168f8200\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('customer_h')", "field": "hk_customer_h", "column_name": "hk_customer_h", "model": "{{ get_where_subquery(ref('customer_n0_s')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.datavault4dbt_snowflake_demo.customer_h", "model.datavault4dbt_snowflake_demo.customer_n0_s"]}, "config": {"enabled": true, "alias": "relationships_customer_n0_s_57c28e725de0c33670b4a90e168f8200", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_dbt_test__audit", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "relationships_customer_n0_s_hk_customer_h__hk_customer_h__ref_customer_h_"], "unique_id": "test.datavault4dbt_snowflake_demo.relationships_customer_n0_s_hk_customer_h__hk_customer_h__ref_customer_h_.dd700dfe2c", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "relationships_customer_n0_s_57c28e725de0c33670b4a90e168f8200.sql", "original_file_path": "models/raw_vault/_schema.yml", "name": "relationships_customer_n0_s_hk_customer_h__hk_customer_h__ref_customer_h_", "alias": "relationships_customer_n0_s_57c28e725de0c33670b4a90e168f8200", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customer_h"], ["customer_n0_s"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/_schema.yml/relationships_customer_n0_s_57c28e725de0c33670b4a90e168f8200.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_customer_n0_s_57c28e725de0c33670b4a90e168f8200"}, "created_at": 1675265328.9162862, "compiled_sql": "\n    \n    \n\nwith child as (\n    select hk_customer_h as from_field\n    from dev_datavault4dbt.dbt_mgeerken_core.customer_n0_s\n    where hk_customer_h is not null\n),\n\nparent as (\n    select hk_customer_h as to_field\n    from dev_datavault4dbt.dbt_mgeerken_core.customer_h\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hk_customer_h", "file_key_name": "models.customer_n0_s"}, "test.datavault4dbt_snowflake_demo.relationships_customer_p0_s_hk_customer_h__hk_customer_h__ref_customer_h_.c00927b7d0": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_customer_p0_s_aeb55f0309b53f35b71c9253e10225b9\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('customer_h')", "field": "hk_customer_h", "column_name": "hk_customer_h", "model": "{{ get_where_subquery(ref('customer_p0_s')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.datavault4dbt_snowflake_demo.customer_h", "model.datavault4dbt_snowflake_demo.customer_p0_s"]}, "config": {"enabled": true, "alias": "relationships_customer_p0_s_aeb55f0309b53f35b71c9253e10225b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dev_datavault4dbt", "schema": "dbt_mgeerken_dbt_test__audit", "fqn": ["datavault4dbt_snowflake_demo", "raw_vault", "relationships_customer_p0_s_hk_customer_h__hk_customer_h__ref_customer_h_"], "unique_id": "test.datavault4dbt_snowflake_demo.relationships_customer_p0_s_hk_customer_h__hk_customer_h__ref_customer_h_.c00927b7d0", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "relationships_customer_p0_s_aeb55f0309b53f35b71c9253e10225b9.sql", "original_file_path": "models/raw_vault/_schema.yml", "name": "relationships_customer_p0_s_hk_customer_h__hk_customer_h__ref_customer_h_", "alias": "relationships_customer_p0_s_aeb55f0309b53f35b71c9253e10225b9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customer_h"], ["customer_p0_s"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/datavault4dbt_snowflake_demo/models/raw_vault/_schema.yml/relationships_customer_p0_s_aeb55f0309b53f35b71c9253e10225b9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_customer_p0_s_aeb55f0309b53f35b71c9253e10225b9"}, "created_at": 1675265328.9296482, "compiled_sql": "\n    \n    \n\nwith child as (\n    select hk_customer_h as from_field\n    from dev_datavault4dbt.dbt_mgeerken_core.customer_p0_s\n    where hk_customer_h is not null\n),\n\nparent as (\n    select hk_customer_h as to_field\n    from dev_datavault4dbt.dbt_mgeerken_core.customer_h\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hk_customer_h", "file_key_name": "models.customer_p0_s"}}, "sources": {"source.datavault4dbt_snowflake_demo.tpc-h_sf1.customer": {"fqn": ["datavault4dbt_snowflake_demo", "stage", "tpc-h_sf1", "customer"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.datavault4dbt_snowflake_demo.tpc-h_sf1.customer", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "models/stage/sources.yml", "original_file_path": "models/stage/sources.yml", "name": "customer", "source_name": "tpc-h_sf1", "source_description": "", "loader": "", "identifier": "customer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake_sample_data.tpch_sf1.customer", "created_at": 1675265328.9352512}, "source.datavault4dbt_snowflake_demo.tpc-h_sf1.lineitem": {"fqn": ["datavault4dbt_snowflake_demo", "stage", "tpc-h_sf1", "lineitem"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.datavault4dbt_snowflake_demo.tpc-h_sf1.lineitem", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "models/stage/sources.yml", "original_file_path": "models/stage/sources.yml", "name": "lineitem", "source_name": "tpc-h_sf1", "source_description": "", "loader": "", "identifier": "lineitem", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake_sample_data.tpch_sf1.lineitem", "created_at": 1675265328.9354198}, "source.datavault4dbt_snowflake_demo.tpc-h_sf1.nation": {"fqn": ["datavault4dbt_snowflake_demo", "stage", "tpc-h_sf1", "nation"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.datavault4dbt_snowflake_demo.tpc-h_sf1.nation", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "models/stage/sources.yml", "original_file_path": "models/stage/sources.yml", "name": "nation", "source_name": "tpc-h_sf1", "source_description": "", "loader": "", "identifier": "nation", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake_sample_data.tpch_sf1.nation", "created_at": 1675265328.9355423}, "source.datavault4dbt_snowflake_demo.tpc-h_sf1.orders": {"fqn": ["datavault4dbt_snowflake_demo", "stage", "tpc-h_sf1", "orders"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.datavault4dbt_snowflake_demo.tpc-h_sf1.orders", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "models/stage/sources.yml", "original_file_path": "models/stage/sources.yml", "name": "orders", "source_name": "tpc-h_sf1", "source_description": "", "loader": "", "identifier": "orders", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake_sample_data.tpch_sf1.orders", "created_at": 1675265328.9356592}, "source.datavault4dbt_snowflake_demo.tpc-h_sf1.part": {"fqn": ["datavault4dbt_snowflake_demo", "stage", "tpc-h_sf1", "part"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.datavault4dbt_snowflake_demo.tpc-h_sf1.part", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "models/stage/sources.yml", "original_file_path": "models/stage/sources.yml", "name": "part", "source_name": "tpc-h_sf1", "source_description": "", "loader": "", "identifier": "part", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake_sample_data.tpch_sf1.part", "created_at": 1675265328.9357703}, "source.datavault4dbt_snowflake_demo.tpc-h_sf1.partsupp": {"fqn": ["datavault4dbt_snowflake_demo", "stage", "tpc-h_sf1", "partsupp"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.datavault4dbt_snowflake_demo.tpc-h_sf1.partsupp", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "models/stage/sources.yml", "original_file_path": "models/stage/sources.yml", "name": "partsupp", "source_name": "tpc-h_sf1", "source_description": "", "loader": "", "identifier": "partsupp", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake_sample_data.tpch_sf1.partsupp", "created_at": 1675265328.9358778}, "source.datavault4dbt_snowflake_demo.tpc-h_sf1.region": {"fqn": ["datavault4dbt_snowflake_demo", "stage", "tpc-h_sf1", "region"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.datavault4dbt_snowflake_demo.tpc-h_sf1.region", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "models/stage/sources.yml", "original_file_path": "models/stage/sources.yml", "name": "region", "source_name": "tpc-h_sf1", "source_description": "", "loader": "", "identifier": "region", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake_sample_data.tpch_sf1.region", "created_at": 1675265328.9359853}, "source.datavault4dbt_snowflake_demo.tpc-h_sf1.supplier": {"fqn": ["datavault4dbt_snowflake_demo", "stage", "tpc-h_sf1", "supplier"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.datavault4dbt_snowflake_demo.tpc-h_sf1.supplier", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "models/stage/sources.yml", "original_file_path": "models/stage/sources.yml", "name": "supplier", "source_name": "tpc-h_sf1", "source_description": "", "loader": "", "identifier": "supplier", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake_sample_data.tpch_sf1.supplier", "created_at": 1675265328.9360929}}, "macros": {"macro.datavault4dbt_snowflake_demo.random_ldts": {"unique_id": "macro.datavault4dbt_snowflake_demo.random_ldts", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "macros/random_ldts.sql", "original_file_path": "macros/random_ldts.sql", "name": "random_ldts", "macro_sql": "{%- macro random_ldts() -%}\nCASE uniform(1, 5, random()) \n    WHEN 1 THEN TO_TIMESTAMP('2022-10-01T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') \n    WHEN 2 THEN TO_TIMESTAMP('2022-10-02T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') \n    WHEN 3 THEN TO_TIMESTAMP('2022-10-03T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') \n    WHEN 4 THEN TO_TIMESTAMP('2022-10-04T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') \n    WHEN 5 THEN TO_TIMESTAMP('2022-10-05T07:00:00', 'YYYY-MM-DDTHH24:MI:SS') \nEND\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5408146}, "macro.datavault4dbt_snowflake_demo.snowflake__prepend_generated_by": {"unique_id": "macro.datavault4dbt_snowflake_demo.snowflake__prepend_generated_by", "package_name": "datavault4dbt_snowflake_demo", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102", "path": "macros/override/prepend_generated_by.sql", "original_file_path": "macros/override/prepend_generated_by.sql", "name": "snowflake__prepend_generated_by", "macro_sql": "{% macro snowflake__prepend_generated_by() %}{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5412354}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5430315}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5661967}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5678155}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5684743}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.570151}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5718627}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5731196}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.574268}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5750074}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5752046}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.57561}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5758562}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5762935}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5768852}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5773525}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5784755}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5789123}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5792851}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5803452}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5808156}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5819037}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5839784}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.584511}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5850666}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5855186}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5857728}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5902534}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.590931}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5939684}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.5951488}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% set  grant_config = config.get('grants') %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.600681}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.6017003}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.6041427}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.60479}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.605356}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.6090324}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.6103225}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.610885}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.611486}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.6121113}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.6125689}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.6148908}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.616181}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.6170013}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.6201723}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.6934078}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.6951082}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.6956306}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.698814}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.699094}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.699467}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.699725}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.700508}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7009375}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7011802}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7016761}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7022216}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7027333}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7031715}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7036784}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7053273}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7057986}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.70636}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.70688}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7096553}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.710802}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7111423}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.711651}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7127178}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.715654}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.716018}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7167554}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7171822}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.718083}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7186081}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7199576}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7206697}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7224345}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7281952}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7286227}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.729118}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7297835}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7303352}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7310624}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7316873}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7322023}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7326393}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7332757}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7337801}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.734424}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.734997}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7362235}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7367656}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.737101}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7375515}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.738722}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7391703}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7395442}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7399693}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7414525}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.741845}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7423074}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.742692}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7433302}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.744611}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.747309}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7479203}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7485979}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.749093}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7495015}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7500482}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7505074}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7511988}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7516348}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7520082}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7531784}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7534995}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7538607}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.754885}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7559311}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7565536}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.757755}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7583582}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.759029}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7601087}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7606735}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.763204}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7639077}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7643907}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7647638}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7650917}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.766031}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7667348}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7674491}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7744215}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7822518}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7842908}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7848701}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7860548}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.786501}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.786833}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7871678}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7874384}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7878048}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.788078}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7892008}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7897859}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7928994}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7974124}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.798523}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.7992191}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8001466}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8011272}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8019333}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8024335}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8058612}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8068414}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.807225}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8076482}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8082442}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8138444}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8157115}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8171372}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8187044}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8281977}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8360958}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8389668}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8417351}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.843562}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8452628}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.854731}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.858185}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8587523}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8604324}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8610408}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8624225}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.863674}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8640952}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8645804}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8655174}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8712456}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8780577}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8787656}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8794312}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8797803}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.880012}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8816123}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8819983}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8823867}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.885519}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.888541}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.8896897}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.890293}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9019287}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9083066}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.909001}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9093916}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9096622}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9100084}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9102802}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9107394}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9126804}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9131436}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9137237}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9147027}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.915715}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9166024}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.917277}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9186063}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9192615}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9194536}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.920396}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9207816}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.921495}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.921986}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.922729}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.923066}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.923718}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.924085}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.924932}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.925444}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9261193}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9264083}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9270926}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9273455}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9280102}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9282556}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.930057}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9304116}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9309404}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9314096}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.931783}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9321263}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9325237}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.933461}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9338748}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9343674}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9348283}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9351883}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9361274}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.936478}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9373393}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9379416}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.938287}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9394565}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9398565}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.940366}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9412875}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9416008}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9422822}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9425337}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9432445}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9436197}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9442472}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.944478}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9451597}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9454107}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9465864}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.946987}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9478467}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.948255}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9495697}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9504786}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.951752}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.952277}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.952942}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9535582}, "macro.datavault4dbt.clean_up_pit": {"unique_id": "macro.datavault4dbt.clean_up_pit", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/hooks/clean_up_pits.sql", "original_file_path": "macros/hooks/clean_up_pits.sql", "name": "clean_up_pit", "macro_sql": "\n\n\n{%- macro clean_up_pit(snapshot_relation, snapshot_trigger_column=none, sdts=none) -%}\n\n{%- if not datavault4dbt.is_something(sdts) -%}\n    {%- set sdts = var('datavault4dbt.sdts_alias', 'sdts') -%}\n{%- endif -%}\n{%- if not datavault4dbt.is_something(snapshot_trigger_column) -%}\n    {%- set snapshot_trigger_column = var('datavault4dbt.snapshot_trigger_column', 'is_active') -%}\n{%- endif -%}\n\n{{ return(adapter.dispatch('clean_up_pit', 'datavault4dbt')(snapshot_relation=snapshot_relation, snapshot_trigger_column=snapshot_trigger_column, sdts=sdts)) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_something", "macro.datavault4dbt.snowflake__clean_up_pit"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9569652}, "macro.datavault4dbt.default__clean_up_pit": {"unique_id": "macro.datavault4dbt.default__clean_up_pit", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/hooks/clean_up_pits.sql", "original_file_path": "macros/hooks/clean_up_pits.sql", "name": "default__clean_up_pit", "macro_sql": "{%- macro default__clean_up_pit(snapshot_relation, snapshot_trigger_column, sdts) -%}\n\nDELETE {{ this }} pit\nWHERE pit.{{ sdts }} not in (SELECT {{ sdts }} FROM {{ ref(snapshot_relation) }} snap WHERE {{ snapshot_trigger_column }}=TRUE)\n\n{%- if execute -%}\n{{ log(\"PIT \" ~ this ~ \" successfully cleaned!\", True) }}\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9577494}, "macro.datavault4dbt.snowflake__clean_up_pit": {"unique_id": "macro.datavault4dbt.snowflake__clean_up_pit", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/hooks/clean_up_pits.sql", "original_file_path": "macros/hooks/clean_up_pits.sql", "name": "snowflake__clean_up_pit", "macro_sql": "{%- macro snowflake__clean_up_pit(snapshot_relation, snapshot_trigger_column, sdts) -%}\n\nDELETE FROM {{ this }} pit\nWHERE pit.{{ sdts }} NOT IN (SELECT {{ sdts }} FROM {{ ref(snapshot_relation) }} snap WHERE {{ snapshot_trigger_column }}=TRUE)\n\n{%- if execute -%}\n{{ log(\"PIT \" ~ this ~ \" successfully cleaned!\", True) }}\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9585035}, "macro.datavault4dbt.exasol__clean_up_pit": {"unique_id": "macro.datavault4dbt.exasol__clean_up_pit", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/hooks/clean_up_pits.sql", "original_file_path": "macros/hooks/clean_up_pits.sql", "name": "exasol__clean_up_pit", "macro_sql": "{%- macro exasol__clean_up_pit(snapshot_relation, snapshot_trigger_column, sdts) -%}\n\nDELETE FROM {{ this }} pit\nWHERE pit.{{ sdts }} NOT IN (SELECT {{ sdts }} FROM {{ ref(snapshot_relation) }} snap WHERE {{ snapshot_trigger_column }}=TRUE)\n\n{%- if execute -%}\n{{ log(\"PIT \" ~ this ~ \" successfully cleaned!\", True) }}\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9594204}, "macro.datavault4dbt.derived_columns_datatypes": {"unique_id": "macro.datavault4dbt.derived_columns_datatypes", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/staging/derived_column_datatypes.sql", "original_file_path": "macros/staging/derived_column_datatypes.sql", "name": "derived_columns_datatypes", "macro_sql": "{%- macro derived_columns_datatypes(columns, source_relation) -%}\n\n    {{- adapter.dispatch('derived_columns_datatypes', 'datavault4dbt')(columns=columns, source_relation=source_relation) -}}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__derived_columns_datatypes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9618285}, "macro.datavault4dbt.default__derived_columns_datatypes": {"unique_id": "macro.datavault4dbt.default__derived_columns_datatypes", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/staging/derived_column_datatypes.sql", "original_file_path": "macros/staging/derived_column_datatypes.sql", "name": "default__derived_columns_datatypes", "macro_sql": "{%- macro default__derived_columns_datatypes(columns, source_relation) -%}\n\n{%- set all_source_columns = adapter.get_columns_in_relation(source_relation) -%}\n\n{%- if columns is not mapping and columns is string -%}\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Derived Columns is of datatype string. Needs to be mapping\" ) }}\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- for column_name, column_value in columns.items() -%}\n\n        {%- if not (column_value is mapping) and column_value is string -%}\n        {# This is the case where no datatype is defined and one must be detected based on the input value. #}\n\n            {%- if not datavault4dbt.is_attribute(column_value) -%}\n            {# If the value is a static value, it is not an attribute and no datatype needs to be detected. Instead a default datatype is applied. #}\n\n                {%- set datatype = var('datavault4dbt.derived_columns_default_dtype', 'STRING') -%}\n                {%- set value = column_value -%}\n\n            {%- else -%}\n            {# The value is an attribute and therefore the datatype gets detected out of the source relation. #}\n\n                {%- set value = column_value -%}\n\n                {%- set ns = namespace(datatype = \"\") -%}\n\n                {%- for source_column in all_source_columns -%}\n\n                    {%- if source_column.name|upper == value|upper -%}\n\n                       {%- set ns.datatype = source_column.dtype -%}\n\n                    {%- endif -%}\n\n                {%- endfor -%}\n\n                {%- if ns.datatype != \"\" -%}\n\n                    {%- set datatype = ns.datatype -%}\n\n                {%- else -%}\n                {# The input column name could not be found inside the source relation. #}\n\n                    {%- if execute -%}\n                        {{ exceptions.raise_compiler_error(\"Could not find the derived_column input column \" + value + \" inside the source relation \" + source_relation|string ) }}\n                    {%- else -%}\n                        {%- set datatype = \"\" -%}\n                    {%- endif -%}\n\n                {%- endif -%}\n\n            {%- endif -%}\n\n            {%- do columns.update({column_name: {'datatype': datatype, 'value': value} }) -%}\n        \n        {%- elif column_value is mapping and not column_value.get('datatype') -%}\n\n                {%- set value = column_value['value'] -%}\n\n                {%- set ns = namespace(datatype = \"\") -%}\n\n                {%- for source_column in all_source_columns -%}\n\n                    {%- if source_column.name|upper == value|upper -%}\n\n                       {%- set ns.datatype = source_column.dtype -%}\n\n                    {%- endif -%}\n\n                {%- endfor -%}\n\n                {%- if ns.datatype != \"\" -%}\n\n                    {%- set datatype = ns.datatype -%}\n\n                {%- else -%}\n                {# The input column name could not be found inside the source relation. #}\n\n                    {%- if execute -%}\n                        {{ exceptions.raise_compiler_error(\"Could not find the derived_column input column \" + value + \" inside the source relation \" + source_relation|string + \". Try setting it manually with the key 'datatype'.\" ) }}\n                    {%- else -%}\n                        {%- set datatype = \"\" -%}\n                    {%- endif -%}\n\n                {%- endif -%}\n\n                {%- do columns.update({column_name: {'datatype': datatype, 'value': value} }) -%}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endif -%}\n\n{{ return(columns | tojson) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_attribute"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9671068}, "macro.datavault4dbt.hash_columns": {"unique_id": "macro.datavault4dbt.hash_columns", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "name": "hash_columns", "macro_sql": "{%- macro hash_columns(columns=none, multi_active_key=none, main_hashkey_column=none) -%}\n\n    {{- adapter.dispatch('hash_columns', 'datavault4dbt')(columns=columns,\n                                                          multi_active_key=multi_active_key,\n                                                          main_hashkey_column=main_hashkey_column) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__hash_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9701295}, "macro.datavault4dbt.default__hash_columns": {"unique_id": "macro.datavault4dbt.default__hash_columns", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "name": "default__hash_columns", "macro_sql": "\n\n{%- macro default__hash_columns(columns, multi_active_key, main_hashkey_column) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {%- for col in columns -%}\n\n        {%- if datavault4dbt.is_something(multi_active_key) -%}\n            {% if columns[col] is mapping and columns[col].is_hashdiff -%}\n                {{- datavault4dbt.hash(columns=columns[col]['columns'], \n                                alias=col, \n                                is_hashdiff=columns[col]['is_hashdiff'],\n                                multi_active_key=multi_active_key,\n                                main_hashkey_column=main_hashkey_column) -}}\n\n            {%- elif columns[col] is not mapping and (col|upper) == (main_hashkey_column | upper) -%}\n                {{- datavault4dbt.hash(columns=columns[col],\n                                alias=col,\n                                is_hashdiff=false) -}}  \n\n            {%- endif -%}\n\n            {{- \", \\n\" if not loop.last -}}\n\n        {%- else -%}          \n            \n            {% if columns[col] is mapping and columns[col].is_hashdiff -%}\n\n                {{- datavault4dbt.hash(columns=columns[col]['columns'], \n                                alias=col, \n                                is_hashdiff=columns[col]['is_hashdiff']) -}}\n\n            {%- elif columns[col] is not mapping -%}\n\n                {{- datavault4dbt.hash(columns=columns[col],\n                                alias=col,\n                                is_hashdiff=false) -}}\n            \n            {%- elif columns[col] is mapping and not columns[col].is_hashdiff -%}\n\n                {%- if execute -%}\n                    {%- do exceptions.warn(\"[\" ~ this ~ \"] Warning: You provided a list of columns under a 'columns' key, but did not provide the 'is_hashdiff' flag. Use list syntax for PKs.\") -%}\n                {% endif %}\n\n                {{- datavault4dbt.hash(columns=columns[col]['columns'], alias=col) -}}\n\n            {%- endif -%}\n\n        {{- \",\\n\" if not loop.last -}}\n\n        {%- endif -%}\n        \n    {%- endfor -%}\n\n{%- endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_something", "macro.datavault4dbt.hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9739072}, "macro.datavault4dbt.stage": {"unique_id": "macro.datavault4dbt.stage", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/staging/stage.sql", "original_file_path": "macros/staging/stage.sql", "name": "stage", "macro_sql": "\n\n\n\n  {%- macro stage(ldts, rsrc, source_model, include_source_columns=true, hashed_columns=none, derived_columns=none, sequence=none, prejoined_columns=none, missing_columns=none, multi_active_config=none) -%}\n    \n    {{- adapter.dispatch('stage', 'datavault4dbt')(include_source_columns=include_source_columns,\n                                        ldts=ldts,\n                                        rsrc=rsrc,\n                                        source_model=source_model,\n                                        hashed_columns=hashed_columns,\n                                        derived_columns=derived_columns,\n                                        sequence=sequence,\n                                        prejoined_columns=prejoined_columns,\n                                        missing_columns=missing_columns,\n                                        multi_active_config=multi_active_config) -}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.snowflake__stage"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9775712}, "macro.datavault4dbt.derive_columns": {"unique_id": "macro.datavault4dbt.derive_columns", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/staging/derive_columns.sql", "original_file_path": "macros/staging/derive_columns.sql", "name": "derive_columns", "macro_sql": "{%- macro derive_columns(source_relation=none, columns=none) -%}\n\n    {{- adapter.dispatch('derive_columns', 'datavault4dbt')(source_relation=source_relation, columns=columns) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__derive_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9793894}, "macro.datavault4dbt.default__derive_columns": {"unique_id": "macro.datavault4dbt.default__derive_columns", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/staging/derive_columns.sql", "original_file_path": "macros/staging/derive_columns.sql", "name": "default__derive_columns", "macro_sql": "\n\n{%- macro default__derive_columns(source_relation=none, columns=none) -%}\n\n{%- set exclude_columns = [] -%}\n{%- set include_columns = [] -%}\n{%- set src_columns = [] -%}\n{%- set der_columns = [] -%}\n\n{%- set source_cols = datavault4dbt.source_columns(source_relation=source_relation) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {#- Add aliases of derived columns to exclude and full SQL to include -#}\n    {%- for col in columns -%}\n\n        {%- if datavault4dbt.is_list(columns[col]['value']) -%}\n            {%- set column_list = [] -%}\n\n            {%- for concat_component in columns[col]['value'] -%}\n                {%- set column_str = datavault4dbt.as_constant(concat_component) -%}\n                {%- do column_list.append(column_str) -%}\n            {%- endfor -%}\n            {%- set concat = datavault4dbt.concat_ws(column_list, \"||\") -%}\n            {%- set concat_string = concat ~ \" AS \" ~ datavault4dbt.escape_column_names(col) -%}\n\n            {%- do der_columns.append(concat_string) -%}\n            {%- set exclude_columns = exclude_columns + columns[col]['value'] -%}\n        {% else %}\n            {%- set column_str = datavault4dbt.as_constant(columns[col]['value']) -%}\n            {%- do der_columns.append(column_str ~ \" AS \" ~ datavault4dbt.escape_column_names(col)) -%}\n            {%- do exclude_columns.append(col) -%}\n        {% endif %}\n\n    {%- endfor -%}\n\n    {#- Add all columns from source_model relation -#}\n    {%- if source_relation is defined and source_relation is not none -%}\n\n        {%- for col in source_cols -%}\n            {%- if col not in exclude_columns -%}\n                {%- do src_columns.append(datavault4dbt.escape_column_names(col)) -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n    {%- endif -%}\n\n    {#- Makes sure the columns are appended in a logical order. Source columns then derived columns -#}\n    {%- set include_columns = src_columns + der_columns -%}\n\n        {#- Print out all columns in includes -#}\n        {%- for col in include_columns -%}\n            {{- col | indent(4) -}}{{ \",\\n\" if not loop.last }}\n        {%- endfor -%}\n    {%- else -%}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid column configuration:\n            expected format: {'source_relation': Relation, 'columns': {column_name: column_value}}\n            got: {'source_relation': \" ~ source_relation ~ \", 'columns': \" ~ columns ~ \"}\") }}\n        {%- endif %}\n    {%- endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.source_columns", "macro.datavault4dbt.is_list", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.concat_ws", "macro.datavault4dbt.escape_column_names"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9837828}, "macro.datavault4dbt.source_columns": {"unique_id": "macro.datavault4dbt.source_columns", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/staging/source_columns.sql", "original_file_path": "macros/staging/source_columns.sql", "name": "source_columns", "macro_sql": "{%- macro source_columns(source_relation=none) -%}\n\n    {%- if source_relation -%}\n        {%- set source_model_cols = adapter.get_columns_in_relation(source_relation) -%}\n\n        {%- set column_list = [] -%}\n\n        {%- for source_col in source_model_cols -%}\n            {%- do column_list.append(source_col.column) -%}\n        {%- endfor -%}\n\n        {%- do return(column_list) -%}\n    {%- endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265325.9850512}, "macro.datavault4dbt.default__stage": {"unique_id": "macro.datavault4dbt.default__stage", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/staging/bigquery/stage.sql", "original_file_path": "macros/staging/bigquery/stage.sql", "name": "default__stage", "macro_sql": "\n\n{%- macro default__stage(include_source_columns,\n                ldts,\n                rsrc,\n                source_model,\n                hashed_columns,\n                derived_columns,\n                sequence,\n                prejoined_columns,\n                missing_columns,\n                multi_active_config) -%}\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g.\n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n        source_name: source_table_name\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\n{#- Check for source format or ref format and create relation object from source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {%- set source_relation = ref(source_model) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- else -%}\n    {%- set all_source_columns = [] -%}\n{%- endif -%}\n\n\n{# Setting the column name for load date timestamp and record source to the alias coming from the attributes #}\n{%- set ldts_alias = var('datavault4dbt.ldts_alias', 'ldts') -%}\n{%- set rsrc_alias = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n{%- set copy_input_columns = var('datavault4dbt.copy_rsrc_ldts_input_columns', false) -%}\n{%- set load_datetime_col_name = ldts_alias -%}\n{%- set record_source_col_name = rsrc_alias -%}\n\n{%- set ldts_rsrc_input_column_names = [] -%}\n{%- if datavault4dbt.is_attribute(ldts) -%}\n  {%- if not copy_input_columns -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n  {%- else -%}\n    \n    {%- if ldts|lower == ldts_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n    {%- endif -%}\n\n  {%- endif %}\n\n{%- endif -%}\n\n{%- if datavault4dbt.is_attribute(rsrc) -%}\n\n  {%- if not copy_input_columns -%}\n    {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n  {%- else -%}\n  \n    {%- if rsrc|lower == rsrc_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n    {%- endif -%}\n\n  {%- endif -%}\n\n{%- endif %}\n\n{%- if sequence is not none -%}\n  {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [sequence] -%}\n{%- endif -%}\n\n{%- set ldts = datavault4dbt.as_constant(ldts) -%}\n{%- set rsrc = datavault4dbt.as_constant(rsrc) -%}\n\n{# Getting the column names for all additional columns #}\n{%- set derived_column_names = datavault4dbt.extract_column_names(derived_columns) -%}\n{%- set hashed_column_names = datavault4dbt.extract_column_names(hashed_columns) -%}\n{%- set prejoined_column_names = datavault4dbt.extract_column_names(prejoined_columns) -%}\n{%- set missing_column_names = datavault4dbt.extract_column_names(missing_columns) -%}\n{%- set exclude_column_names = derived_column_names + hashed_column_names + prejoined_column_names + missing_column_names + ldts_rsrc_input_column_names %}\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\n{%- set all_columns = adapter.get_columns_in_relation( source_relation ) -%}\n\n{%- set columns_without_excluded_columns = [] -%}\n{%- set final_columns_to_select = [] -%}\n\n\n{%- if include_source_columns -%}\n  {%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_source_columns, exclude_column_names) | list -%}\n\n  {%- for column in all_columns -%}\n\n    {%- if column.name|lower not in exclude_column_names|map('lower') %}\n      {%- do columns_without_excluded_columns.append(column) -%}\n    {%- endif -%}\n\n  {%- endfor -%}\n{%- else -%}\n  \n  {# Include from the source only the input columns needed #}\n  {# Getting the input columns for the additional columns #}\n  {%- set derived_input_columns = datavault4dbt.extract_input_columns(derived_columns) -%}\n  {%- set hashed_input_columns = datavault4dbt.expand_column_list(datavault4dbt.extract_input_columns(hashed_columns)) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, derived_column_names) -%}    {# Excluding the names of the derived columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, prejoined_column_names) -%}  {# Excluding the names of the prejoined columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, missing_column_names) -%}  {# Excluding the names of the missing columns. #}\n  {%- set prejoined_input_columns = datavault4dbt.extract_input_columns(prejoined_columns) -%}\n  {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns) | unique | list -%}\n  {%- set source_columns_to_select = only_include_from_source -%}\n\n{%- endif-%}\n\n{%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\n{%- set derived_columns_to_select = datavault4dbt.process_columns_to_select(source_and_derived_column_names, hashed_column_names) | unique | list -%}\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n  {#- Getting Data types for derived columns with detection from source relation -#}\n  {%- set derived_columns_with_datatypes = datavault4dbt.derived_columns_datatypes(derived_columns, source_relation) -%}\n  {%- set derived_columns_with_datatypes_DICT = fromjson(derived_columns_with_datatypes) -%}\n{%- endif -%}\n{#- Select hashing algorithm -#}\n\n{#- Setting unknown and error keys with default values for the selected hash algorithm -#}\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{# Select timestamp and format variables #}\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the error/unknown value for the record source  for the ghost records#}\n{% set error_value_rsrc = var('datavault4dbt.default_error_rsrc', 'ERROR') %}\n{% set unknown_value_rsrc = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') %}\n\n{# Setting the rsrc default datatype and length #}\n{% set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') %}\n\nWITH\n\n{# Selecting everything that we need from the source relation. #}\nsource_data AS (\n    SELECT\n\n    {{- \"\\n\\n    \" ~ datavault4dbt.print_list(datavault4dbt.escape_column_names(all_source_columns)) if all_source_columns else \" *\" }}\n\n  FROM {{ source_relation }}\n\n  {% set last_cte = \"source_data\" -%}\n),\n\n\n{% set alias_columns = [load_datetime_col_name, record_source_col_name] %}\n\n{# Selecting all columns from the source data, renaming load date and record source to global aliases #}\nldts_rsrc_data AS (\n\n  SELECT\n    {{ ldts }} AS {{ load_datetime_col_name}},\n    CAST( {{ rsrc }} as {{ rsrc_default_dtype }} ) AS {{ record_source_col_name }}\n    {%- if sequence is not none %},\n      {{ sequence }} AS edwSequence\n      {%- set alias_columns = alias_columns + ['edwSequence'] -%}\n    {% endif -%}\n\n    {%- if source_columns_to_select is not none and source_columns_to_select | length > 0 %},\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(source_columns_to_select)) }}\n    {% endif -%}\n    {{\"\\n\"}}\n  FROM {{ last_cte }}\n\n  {%- set last_cte = \"ldts_rsrc_data\" -%}\n  {%- set final_columns_to_select = alias_columns + final_columns_to_select  %}\n),\n\n{%- if datavault4dbt.is_something(missing_columns) %}\n\n{# Filling missing columns with NULL values for schema changes #}\nmissing_columns AS (\n\n  SELECT\n\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {%- endif %}\n  {%- for col, dtype in missing_columns.items() %}\n    CAST(NULL as {{ dtype }}) as {{ col }}{% if not loop.last %},{% endif -%}\n\n  {% endfor %}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"missing_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + missing_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(prejoined_columns) %}\n{# Prejoining Business Keys of other source objects for Link purposes #}\nprejoined_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.prefix(columns=datavault4dbt.escape_column_names(final_columns_to_select), prefix_str='lcte').split(',')) }}\n  {% endif %}\n  {%- for col, vals in prejoined_columns.items() -%}\n    ,pj_{{loop.index}}.{{ vals['bk'] }} AS {{ col }}\n  {% endfor -%}\n\n  FROM {{ last_cte }} lcte\n\n  {%- for col, vals in prejoined_columns.items() %}\n    left join {{ source(vals['src_name']|string, vals['src_table']) }} as pj_{{loop.index}} on lcte.{{ vals['this_column_name'] }} = pj_{{loop.index}}.{{ vals['ref_column_name'] }}\n  {% endfor %}\n\n  {% set last_cte = \"prejoined_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + prejoined_column_names %}\n),\n{%- endif -%}\n\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n{# Adding derived columns to the selection #}\nderived_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {% endif %}\n  {{ datavault4dbt.derive_columns(columns=derived_columns) | indent(4) }}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"derived_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(hashed_columns) and hashed_columns is mapping %}\n{# Generating Hashed Columns (hashkeys and hashdiffs for Hubs/Links/Satellites) #}\n{% if datavault4dbt.is_something(multi_active_config) %}\n\n{%- set tmp_ns = namespace(main_hashkey_dict={}, remaining_hashed_columns={}, hashdiff_names=[]) -%}\n\n{%- for column in hashed_columns.keys() -%}\n  {%- if column == multi_active_config['main_hashkey_column'] and not hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.main_hashkey_dict.update({column: hashed_columns[column]}) -%}\n  {% elif column != multi_active_config['main_hashkey_column'] and not hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.remaining_hashed_columns.update({column: hashed_columns[column]}) -%}\n  {%- elif hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.hashdiff_names.append(column) -%}\n  {%- endif -%}\n{%- endfor -%}\n\nmain_hashkey_generation AS (\n\n  SELECT \n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.main_hashkey_dict) -%}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n  FROM {{ last_cte }}\n\n),\n\n{# Hash calculation for multi-active source data. #}\nma_hashdiff_prep AS (\n\n    SELECT\n      \n      {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n      \n      {# Generates only all hashdiffs. #}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns, multi_active_key=multi_active_config['multi_active_key'], main_hashkey_column=multi_active_config['main_hashkey_column']) | indent(4) }},\n      {{ ldts_alias }}\n\n    FROM {{ last_cte }}\n    GROUP BY {{ multi_active_config['main_hashkey_column'] }}, {{ ldts_alias }}\n\n),\n\nhashed_columns AS (\n\n    SELECT \n\n      {{ datavault4dbt.alias_all(columns=final_columns_to_select, prefix='main_hashkey_generation') }},                             {# Everything from last_cte before hashed_columns. #}\n      {% set processed_remaining_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.remaining_hashed_columns) -%}   \n      {# Generates only all remaining hashkeys, that are no hashdiffs #}\n      \n      {%- if datavault4dbt.is_something(processed_remaining_hash_columns) %}\n      {{- datavault4dbt.hash_columns(columns=processed_remaining_hash_columns) | indent(4) }},                                {# All remaining hashed_columns get calculated. #}\n      {% endif -%}\n\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(tmp_ns.hashdiff_names)) }},                                   {# All MA Hashdiffs are selected. #}\n      main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }}                                                                       {# Main Hashkey selected. #}\n\n    FROM main_hashkey_generation\n    LEFT JOIN ma_hashdiff_prep \n      ON main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }} = ma_hashdiff_prep.{{ multi_active_config['main_hashkey_column'] }} \n      AND main_hashkey_generation.{{ ldts_alias }} = ma_hashdiff_prep.{{ ldts_alias }}\n\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n\n),\n\n{% else %}\n\n{# Hash calculation for single-active source data. #}\nhashed_columns AS (\n\n    SELECT\n\n    {% if final_columns_to_select | length > 0 -%}\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% endif %}\n\n    {%- set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n    {{ datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n  \n),\n\n{%- endif -%}\n{%- endif -%}\n\n{# Creating Ghost Record for unknown case, based on datatype #}\nunknown_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ unknown_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for all source columns, except the ldts, rsrc & edwSequence column #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes#}\n      {% for col, vals in prejoined_columns.items() %}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( source(vals['src_name']|string, vals['src_table']) ) -%}\n\n          {% for column in pj_relation_columns -%}\n\n            {% if column.name|lower == vals['bk']|lower -%}\n              {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=column.dtype, ghost_record_type='unknown') }}\n            {%- endif -%}\n\n          {%- endfor -%}\n          {%- if not loop.last %},{% endif %}\n        {% endfor -%}\n    {%- endif %}\n\n    {%- if datavault4dbt.is_something(derived_columns) -%},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST('{{ unknown_key }}' as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{-\"\\n\"-}}\n),\n\n{# Creating Ghost Record for error case, based on datatype #}\nerror_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ error_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for Source Columns #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for Missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes #}\n      {%- for col, vals in prejoined_columns.items() %}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( source(vals['src_name']|string, vals['src_table']) ) -%}\n\n        {% for column in pj_relation_columns -%}\n          {% if column.name|lower == vals['bk']|lower -%}\n            {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=column.dtype, ghost_record_type='error') -}}\n          {%- endif -%}\n        {%- endfor -%}\n          {%- if not loop.last -%},{%- endif %}\n      {% endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(derived_columns) %},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST('{{ error_key }}' as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{- \"\\n\" -}}\n),\n\n{# Combining all previous ghost record calculations to two rows with the same width as regular entries #}\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\n\n{%- if not include_source_columns -%}\n  {% set final_columns_to_select = datavault4dbt.process_columns_to_select(columns_list=final_columns_to_select, exclude_columns_list=source_columns_to_select) %}\n{%- endif -%}\n\n{# Combining the two ghost records with the regular data #}\ncolumns_to_select AS (\n\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM {{ last_cte }}\n\n    UNION ALL\n    \n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM ghost_records\n)\n\nSELECT * FROM columns_to_select\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.source_columns", "macro.datavault4dbt.is_attribute", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.extract_column_names", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.extract_input_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_something", "macro.datavault4dbt.derived_columns_datatypes", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.print_list", "macro.datavault4dbt.escape_column_names", "macro.datavault4dbt.prefix", "macro.datavault4dbt.derive_columns", "macro.datavault4dbt.process_hash_column_excludes", "macro.datavault4dbt.hash_columns", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.ghost_record_per_datatype"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.0249107}, "macro.datavault4dbt.exasol__stage": {"unique_id": "macro.datavault4dbt.exasol__stage", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/staging/exasol/stage.sql", "original_file_path": "macros/staging/exasol/stage.sql", "name": "exasol__stage", "macro_sql": "{%- macro exasol__stage(include_source_columns,\n                ldts,\n                rsrc,\n                source_model,\n                hashed_columns,\n                derived_columns,\n                sequence,\n                prejoined_columns,\n                missing_columns,\n                multi_active_config) -%}\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g.\n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n        source_name: source_table_name\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\n{#- Check for source format or ref format and create relation object from source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {%- set source_relation = ref(source_model) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- else -%}\n\n    {%- set all_source_columns = [] -%}\n{%- endif -%}\n\n\n{# Setting the column name for load date timestamp and record source to the alias coming from the attributes #}\n{%- set ldts_alias = var('datavault4dbt.ldts_alias', 'ldts') -%}\n{%- set rsrc_alias = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n{%- set copy_input_columns = var('datavault4dbt.copy_rsrc_ldts_input_columns', false) -%}\n{%- set load_datetime_col_name = ldts_alias -%}\n{%- set record_source_col_name = rsrc_alias -%}\n\n{%- set ldts_rsrc_input_column_names = [] -%}\n{%- if datavault4dbt.is_attribute(ldts) -%}\n\n  {%- if not copy_input_columns -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n  {%- else -%}\n    \n    {%- if ldts|lower == ldts_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n    {%- endif -%}\n\n  {%- endif %}\n\n{%- endif -%}\n\n{%- if datavault4dbt.is_attribute(rsrc) -%}\n\n  {%- if not copy_input_columns -%}\n    {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n  {%- else -%}\n  \n    {%- if rsrc|lower == rsrc_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n    {%- endif -%}\n\n  {%- endif -%}\n\n{%- endif %}\n\n{%- if sequence is not none -%}\n  {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [sequence] -%}\n{%- endif -%}\n\n{%- set ldts = datavault4dbt.as_constant(ldts) -%}\n{%- set rsrc = datavault4dbt.as_constant(rsrc) -%}\n\n{# Getting the column names for all additional columns #}\n{%- set derived_column_names = datavault4dbt.extract_column_names(derived_columns) -%}\n{%- set hashed_column_names = datavault4dbt.extract_column_names(hashed_columns) -%}\n{%- set prejoined_column_names = datavault4dbt.extract_column_names(prejoined_columns) -%}\n{%- set missing_column_names = datavault4dbt.extract_column_names(missing_columns) -%}\n{%- set exclude_column_names = derived_column_names + hashed_column_names + prejoined_column_names + missing_column_names + ldts_rsrc_input_column_names %}\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\n{%- set all_columns = adapter.get_columns_in_relation( source_relation ) -%}\n\n{%- set columns_without_excluded_columns = [] -%}\n{%- set final_columns_to_select = [] -%}\n\n\n{%- if include_source_columns -%}\n  {%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_source_columns, exclude_column_names) | list -%}\n\n  {%- for column in all_columns -%}\n\n    {%- if column.name|lower not in exclude_column_names|map('lower') %}\n      {%- do columns_without_excluded_columns.append(column) -%}\n    {%- endif -%}\n\n  {%- endfor -%}\n{%- else -%}\n  \n  {# Include from the source only the input columns needed #}\n  {# Getting the input columns for the additional columns #}\n  {%- set derived_input_columns = datavault4dbt.extract_input_columns(derived_columns) -%}\n  {%- set hashed_input_columns = datavault4dbt.expand_column_list(datavault4dbt.extract_input_columns(hashed_columns)) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, derived_column_names) -%}    {# Excluding the names of the derived columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, prejoined_column_names) -%}  {# Excluding the names of the prejoined columns. #}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, missing_column_names) -%}  {# Excluding the names of the missing columns. #}\n  {%- set prejoined_input_columns = datavault4dbt.extract_input_columns(prejoined_columns) -%}\n\n  {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns) | unique | list -%}\n  {%- if datavault4dbt.is_something(multi_active_config) -%}\n    {%- set only_include_from_source = only_include_from_source + datavault4dbt.expand_column_list([multi_active_config['multi_active_key']]) -%}\n  {%- endif -%}\n  {%- set source_columns_to_select = only_include_from_source -%}\n{%- endif-%}\n\n{%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\n{%- set derived_columns_to_select = datavault4dbt.process_columns_to_select(source_and_derived_column_names, hashed_column_names) | unique | list -%}\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n  {#- Getting Data types for derived columns with detection from source relation -#}\n  {%- set derived_columns_with_datatypes = datavault4dbt.derived_columns_datatypes(derived_columns, source_relation) -%}\n  {%- set derived_columns_with_datatypes_DICT = fromjson(derived_columns_with_datatypes) -%}\n{%- endif -%}\n{#- Select hashing algorithm -#}\n\n{#- Setting unknown and error keys with default values for the selected hash algorithm -#}\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'HASHTYPE') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{# Select timestamp and format variables #}\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the error/unknown value for the record source  for the ghost records#}\n{% set error_value_rsrc = var('datavault4dbt.default_error_rsrc', 'ERROR') %}\n{% set unknown_value_rsrc = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') %}\n\n{# Setting the rsrc default datatype and length #}\n{% set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'VARCHAR (2000000) UTF8') %}\n\nWITH\n\n{# Selecting everything that we need from the source relation. #}\nsource_data AS (\n    SELECT\n\n    {{- \"\\n\\n    \" ~ datavault4dbt.print_list(datavault4dbt.escape_column_names(all_source_columns)) if all_source_columns else \" *\" }}\n\n  FROM {{ source_relation }}\n\n  {% set last_cte = \"source_data\" -%}\n),\n\n\n{% set alias_columns = [load_datetime_col_name, record_source_col_name] %}\n\n{# Selecting all columns from the source data, renaming load date and record source to global aliases #}\nldts_rsrc_data AS (\n\n  SELECT\n    {{ ldts }} AS {{ load_datetime_col_name}},\n    CAST( {{ rsrc }} as {{ rsrc_default_dtype }} ) AS {{ record_source_col_name }}\n    {%- if sequence is not none %},\n      {{ sequence }} AS edwSequence\n      {%- set alias_columns = alias_columns + ['edwSequence'] -%}\n    {% endif -%}\n\n    {%- if source_columns_to_select is not none and source_columns_to_select | length > 0 %},\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(source_columns_to_select)) }}\n    {% endif -%}\n    {{\"\\n\"}}\n  FROM {{ last_cte }}\n\n  {%- set last_cte = \"ldts_rsrc_data\" -%}\n  {%- set final_columns_to_select = alias_columns + final_columns_to_select  %}\n),\n\n{%- if datavault4dbt.is_something(missing_columns) %}\n\n{# Filling missing columns with NULL values for schema changes #}\nmissing_columns AS (\n\n  SELECT\n\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {%- endif %}\n  {%- for col, dtype in missing_columns.items() %}\n    CAST(NULL as {{ dtype }}) as \"{{ col | upper }}\"{% if not loop.last %},{% endif -%}\n\n  {% endfor %}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"missing_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + missing_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(prejoined_columns) %}\n{# Prejoining Business Keys of other source objects for Link purposes #}\nprejoined_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.prefix(columns=datavault4dbt.escape_column_names(final_columns_to_select), prefix_str='lcte').split(',')) }}\n  {% endif %}\n  {%- for col, vals in prejoined_columns.items() -%}\n    ,pj_{{loop.index}}.{{ vals['bk'] }} AS \"{{ col }}\"\n  {% endfor -%}\n\n  FROM {{ last_cte }} lcte\n\n  {%- for col, vals in prejoined_columns.items() %}\n    left join {{ source(vals['src_name']|string, vals['src_table']) }} as pj_{{loop.index}} on lcte.{{ vals['this_column_name'] }} = pj_{{loop.index}}.{{ vals['ref_column_name'] }}\n  {% endfor %}\n\n  {% set last_cte = \"prejoined_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + prejoined_column_names %}\n),\n{%- endif -%}\n\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n{# Adding derived columns to the selection #}\nderived_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {% endif %}\n  {{ datavault4dbt.derive_columns(columns=derived_columns) | indent(4) }}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"derived_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(hashed_columns) and hashed_columns is mapping %}\n{# Generating Hashed Columns (hashkeys and hashdiffs for Hubs/Links/Satellites) #}\n{% if datavault4dbt.is_something(multi_active_config) %}\n\n{%- set tmp_ns = namespace(main_hashkey_dict={}, remaining_hashed_columns={}, hashdiff_names=[]) -%}\n\n{%- for column in hashed_columns.keys() -%}\n  {%- if column | lower == multi_active_config['main_hashkey_column']| lower and not hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.main_hashkey_dict.update({column: hashed_columns[column]}) -%}\n  {% elif column != multi_active_config['main_hashkey_column'] and not hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.remaining_hashed_columns.update({column: hashed_columns[column]}) -%}\n  {%- elif hashed_columns[column].is_hashdiff -%}\n    {%- do tmp_ns.hashdiff_names.append(column) -%}\n  {%- endif -%}\n{%- endfor -%}\n\nmain_hashkey_generation AS (\n\n  SELECT \n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.main_hashkey_dict) -%}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n  FROM {{ last_cte }}\n\n),\n\n{# Hash calculation for multi-active source data. #}\nma_hashdiff_prep AS (\n\n    SELECT\n      \n      {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n      \n      {# Generates only all hashdiffs. #}\n      {{- datavault4dbt.hash_columns(columns=processed_hash_columns, multi_active_key=multi_active_config['multi_active_key'], main_hashkey_column=multi_active_config['main_hashkey_column']) | indent(4) }},\n      {{ ldts_alias }}\n\n    FROM {{ last_cte }}\n    GROUP BY local.{{ multi_active_config['main_hashkey_column'] }}, {{ ldts_alias }}\n\n),\n\nhashed_columns AS (\n\n    SELECT \n\n      {{ datavault4dbt.alias_all(columns=final_columns_to_select, prefix='main_hashkey_generation') }},                         {# Everything from last_cte before hashed_columns. #}\n      {% set processed_remaining_hash_columns = datavault4dbt.process_hash_column_excludes(tmp_ns.remaining_hashed_columns) -%}   \n      {# Generates only all remaining hashkeys, that are no hashdiffs #}\n      \n      {%- if datavault4dbt.is_something(processed_remaining_hash_columns) %}\n      {{- datavault4dbt.hash_columns(columns=processed_remaining_hash_columns) | indent(4) }},                                  {# All remaining hashed_columns get calculated. #}\n      {% endif -%}\n\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(tmp_ns.hashdiff_names)) }},                                   {# All MA Hashdiffs are selected. #}\n      main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }}                                                          {# Main Hashkey selected. #}\n\n    FROM main_hashkey_generation\n    LEFT JOIN ma_hashdiff_prep \n      ON main_hashkey_generation.{{ multi_active_config['main_hashkey_column'] }} = ma_hashdiff_prep.{{ multi_active_config['main_hashkey_column'] }} \n      AND main_hashkey_generation.{{ ldts_alias }} = ma_hashdiff_prep.{{ ldts_alias }}\n\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n\n),\n\n{% else %}\n\n{# Hash calculation for single-active source data. #}\nhashed_columns AS (\n\n    SELECT\n\n    {% if final_columns_to_select | length > 0 -%}\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% endif %}\n\n    {%- set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n    {{ datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n  \n),\n\n{%- endif -%}\n{%- endif -%}\n\n{# Creating Ghost Record for unknown case, based on datatype #}\nunknown_values AS (\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ unknown_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for all source columns, except the ldts, rsrc & edwSequence column #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col|upper, datatype=dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes#}\n      {% for col, vals in prejoined_columns.items() %}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( source(vals['src_name']|string, vals['src_table']) ) -%}\n\n          {% for column in pj_relation_columns -%}\n\n            {% if column.name|lower == vals['bk']|lower -%}\n              {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=column.dtype, ghost_record_type='unknown') }}\n            {%- endif -%}\n\n          {%- endfor -%}\n          {%- if not loop.last %},{% endif %}\n        {% endfor -%}\n    {%- endif %}\n\n    {%- if datavault4dbt.is_something(derived_columns) -%},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST('{{ unknown_key }}' as {{ hash_dtype }}) as \"{{ hash_column }}\"\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{-\"\\n\"-}}\n),\n\n{# Creating Ghost Record for error case, based on datatype #}\nerror_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ error_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for Source Columns #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for Missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col|upper, datatype=dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes #}\n      {%- for col, vals in prejoined_columns.items() %}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( source(vals['src_name']|string, vals['src_table']) ) -%}\n\n        {% for column in pj_relation_columns -%}\n          {% if column.name|lower == vals['bk']|lower -%}\n            {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=column.dtype, ghost_record_type='error') -}}\n          {%- endif -%}\n        {%- endfor -%}\n          {%- if not loop.last -%},{%- endif %}\n      {% endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(derived_columns) %},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST('{{ error_key }}' as {{ hash_dtype }}) as \"{{ hash_column }}\"\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{- \"\\n\" -}}\n),\n\n{# Combining all previous ghost record calculations to two rows with the same width as regular entries #}\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\n{%- if not include_source_columns -%}\n  {% set final_columns_to_select = datavault4dbt.process_columns_to_select(columns_list=final_columns_to_select, exclude_columns_list=source_columns_to_select) %}\n{%- endif -%}\n{# Combining the two ghost records with the regular data #}\ncolumns_to_select AS (\n\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM {{ last_cte }}\n    UNION ALL\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM ghost_records\n)\n\nSELECT * FROM columns_to_select\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.source_columns", "macro.datavault4dbt.is_attribute", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.extract_column_names", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.extract_input_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_something", "macro.datavault4dbt.derived_columns_datatypes", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.print_list", "macro.datavault4dbt.escape_column_names", "macro.datavault4dbt.prefix", "macro.datavault4dbt.derive_columns", "macro.datavault4dbt.process_hash_column_excludes", "macro.datavault4dbt.hash_columns", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.ghost_record_per_datatype"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.0646846}, "macro.datavault4dbt.snowflake__stage": {"unique_id": "macro.datavault4dbt.snowflake__stage", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/staging/snowflake/stage.sql", "original_file_path": "macros/staging/snowflake/stage.sql", "name": "snowflake__stage", "macro_sql": "\n\n{%- macro snowflake__stage(include_source_columns,\n                ldts,\n                rsrc,\n                source_model,\n                hashed_columns,\n                derived_columns,\n                sequence,\n                prejoined_columns,\n                missing_columns,\n                multi_active_config) -%}\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g.\n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n        source_name: source_table_name\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\n{#- Check for source format or ref format and create relation object from source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {%- set source_relation = ref(source_model) -%}\n    {%- set all_source_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- else -%}\n    {%- set all_source_columns = [] -%}\n{%- endif -%}\n\n\n{# Setting the column name for load date timestamp and record source to the alias coming from the attributes #}\n{%- set ldts_alias = var('datavault4dbt.ldts_alias', 'ldts') -%}\n{%- set rsrc_alias = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n{%- set copy_input_columns = var('datavault4dbt.copy_rsrc_ldts_input_columns', false) -%}\n{%- set load_datetime_col_name = ldts_alias -%}\n{%- set record_source_col_name = rsrc_alias -%}\n\n{%- set ldts_rsrc_input_column_names = [] -%}\n{%- if datavault4dbt.is_attribute(ldts) -%}\n  {%- if not copy_input_columns -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n  {%- else -%}\n    \n    {%- if ldts|lower == ldts_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [ldts]  -%}\n    {%- endif -%}\n\n  {%- endif %}\n\n{%- endif -%}\n\n{%- if datavault4dbt.is_attribute(rsrc) -%}\n\n  {%- if not copy_input_columns -%}\n    {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n  {%- else -%}\n  \n    {%- if rsrc|lower == rsrc_alias|lower -%}\n      {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [rsrc] -%}\n    {%- endif -%}\n\n  {%- endif -%}\n\n{%- endif %}\n\n{%- if sequence is not none -%}\n  {%- set ldts_rsrc_input_column_names = ldts_rsrc_input_column_names + [sequence] -%}\n{%- endif -%}\n\n{%- set ldts = datavault4dbt.as_constant(ldts) -%}\n{%- set rsrc = datavault4dbt.as_constant(rsrc) -%}\n\n{# Getting the column names for all additional columns #}\n{%- set derived_column_names = datavault4dbt.extract_column_names(derived_columns) -%}\n{%- set hashed_column_names = datavault4dbt.extract_column_names(hashed_columns) -%}\n{%- set prejoined_column_names = datavault4dbt.extract_column_names(prejoined_columns) -%}\n{%- set missing_column_names = datavault4dbt.extract_column_names(missing_columns) -%}\n{%- set exclude_column_names = derived_column_names + hashed_column_names + prejoined_column_names + missing_column_names + ldts_rsrc_input_column_names %}\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\n{%- set all_columns = adapter.get_columns_in_relation( source_relation ) -%}\n\n{%- set columns_without_excluded_columns = [] -%}\n{%- set final_columns_to_select = [] -%}\n\n\n{%- if include_source_columns -%}\n  {%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_source_columns, exclude_column_names) | list -%}\n\n  {%- for column in all_columns -%}\n\n    {%- if column.name|lower not in exclude_column_names|map('lower') %}\n      {%- do columns_without_excluded_columns.append(column) -%}\n    {%- endif -%}\n\n  {%- endfor -%}\n{%- else -%}\n  \n  {# Include from the source only the input columns needed #}\n  {# Getting the input columns for the additional columns #}\n  {%- set derived_input_columns = datavault4dbt.extract_input_columns(derived_columns) -%}\n  {%- set hashed_input_columns = datavault4dbt.expand_column_list(datavault4dbt.extract_input_columns(hashed_columns)) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, derived_column_names) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, prejoined_column_names) -%}\n  {%- set hashed_input_columns = datavault4dbt.process_columns_to_select(hashed_input_columns, missing_column_names) -%}  {# Excluding the names of the missing columns. #}\n  {%- set prejoined_input_columns = datavault4dbt.extract_input_columns(prejoined_columns) -%}\n  {%- set only_include_from_source = (derived_input_columns + hashed_input_columns + prejoined_input_columns) | unique | list -%}\n  {%- set source_columns_to_select = only_include_from_source -%}\n\n{%- endif-%}\n\n{%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\n{%- set derived_columns_to_select = datavault4dbt.process_columns_to_select(source_and_derived_column_names, hashed_column_names) | unique | list -%}\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n  {#- Getting Data types for derived columns with detection from source relation -#}\n  {%- set derived_columns_with_datatypes = datavault4dbt.derived_columns_datatypes(derived_columns, source_relation) -%}\n  {%- set derived_columns_with_datatypes_DICT = fromjson(derived_columns_with_datatypes) -%}\n{%- endif -%}\n{#- Select hashing algorithm -#}\n\n{#- Setting unknown and error keys with default values for the selected hash algorithm -#}\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{# Select timestamp and format variables #}\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the error/unknown value for the record source  for the ghost records#}\n{% set error_value_rsrc = var('datavault4dbt.default_error_rsrc', 'ERROR') %}\n{% set unknown_value_rsrc = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') %}\n\n{# Setting the rsrc default datatype and length #}\n{% set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') %}\n\nWITH\n\n{# Selecting everything that we need from the source relation. #}\nsource_data AS (\n    SELECT\n\n    {{- \"\\n\\n    \" ~ datavault4dbt.print_list(datavault4dbt.escape_column_names(all_source_columns)) if all_source_columns else \" *\" }}\n\n  FROM {{ source_relation }}\n\n  {% set last_cte = \"source_data\" -%}\n),\n\n\n{% set alias_columns = [load_datetime_col_name, record_source_col_name] %}\n\n{# Selecting all columns from the source data, renaming load date and record source to global aliases #}\nldts_rsrc_data AS (\n\n  SELECT\n    {{ ldts }} AS {{ load_datetime_col_name}},\n    CAST( {{ rsrc }} as {{ rsrc_default_dtype }} ) AS {{ record_source_col_name }}\n    {%- if sequence is not none %},\n      {{ sequence }} AS edwSequence\n      {%- set alias_columns = alias_columns + ['edwSequence'] -%}\n    {% endif -%}\n\n    {%- if source_columns_to_select is not none and source_columns_to_select | length > 0 %},\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(source_columns_to_select)) }}\n    {% endif -%}\n    {{\"\\n\"}}\n  FROM {{ last_cte }}\n\n  {%- set last_cte = \"ldts_rsrc_data\" -%}\n  {%- set final_columns_to_select = alias_columns + final_columns_to_select  %}\n),\n\n{%- if datavault4dbt.is_something(missing_columns) %}\n\n{# Filling missing columns with NULL values for schema changes #}\nmissing_columns AS (\n\n  SELECT\n\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {%- endif %}\n  {%- for col, dtype in missing_columns.items() %}\n    CAST(NULL as {{ dtype }}) as {{ col }}{% if not loop.last %},{% endif -%}\n\n  {% endfor %}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"missing_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + missing_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(prejoined_columns) %}\n{# Prejoining Business Keys of other source objects for Link purposes #}\nprejoined_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.prefix(columns=datavault4dbt.escape_column_names(final_columns_to_select), prefix_str='lcte').split(',')) }}\n  {% endif %}\n  {%- for col, vals in prejoined_columns.items() -%}\n    ,pj_{{loop.index}}.{{ vals['bk'] }} AS {{ col }}\n  {% endfor -%}\n\n  FROM {{ last_cte }} lcte\n\n  {%- for col, vals in prejoined_columns.items() %}\n    left join {{ source(vals['src_name']|string, vals['src_table']) }} as pj_{{loop.index}} on lcte.{{ vals['this_column_name'] }} = pj_{{loop.index}}.{{ vals['ref_column_name'] }}\n  {% endfor %}\n\n  {% set last_cte = \"prejoined_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + prejoined_column_names %}\n),\n{%- endif -%}\n\n\n{%- if datavault4dbt.is_something(derived_columns) %}\n{# Adding derived columns to the selection #}\nderived_columns AS (\n\n  SELECT\n  {% if final_columns_to_select | length > 0 -%}\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n  {% endif %}\n  {{ datavault4dbt.derive_columns(columns=derived_columns) | indent(4) }}\n\n  FROM {{ last_cte }}\n  {%- set last_cte = \"derived_columns\" -%}\n  {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\n),\n{%- endif -%}\n\n{%- if datavault4dbt.is_something(hashed_columns) and hashed_columns is mapping %}\n{# Generating Hashed Columns (hashkeys and hashdiffs for Hubs/Links/Satellites) #}\n{% if datavault4dbt.is_something(multi_active_config) %}\n\nhashed_columns AS (\n\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n\n    {% set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n    {{- datavault4dbt.hash_columns(columns=processed_hash_columns, multi_active_key=multi_active_config['multi_active_key'], main_hashkey_column=multi_active_config['main_hashkey_column']) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n\n),\n\n{% else %}\n\n{# Hash calculation for single-active source data. #}\nhashed_columns AS (\n\n    SELECT\n\n    {% if final_columns_to_select | length > 0 -%}\n      {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }},\n    {% endif %}\n\n    {%- set processed_hash_columns = datavault4dbt.process_hash_column_excludes(hashed_columns) -%}\n    {{ datavault4dbt.hash_columns(columns=processed_hash_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n  \n),\n\n{%- endif -%}\n{%- endif -%}\n\n{# Creating Ghost Record for unknown case, based on datatype #}\nunknown_values AS (\n  \n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ unknown_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for all source columns, except the ldts, rsrc & edwSequence column #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes#}\n      {% for col, vals in prejoined_columns.items() %}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( source(vals['src_name']|string, vals['src_table']) ) -%}\n\n          {% for column in pj_relation_columns -%}\n\n            {% if column.name|lower == vals['bk']|lower -%}\n              {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=column.dtype, ghost_record_type='unknown') }}\n            {%- endif -%}\n\n          {%- endfor -%}\n          {%- if not loop.last %},{% endif %}\n        {% endfor -%}\n    {%- endif %}\n\n    {%- if datavault4dbt.is_something(derived_columns) -%},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='unknown') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST('{{ unknown_key }}' as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{-\"\\n\"-}}\n),\n\n{# Creating Ghost Record for error case, based on datatype #}\nerror_values AS (\n\n    SELECT\n\n    {{ datavault4dbt.string_to_timestamp(timestamp_format , end_of_all_times) }} as {{ load_datetime_col_name }},\n    '{{ error_value_rsrc }}' as {{ record_source_col_name }}\n\n    {%- if columns_without_excluded_columns is defined and columns_without_excluded_columns| length > 0 -%},\n    {# Generating Ghost Records for Source Columns #}\n      {%- for column in columns_without_excluded_columns %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column.name, datatype=column.dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(missing_columns) -%},\n    {# Additionally generating ghost record for Missing columns #}\n      {%- for col, dtype in missing_columns.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=dtype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor -%}\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(prejoined_columns) -%},\n    {# Additionally generating ghost records for the prejoined attributes #}\n      {%- for col, vals in prejoined_columns.items() %}\n\n        {%- set pj_relation_columns = adapter.get_columns_in_relation( source(vals['src_name']|string, vals['src_table']) ) -%}\n\n        {% for column in pj_relation_columns -%}\n          {% if column.name|lower == vals['bk']|lower -%}\n            {{ datavault4dbt.ghost_record_per_datatype(column_name=col, datatype=column.dtype, ghost_record_type='error') -}}\n          {%- endif -%}\n        {%- endfor -%}\n          {%- if not loop.last -%},{%- endif %}\n      {% endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(derived_columns) %},\n    {# Additionally generating Ghost Records for Derived Columns #}\n      {%- for column_name, properties in derived_columns_with_datatypes_DICT.items() %}\n        {{ datavault4dbt.ghost_record_per_datatype(column_name=column_name, datatype=properties.datatype, ghost_record_type='error') }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(processed_hash_columns) -%},\n\n      {%- for hash_column in processed_hash_columns %}\n        CAST('{{ error_key }}' as {{ hash_dtype }}) as {{ hash_column }}\n        {%- if not loop.last %},{% endif %}\n      {%- endfor -%}\n\n    {%- endif -%}\n    {{- \"\\n\" -}}\n),\n\n{# Combining all previous ghost record calculations to two rows with the same width as regular entries #}\nghost_records AS (\n    SELECT * FROM unknown_values\n    UNION ALL\n    SELECT * FROM error_values\n),\n\n{%- if not include_source_columns -%}\n  {% set final_columns_to_select = datavault4dbt.process_columns_to_select(columns_list=final_columns_to_select, exclude_columns_list=source_columns_to_select) %}\n{%- endif -%}\n\n{# Combining the two ghost records with the regular data #}\ncolumns_to_select AS (\n\n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM {{ last_cte }}\n\n    UNION ALL\n    \n    SELECT\n\n    {{ datavault4dbt.print_list(datavault4dbt.escape_column_names(final_columns_to_select)) }}\n\n    FROM ghost_records\n)\n\nSELECT * FROM columns_to_select\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.source_columns", "macro.datavault4dbt.is_attribute", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.extract_column_names", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.extract_input_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_something", "macro.datavault4dbt.derived_columns_datatypes", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.print_list", "macro.datavault4dbt.escape_column_names", "macro.datavault4dbt.prefix", "macro.datavault4dbt.derive_columns", "macro.datavault4dbt.process_hash_column_excludes", "macro.datavault4dbt.hash_columns", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.ghost_record_per_datatype"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1003218}, "macro.datavault4dbt.alias_all": {"unique_id": "macro.datavault4dbt.alias_all", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/alias_all.sql", "original_file_path": "macros/internal/metadata_processing/alias_all.sql", "name": "alias_all", "macro_sql": "{%- macro alias_all(columns=none, prefix=none) -%}\n\n    {{- adapter.dispatch('alias_all', 'datavault4dbt')(columns=columns, prefix=prefix) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__alias_all"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1018414}, "macro.datavault4dbt.default__alias_all": {"unique_id": "macro.datavault4dbt.default__alias_all", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/alias_all.sql", "original_file_path": "macros/internal/metadata_processing/alias_all.sql", "name": "default__alias_all", "macro_sql": "\n\n{%- macro default__alias_all(columns, prefix) -%}\n\n{%- if datavault4dbt.is_list(columns) -%}\n\n    {%- for column in columns -%}\n        {{ datavault4dbt.alias(alias_config=column, prefix=prefix) }}\n        {% if not loop.last -%} , {% endif -%}\n    {%- endfor -%}\n\n{%- elif columns is string -%}\n\n{{ datavault4dbt.alias(alias_config=columns, prefix=prefix) }}\n\n{%- else -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list or a string.\") }}\n    {%- endif %}\n\n{%- endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_list", "macro.datavault4dbt.alias"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.103049}, "macro.datavault4dbt.alias": {"unique_id": "macro.datavault4dbt.alias", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/alias.sql", "original_file_path": "macros/internal/metadata_processing/alias.sql", "name": "alias", "macro_sql": "{%- macro alias(alias_config=none, prefix=none) -%}\n\n    {{- adapter.dispatch('alias', 'datavault4dbt')(alias_config=alias_config, prefix=prefix) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__alias"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1046588}, "macro.datavault4dbt.default__alias": {"unique_id": "macro.datavault4dbt.default__alias", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/alias.sql", "original_file_path": "macros/internal/metadata_processing/alias.sql", "name": "default__alias", "macro_sql": "\n\n{%- macro default__alias(alias_config=none, prefix=none) -%}\n\n{%- if alias_config is defined and alias_config is not none and alias_config -%}\n\n    {%- if alias_config is mapping -%}\n\n        {%- if alias_config['source_column'] and alias_config['alias'] -%}\n\n            {%- if prefix -%}\n                {{prefix}}.{{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\n            {%- else -%}\n                {{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- else -%}\n\n        {%- if prefix -%}\n\n        {{- datavault4dbt.prefix([alias_config], prefix) -}}\n\n        {%- else -%}\n\n        {{ alias_config }}\n\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if execute -%}\n\n        {{ exceptions.raise_compiler_error(\"Invalid alias configuration:\\nexpected format: {source_column: 'column', alias: 'column_alias'}\\ngot: \" ~ alias_config) }}\n\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1064196}, "macro.datavault4dbt.multikey": {"unique_id": "macro.datavault4dbt.multikey", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/multikey.sql", "original_file_path": "macros/internal/metadata_processing/multikey.sql", "name": "multikey", "macro_sql": "{%- macro multikey(columns, prefix=none, condition=none, operator='AND') -%}\n\n    {{- adapter.dispatch('multikey', 'datavault4dbt')(columns=columns, prefix=prefix, condition=condition, operator=operator) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__multikey"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1086016}, "macro.datavault4dbt.default__multikey": {"unique_id": "macro.datavault4dbt.default__multikey", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/multikey.sql", "original_file_path": "macros/internal/metadata_processing/multikey.sql", "name": "default__multikey", "macro_sql": "\n\n{%- macro default__multikey(columns, prefix=none, condition=none, operator='AND') -%}\n\n    {%- if prefix is string -%}\n        {%- set prefix = [prefix] -%}\n    {%- endif -%}\n\n    {%- if columns is string -%}\n        {%- set columns = [columns] -%}\n    {%- endif -%}\n\n    {%- if condition in ['<>', '!=', '='] -%}\n        {%- for col in columns -%}\n            {%- if prefix -%}\n                {{- datavault4dbt.prefix([col], prefix[0], alias_target='target') }} {{ condition }} {{ datavault4dbt.prefix([col], prefix[1]) -}}\n            {%- endif %}\n            {%- if not loop.last %} {{ operator }} {% endif -%}\n        {% endfor -%}\n    {%- else -%}\n        {%- if datavault4dbt.is_list(columns) -%}\n            {%- for col in columns -%}\n                {{ (prefix[0] ~ '.') if prefix }}{{ col }} {{ condition if condition else '' }}\n                {%- if not loop.last -%} {{ \"\\n    \" ~ operator }} {% endif -%}\n            {%- endfor -%}\n        {%- else -%}\n            {{ prefix[0] ~ '.' if prefix }}{{ columns }} {{ condition if condition else '' }}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.prefix", "macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1113832}, "macro.datavault4dbt.expand_column_list": {"unique_id": "macro.datavault4dbt.expand_column_list", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/expand_column_list.sql", "original_file_path": "macros/internal/metadata_processing/expand_column_list.sql", "name": "expand_column_list", "macro_sql": "{%- macro expand_column_list(columns=none) -%}\n\n{%- if not columns -%}\n    {%- if execute -%}\n         {{- exceptions.raise_compiler_error(\"Expected a list of columns, got: \" ~ columns) -}}\n    {%- endif -%}\n{%- endif -%}\n\n{%- set col_list = [] -%}\n\n{%- if datavault4dbt.is_list(columns) -%}\n\n    {%- set columns = columns | reject(\"none\") %}\n\n    {%- for col in columns -%}\n\n        {%- if col is string -%}\n\n            {%- do col_list.append(col) -%}\n\n        {#- If list of lists -#}\n        {%- elif datavault4dbt.is_list(col) -%}\n\n            {%- for cols in col -%}\n\n                {%- do col_list.append(cols) -%}\n\n            {%- endfor -%}\n        {%- elif col is mapping -%}\n\n            {%- do col_list.append(col) -%}\n\n        {%- else -%}\n\n            {%- if execute -%}\n                {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list of lists, dictionaries or strings.\") -}}\n            {%- endif %}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n{%- else -%}\n\n    {%- if execute -%}\n        {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list.\") -}}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- do return(col_list) -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1147485}, "macro.datavault4dbt.as_constant": {"unique_id": "macro.datavault4dbt.as_constant", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/as_constant.sql", "original_file_path": "macros/internal/metadata_processing/as_constant.sql", "name": "as_constant", "macro_sql": "{%- macro as_constant(column_str=none) -%}\n\n    {{- adapter.dispatch('as_constant', 'datavault4dbt')(column_str=column_str) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__as_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.115781}, "macro.datavault4dbt.default__as_constant": {"unique_id": "macro.datavault4dbt.default__as_constant", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/as_constant.sql", "original_file_path": "macros/internal/metadata_processing/as_constant.sql", "name": "default__as_constant", "macro_sql": "\n\n{%- macro default__as_constant(column_str) -%}\n\n    {%- if column_str is not none and column_str is string and column_str -%}\n\n        {%- if column_str | first == \"!\" -%}\n        \n            {{- return(\"'\" ~ column_str[1:] ~ \"'\") -}}\n        \n        {%- else -%}\n        \n            {{- return(column_str) -}}\n\n        {%- endif -%}\n    {%- else -%}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid columns_str object provided. Must be a string and not null.\") }}\n        {%- endif %}\n    {%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.116838}, "macro.datavault4dbt.check_required_parameters": {"unique_id": "macro.datavault4dbt.check_required_parameters", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/check_required_parameters.sql", "original_file_path": "macros/internal/metadata_processing/check_required_parameters.sql", "name": "check_required_parameters", "macro_sql": "{%- macro check_required_parameters() -%}\n\n    {%- set ns = namespace(missing_parameters=[]) -%}\n\n    {%- if kwargs is not none -%}\n\n        {%- for k, v in kwargs.items() %}\n            {%- do ns.missing_parameters.append(k) if v is none -%}\n        {%- endfor -%}\n\n        {%- if ns.missing_parameters -%}\n            {{- exceptions.raise_compiler_error(\"Required parameter(s) missing or none in '{}': {}\".format(this, ns.missing_parameters | join(\", \"))) -}}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1185098}, "macro.datavault4dbt.concat_ws": {"unique_id": "macro.datavault4dbt.concat_ws", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "name": "concat_ws", "macro_sql": "{%- macro concat_ws(string_list, separator=\"||\") -%}\n\n    {{- adapter.dispatch('concat_ws', 'datavault4dbt')(string_list=string_list, separator=separator) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1197507}, "macro.datavault4dbt.default__concat_ws": {"unique_id": "macro.datavault4dbt.default__concat_ws", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "name": "default__concat_ws", "macro_sql": "\n\n{%- macro default__concat_ws(string_list, separator=\"||\") -%}\n\n    {{  \"CONCAT_WS('\" ~ separator ~ \"', \" ~ string_list | join(\", \") ~ \")\" }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.120176}, "macro.datavault4dbt.bigquery__concat_ws": {"unique_id": "macro.datavault4dbt.bigquery__concat_ws", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "name": "bigquery__concat_ws", "macro_sql": "{%- macro bigquery__concat_ws(string_list, separator=\"||\") -%}\n\n    {{- 'CONCAT(' -}}\n    {%- for str in string_list -%}\n        {{- \"{}\".format(str) -}}\n        {{- \",'{}',\".format(separator) if not loop.last -}}\n    {%- endfor -%}\n    {{- '\\n)' -}}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1209037}, "macro.datavault4dbt.exasol__concat_ws": {"unique_id": "macro.datavault4dbt.exasol__concat_ws", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "name": "exasol__concat_ws", "macro_sql": "{%- macro exasol__concat_ws(string_list, separator=\"||\") -%}\n\n    {{- 'CONCAT(' -}}\n    {%- for str in string_list -%}\n        {{- \"{}\".format(str) -}}\n        {{- \",'{}',\".format(separator) if not loop.last -}}\n    {%- endfor -%}\n    {{- ')' -}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1216016}, "macro.datavault4dbt.escape_column_names": {"unique_id": "macro.datavault4dbt.escape_column_names", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "name": "escape_column_names", "macro_sql": "{%- macro escape_column_names(columns=none) -%}\n\n{# Different platforms use different escape characters, the default below is for Snowflake which uses double quotes #}\n\n    {%- if datavault4dbt.is_something(columns) -%}\n\n        {%- set col_string = '' -%}\n        {%- set col_list = [] -%}\n        {%- set col_mapping = {} -%}\n\n        {%- if columns is string -%}\n\n            {%- set col_string = datavault4dbt.escape_column_name(columns) -%}\n\n        {%- elif datavault4dbt.is_list(columns) -%}\n\n            {%- for col in columns -%}\n\n                {%- if col is string -%}\n\n                    {%- set escaped_col = datavault4dbt.escape_column_name(col) -%}\n\n                    {%- do col_list.append(escaped_col) -%}\n\n                {%- else -%}\n\n                    {%- if execute -%}\n                        {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string.\") -}}\n                    {%- endif -%}\n\n                {%- endif -%}\n\n            {%- endfor -%}\n\n        {%- elif columns is mapping -%}\n\n            {%- if columns['source_column'] and columns['alias'] -%}\n\n                {%- set escaped_source_col = datavault4dbt.escape_column_name(columns['source_column']) -%}\n                {%- set escaped_alias_col = datavault4dbt.escape_column_name(columns['alias']) -%}\n                {%- set col_mapping = {\"source_column\": escaped_source_col, \"alias\": escaped_alias_col} -%}\n\n            {%- else -%}\n\n                {%- if execute -%}\n                    {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\n                {%- endif %}\n\n            {%- endif -%}\n\n        {%- else -%}\n\n            {%- if execute -%}\n                {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\n            {%- endif %}\n\n        {%- endif -%}\n\n    {%- elif columns == '' -%}\n\n        {%- if execute -%}\n            {{- exceptions.raise_compiler_error(\"Expected a column name or a list of column names, got an empty string\") -}}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- if columns is none -%}\n\n    {%- do return(none) -%}\n\n{%- elif columns == [] -%}\n\n    {%- do return([]) -%}\n\n{%- elif columns == {} -%}\n\n    {%- do return({}) -%}\n\n{%- elif columns is string -%}\n\n    {%- do return(col_string) -%}\n\n{%- elif datavault4dbt.is_list(columns) -%}\n\n    {%- do return(col_list) -%}\n\n{%- elif columns is mapping -%}\n\n    {%- do return(col_mapping) -%}\n\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_something", "macro.datavault4dbt.escape_column_name", "macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1320086}, "macro.datavault4dbt.escape_column_name": {"unique_id": "macro.datavault4dbt.escape_column_name", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "name": "escape_column_name", "macro_sql": "{%- macro escape_column_name(column) -%}\n\n    {{- adapter.dispatch('escape_column_name', 'datavault4dbt')(column=column) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1325178}, "macro.datavault4dbt.default__escape_column_name": {"unique_id": "macro.datavault4dbt.default__escape_column_name", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "name": "default__escape_column_name", "macro_sql": "\n\n{%- macro default__escape_column_name(column) -%}\n\n    {%- set escape_char_left  = var('escape_char_left',  '\"') -%}\n    {%- set escape_char_right = var('escape_char_right', '\"') -%}\n\n    {%- set escaped_column_name = escape_char_left ~ column | upper | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right | indent(4) -%}\n\n    {%- do return(escaped_column_name) -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.133686}, "macro.datavault4dbt.sqlserver__escape_column_name": {"unique_id": "macro.datavault4dbt.sqlserver__escape_column_name", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "name": "sqlserver__escape_column_name", "macro_sql": "{%- macro sqlserver__escape_column_name(column) -%}\n\n    {%- set escape_char_left  = var('escape_char_left',  '\"') -%}\n    {%- set escape_char_right = var('escape_char_right', '\"') -%}\n\n    {%- set escaped_column_name = escape_char_left ~ column | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right -%}\n\n    {%- do return(escaped_column_name) -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.134596}, "macro.datavault4dbt.bigquery__escape_column_name": {"unique_id": "macro.datavault4dbt.bigquery__escape_column_name", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "name": "bigquery__escape_column_name", "macro_sql": "{%- macro bigquery__escape_column_name(column) -%}\n\n    {%- set escape_char_left  = var('escape_char_left',  '`') -%}\n    {%- set escape_char_right = var('escape_char_right', '`') -%}\n\n    {%- set escaped_column_name = escape_char_left ~ column | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right -%}\n\n    {%- do return(escaped_column_name) -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1355045}, "macro.datavault4dbt.prepend_generated_by": {"unique_id": "macro.datavault4dbt.prepend_generated_by", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/helpers/prepend_generated_by.sql", "original_file_path": "macros/internal/helpers/prepend_generated_by.sql", "name": "prepend_generated_by", "macro_sql": "{% macro prepend_generated_by() %}\n-----------------------------------------------------------------------------------------------\n--                                                                                      ( )  --\n--                                                                                     //    --\n--                                                                               ( )=( o )   --\n--  #####   #####     #    #       ####### ####### ######  ####### #######             \\\\    --\n-- #     # #     #   # #   #       #       #       #     # #       #                    ( )  --\n-- #       #        #   #  #       #       #       #     # #       #                         --\n--  #####  #       #     # #       #####   #####   ######  #####   #####                     --\n--       # #       ####### #       #       #       #   #   #       #                         --\n-- #     # #     # #     # #       #       #       #    #  #       #                         --\n--  #####   #####  #     # ####### ####### #       #     # ####### #######                   --\n-----------------------------------------------------------------------------------------------\n--              Generated by datavault4dbt by Scalefree International GmbH                   --\n-----------------------------------------------------------------------------------------------\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.136459}, "macro.datavault4dbt.process_columns_to_select": {"unique_id": "macro.datavault4dbt.process_columns_to_select", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/helpers/stage_processing_macros.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros.sql", "name": "process_columns_to_select", "macro_sql": "{%- macro process_columns_to_select(columns_list=none, exclude_columns_list=none) -%}\n    {% set exclude_columns_list = exclude_columns_list | map('upper') | list %}\n    {% set columns_to_select = [] %}\n\n    {% if not datavault4dbt.is_list(columns_list) or not datavault4dbt.is_list(exclude_columns_list)  %}\n\n        {{- exceptions.raise_compiler_error(\"One or both arguments are not of list type.\") -}}\n\n    {%- endif -%}\n\n    {%- if datavault4dbt.is_something(columns_list) and datavault4dbt.is_something(exclude_columns_list) -%}\n        {%- for col in columns_list -%}\n\n            {%- if col|lower not in exclude_columns_list | map('lower') -%}\n                {%- do columns_to_select.append(col) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n    {%- elif datavault4dbt.is_something(columns_list) and not datavault4dbt.is_something(exclude_columns_list) %}\n        {% set columns_to_select = columns_list %}\n    {%- endif -%}\n\n    {%- do return(columns_to_select) -%}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_list", "macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1428804}, "macro.datavault4dbt.extract_column_names": {"unique_id": "macro.datavault4dbt.extract_column_names", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/helpers/stage_processing_macros.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros.sql", "name": "extract_column_names", "macro_sql": "{%- macro extract_column_names(columns_dict=none) -%}\n\n    {%- set extracted_column_names = [] -%}\n\n    {%- if columns_dict is mapping -%}\n        {%- for key, value in columns_dict.items() -%}\n            {%- do extracted_column_names.append(key) -%}\n        {%- endfor -%}\n\n        {%- do return(extracted_column_names) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.143991}, "macro.datavault4dbt.extract_input_columns": {"unique_id": "macro.datavault4dbt.extract_input_columns", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/helpers/stage_processing_macros.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros.sql", "name": "extract_input_columns", "macro_sql": "{%- macro extract_input_columns(columns_dict=none) -%}\n\n    {%- set extracted_input_columns = [] -%}\n\n    {%- if columns_dict is mapping -%}\n        {%- for key, value in columns_dict.items() -%}\n            {%- if value is mapping and 'src_cols_required' in value.keys() -%}\n                {%- do extracted_input_columns.append(value['src_cols_required']) -%}\n            {%- elif value is mapping and 'value' in value.keys() and 'src_cols_required' not in value.keys() -%}\n                {# Do nothing. No source column required. #}    \n            {%- elif value is mapping and value.is_hashdiff -%}\n                {%- do extracted_input_columns.append(value['columns']) -%}\n            {%- elif value is mapping and 'this_column_name' in value.keys() -%}\n                {%- do extracted_input_columns.append(value['this_column_name']) -%}\n            {%- else -%}\n                {%- do extracted_input_columns.append(value) -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n        {%- do return(extracted_input_columns) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.146187}, "macro.datavault4dbt.process_hash_column_excludes": {"unique_id": "macro.datavault4dbt.process_hash_column_excludes", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/helpers/stage_processing_macros.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros.sql", "name": "process_hash_column_excludes", "macro_sql": "{%- macro process_hash_column_excludes(hash_columns=none, source_columns=none) -%}\n\n    {%- set processed_hash_columns = {} -%}\n\n    {%- for col, col_mapping in hash_columns.items() -%}\n        \n        {%- if col_mapping is mapping -%}\n            {%- if col_mapping.exclude_columns -%}\n\n                {%- if col_mapping.columns -%}\n\n                    {%- set columns_to_hash = datavault4dbt.process_columns_to_select(source_columns, col_mapping.columns) -%}\n\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\n                    {%- do hash_columns[col].update({'columns': columns_to_hash}) -%}\n\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\n                {%- else -%}\n\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\n                    {%- do hash_columns[col].update({'columns': source_columns}) -%}\n\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- do processed_hash_columns.update({col: col_mapping}) -%}\n            {%- endif -%}\n        {%- else -%}\n            {%- do processed_hash_columns.update({col: col_mapping}) -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- do return(processed_hash_columns) -%}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.process_columns_to_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1489403}, "macro.datavault4dbt.print_list": {"unique_id": "macro.datavault4dbt.print_list", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/helpers/stage_processing_macros.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros.sql", "name": "print_list", "macro_sql": "{%- macro print_list(list_to_print=none, indent=4, src_alias=none) -%}\n\n    {%- for col_name in list_to_print -%}\n        {%- if src_alias %}\n        {{ (src_alias ~ '.' ~ col_name) | indent(indent) }}{{ \",\" if not loop.last }}\n        {%- else %}\n        {{ col_name | indent(indent) }}{{ \",\" if not loop.last }}\n        {%- endif %}\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1500297}, "macro.datavault4dbt.is_list": {"unique_id": "macro.datavault4dbt.is_list", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "name": "is_list", "macro_sql": "{%- macro is_list(obj, empty_is_false=false) -%}\n\n    {%- if obj is iterable and obj is not string and obj is not mapping -%}\n        {%- if obj is none and obj is undefined and not obj and empty_is_false -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1540318}, "macro.datavault4dbt.is_nothing": {"unique_id": "macro.datavault4dbt.is_nothing", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "name": "is_nothing", "macro_sql": "{%- macro is_nothing(obj) -%}\n\n    {%- if obj is none or obj is undefined or not obj -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1546485}, "macro.datavault4dbt.is_something": {"unique_id": "macro.datavault4dbt.is_something", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "name": "is_something", "macro_sql": "{%- macro is_something(obj) -%}\n\n    {%- if obj is not none and obj is defined and obj -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1552749}, "macro.datavault4dbt.is_expression": {"unique_id": "macro.datavault4dbt.is_expression", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "name": "is_expression", "macro_sql": "{%- macro is_expression(obj) -%}\n\n    {%- if obj is string -%}\n        {%- if (obj | first == \"'\" and obj | last == \"'\") or (\"(\" in obj and \")\" in obj) or \"::\" in obj -%}\n            {%- do return(true) -%}\n        {%- else -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1563945}, "macro.datavault4dbt.is_attribute": {"unique_id": "macro.datavault4dbt.is_attribute", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "name": "is_attribute", "macro_sql": "{%- macro is_attribute(obj) -%}\n\n{%- if obj is not none and obj is string and obj -%}\n\n        {%- if obj | first == \"!\" -%}\n        \n            {{- return(false) -}}\n        \n        {%- else -%}\n        \n            {%- if datavault4dbt.is_expression(obj) -%}\n            \n                {{- return(false) -}}\n\n            {%- else -%}\n\n                {{- return(true) -}}\n\n            {%- endif -%}\n\n        {%- endif -%}\n    {%- else -%}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid 'obj' object provided to 'is_attribute' check. Must be a string and not null.\") }}\n        {%- endif %}\n    {%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1576304}, "macro.datavault4dbt.replace_standard": {"unique_id": "macro.datavault4dbt.replace_standard", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/internal/helpers/replace_standard.sql", "original_file_path": "macros/internal/helpers/replace_standard.sql", "name": "replace_standard", "macro_sql": "{%- macro replace_standard(input_variable, global_variable, default_value) -%}\n\n{%- if input_variable is none or input_variable == \"\" -%}\n\n    {%- set input_variable = var(global_variable, default_value) -%}\n\n{%- endif -%}\n\n{{ return(input_variable) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1588016}, "macro.datavault4dbt.ma_sat_v0": {"unique_id": "macro.datavault4dbt.ma_sat_v0", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/ma_sat_v0.sql", "original_file_path": "macros/tables/ma_sat_v0.sql", "name": "ma_sat_v0", "macro_sql": "\n\n{%- macro ma_sat_v0(parent_hashkey, src_hashdiff, src_ma_key, src_payload, source_model, src_ldts=none, src_rsrc=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ adapter.dispatch('ma_sat_v0', 'datavault4dbt')(parent_hashkey=parent_hashkey,\n                                         src_hashdiff=src_hashdiff,\n                                         src_ma_key=src_ma_key,\n                                         src_payload=src_payload,\n                                         src_ldts=src_ldts,\n                                         src_rsrc=src_rsrc,\n                                         source_model=source_model) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__ma_sat_v0"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1614878}, "macro.datavault4dbt.sat_v1": {"unique_id": "macro.datavault4dbt.sat_v1", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/sat_v1.sql", "original_file_path": "macros/tables/sat_v1.sql", "name": "sat_v1", "macro_sql": "\n\n{%- macro sat_v1(sat_v0, hashkey, hashdiff, src_ldts=none, src_rsrc=none, ledts_alias=none, add_is_current_flag=false) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts, src_rsrc, and ledts_alias are not set. #}\n    \n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n    {%- set src_ledts = datavault4dbt.replace_standard(src_ledts, 'datavault4dbt.ledts_alias', 'ledts') -%}\n\n    {{ adapter.dispatch('sat_v1', 'datavault4dbt')(sat_v0=sat_v0,\n                                         hashkey=hashkey,\n                                         hashdiff=hashdiff,\n                                         src_ldts=src_ldts,\n                                         src_rsrc=src_rsrc,\n                                         ledts_alias=ledts_alias,\n                                         add_is_current_flag=add_is_current_flag) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__sat_v1"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.164331}, "macro.datavault4dbt.link": {"unique_id": "macro.datavault4dbt.link", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/link.sql", "original_file_path": "macros/tables/link.sql", "name": "link", "macro_sql": "\n\n{%- macro link(link_hashkey, foreign_hashkeys, source_models, src_ldts=none, src_rsrc=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{- adapter.dispatch('link', 'datavault4dbt')(link_hashkey=link_hashkey, foreign_hashkeys=foreign_hashkeys,\n                                             src_ldts=src_ldts, src_rsrc=src_rsrc,\n                                             source_models=source_models) -}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__link"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1686087}, "macro.datavault4dbt.control_snap_v1": {"unique_id": "macro.datavault4dbt.control_snap_v1", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/control_snap_v1.sql", "original_file_path": "macros/tables/control_snap_v1.sql", "name": "control_snap_v1", "macro_sql": "\n\n{%- macro control_snap_v1(control_snap_v0, log_logic=none, sdts_alias=none) -%}\n\n{%- set sdts_alias = datavault4dbt.replace_standard(sdts_alias, 'datavault4dbt.sdts_alias', 'sdts') -%}\n\n{{ adapter.dispatch('control_snap_v1', 'datavault4dbt')(control_snap_v0=control_snap_v0,\n                                                                    log_logic=log_logic,\n                                                                    sdts_alias=sdts_alias) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__control_snap_v1"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1711352}, "macro.datavault4dbt.nh_link": {"unique_id": "macro.datavault4dbt.nh_link", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/nh_link.sql", "original_file_path": "macros/tables/nh_link.sql", "name": "nh_link", "macro_sql": "\n\n{%- macro nh_link(link_hashkey, foreign_hashkeys, payload, source_models, src_ldts=none, src_rsrc=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{- adapter.dispatch('nh_link', 'datavault4dbt')(link_hashkey=link_hashkey,\n                                                        payload=payload,\n                                                        foreign_hashkeys=foreign_hashkeys,\n                                                        src_ldts=src_ldts,\n                                                        src_rsrc=src_rsrc,\n                                                        source_models=source_models) -}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__nh_link"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1762428}, "macro.datavault4dbt.ma_sat_v1": {"unique_id": "macro.datavault4dbt.ma_sat_v1", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/ma_sat_v1.sql", "original_file_path": "macros/tables/ma_sat_v1.sql", "name": "ma_sat_v1", "macro_sql": "\n\n{%- macro ma_sat_v1(sat_v0, hashkey, hashdiff, ma_attribute, src_ldts=none, src_rsrc=none, ledts_alias=none, add_is_current_flag=false) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts, src_rsrc, and ledts_alias are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n    {%- set ledts_alias = datavault4dbt.replace_standard(ledts_alias, 'datavault4dbt.ledts_alias', 'ledts') -%}\n\n    {{ adapter.dispatch('ma_sat_v1', 'datavault4dbt')(sat_v0=sat_v0,\n                                                      hashkey=hashkey,\n                                                      hashdiff=hashdiff,\n                                                      ma_attribute=ma_attribute,\n                                                      src_ldts=src_ldts,\n                                                      src_rsrc=src_rsrc,\n                                                      ledts_alias=ledts_alias,\n                                                      add_is_current_flag=add_is_current_flag) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__ma_sat_v1"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1799169}, "macro.datavault4dbt.control_snap_v0": {"unique_id": "macro.datavault4dbt.control_snap_v0", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/control_snap_v0.sql", "original_file_path": "macros/tables/control_snap_v0.sql", "name": "control_snap_v0", "macro_sql": "\n\n{%- macro control_snap_v0(start_date, daily_snapshot_time, sdts_alias=none) -%}\n    {%- set sdts_alias = datavault4dbt.replace_standard(sdts_alias, 'datavault4dbt.sdts_alias', 'sdts') -%}\n\n    {{ adapter.dispatch('control_snap_v0', 'datavault4dbt')(start_date=start_date,\n                                                                        daily_snapshot_time=daily_snapshot_time,\n                                                                        sdts_alias=sdts_alias) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__control_snap_v0"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1819863}, "macro.datavault4dbt.hub": {"unique_id": "macro.datavault4dbt.hub", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/hub.sql", "original_file_path": "macros/tables/hub.sql", "name": "hub", "macro_sql": "\n\n\n{%- macro hub(hashkey, business_keys, source_models, src_ldts=none, src_rsrc=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ return(adapter.dispatch('hub', 'datavault4dbt')(hashkey=hashkey,\n                                                            business_keys=business_keys,\n                                                            src_ldts=src_ldts,\n                                                            src_rsrc=src_rsrc,\n                                                            source_models=source_models)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__hub"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1863208}, "macro.datavault4dbt.n_sat": {"unique_id": "macro.datavault4dbt.n_sat", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/n_sat.sql", "original_file_path": "macros/tables/n_sat.sql", "name": "n_sat", "macro_sql": "{%- macro n_sat(src_pk, src_payload, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- adapter.dispatch('n_sat', 'datavault4dbt')(src_pk=src_pk, src_payload=src_payload, \n                                            src_eff=src_eff, src_ldts=src_ldts,\n                                            src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__n_sat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1899319}, "macro.datavault4dbt.default__n_sat": {"unique_id": "macro.datavault4dbt.default__n_sat", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/n_sat.sql", "original_file_path": "macros/tables/n_sat.sql", "name": "default__n_sat", "macro_sql": "\n\n{%- macro default__n_sat(src_pk, src_payload, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- datavault4dbt.check_required_parameters(src_pk=src_pk, src_payload=src_payload,\n                                       src_ldts=src_ldts, src_source=src_source,\n                                       source_model=source_model) -}}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_pk, src_ldts, src_source, src_payload, src_eff]) -%}\n{%- set rank_cols = datavault4dbt.expand_column_list(columns=[src_pk, src_ldts]) -%}\n{%- set pk_cols = datavault4dbt.expand_column_list(columns=[src_pk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ datavault4dbt.prefix(source_cols_with_rank, 'a', alias_target='source') }}\n    {%- else %}\n    SELECT {{ datavault4dbt.prefix(source_cols, 'a', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS a\n    WHERE {{ datavault4dbt.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    AND __PERIOD_FILTER__\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\n    AND __RANK_FILTER__\n    {% endif %}\n),\n\n{%- if datavault4dbt.is_any_incremental() %}\n\nlatest_records AS (\n\n    SELECT {{ datavault4dbt.prefix(rank_cols, 'a', alias_target='target') }}\n    FROM (\n        SELECT {{ datavault4dbt.prefix(rank_cols, 'current_records', alias_target='target') }},\n            RANK() OVER (\n                PARTITION BY {{ datavault4dbt.prefix([src_pk], 'current_records') }}\n                ORDER BY {{ datavault4dbt.prefix([src_ldts], 'current_records') }} DESC\n            ) AS rank\n        FROM {{ this }} AS current_records\n            JOIN (\n                SELECT DISTINCT {{ datavault4dbt.prefix([src_pk], 'source_data') }}\n                FROM source_data\n            ) AS source_records\n                ON {{ datavault4dbt.multikey(src_pk, prefix=['current_records', 'source_records'], condition='=') }}\n    ) AS a\n    WHERE a.rank = 1\n),\n\n{%- endif %}\n\nrecords_to_insert AS (\n    SELECT DISTINCT {{ datavault4dbt.alias_all(source_cols, 'stage') }}\n    FROM source_data AS stage\n    {%- if datavault4dbt.is_any_incremental() %}\n        LEFT JOIN latest_records\n            ON {{ datavault4dbt.multikey(src_pk, prefix=['latest_records','stage'], condition='=') }}\n            WHERE {{ datavault4dbt.prefix([src_pk], 'latest_records', alias_target='target') }} IS NULL\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.check_required_parameters", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.prefix", "macro.datavault4dbt.multikey", "macro.datavault4dbt.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1951437}, "macro.datavault4dbt.rec_track_sat": {"unique_id": "macro.datavault4dbt.rec_track_sat", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/rec_track_sat.sql", "original_file_path": "macros/tables/rec_track_sat.sql", "name": "rec_track_sat", "macro_sql": "\n\n{%- macro rec_track_sat(tracked_hashkey, source_models, src_ldts=none, src_rsrc=none, src_stg=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n    {%- set src_stg = datavault4dbt.replace_standard(src_stg, 'datavault4dbt.stg_alias', 'stg') -%}\n\n    {{ return(adapter.dispatch('rec_track_sat', 'datavault4dbt')(tracked_hashkey=tracked_hashkey,\n                                                                      source_models=source_models,\n                                                                      src_ldts=src_ldts,\n                                                                      src_rsrc=src_rsrc,\n                                                                      src_stg=src_stg)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__rec_track_sat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.1996999}, "macro.datavault4dbt.sat_v0": {"unique_id": "macro.datavault4dbt.sat_v0", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/sat_v0.sql", "original_file_path": "macros/tables/sat_v0.sql", "name": "sat_v0", "macro_sql": "\n\n{%- macro sat_v0(parent_hashkey, src_hashdiff, src_payload, source_model, src_ldts=none, src_rsrc=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts, src_rsrc, and ledts_alias are not set. #}\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ adapter.dispatch('sat_v0', 'datavault4dbt')(parent_hashkey=parent_hashkey,\n                                         src_hashdiff=src_hashdiff,\n                                         src_payload=src_payload,\n                                         src_ldts=src_ldts,\n                                         src_rsrc=src_rsrc,\n                                         source_model=source_model) \n    }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__sat_v0"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.2023234}, "macro.datavault4dbt.pit": {"unique_id": "macro.datavault4dbt.pit", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/pit.sql", "original_file_path": "macros/tables/pit.sql", "name": "pit", "macro_sql": "\n\n\n\n{%- macro pit(tracked_entity, hashkey, sat_names, snapshot_relation, dimension_key, snapshot_trigger_column=none, ldts=none, custom_rsrc=none, ledts=none, sdts=none, pit_type=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if ldts, sdts and ledts are not set. #}\n\n    {%- set ldts = datavault4dbt.replace_standard(ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set ledts = datavault4dbt.replace_standard(ledts, 'datavault4dbt.ledts_alias', 'ledts') -%}\n    {%- set sdts = datavault4dbt.replace_standard(sdts, 'datavault4dbt.sdts_alias', 'sdts') -%}\n\n    {{ return(adapter.dispatch('pit','datavault4dbt')(pit_type=pit_type,\n                                                        tracked_entity=tracked_entity,\n                                                        hashkey=hashkey,\n                                                        sat_names=sat_names,\n                                                        ldts=ldts,\n                                                        sdts=sdts,\n                                                        custom_rsrc=custom_rsrc,\n                                                        ledts=ledts,\n                                                        snapshot_relation=snapshot_relation,\n                                                        snapshot_trigger_column=snapshot_trigger_column,\n                                                        dimension_key=dimension_key)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__pit"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.2058136}, "macro.datavault4dbt.nh_sat": {"unique_id": "macro.datavault4dbt.nh_sat", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/nh_sat.sql", "original_file_path": "macros/tables/nh_sat.sql", "name": "nh_sat", "macro_sql": "\n\n{%- macro nh_sat(parent_hashkey, src_payload, source_model, src_ldts=none, src_rsrc=none) -%}\n\n    {# Applying the default aliases as stored inside the global variables, if src_ldts and src_rsrc are not set. #}\n\n    {%- set src_ldts = datavault4dbt.replace_standard(src_ldts, 'datavault4dbt.ldts_alias', 'ldts') -%}\n    {%- set src_rsrc = datavault4dbt.replace_standard(src_rsrc, 'datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n    {{ adapter.dispatch('nh_sat', 'datavault4dbt')(parent_hashkey=parent_hashkey,\n                                         src_payload=src_payload,\n                                         src_ldts=src_ldts,\n                                         src_rsrc=src_rsrc,\n                                         source_model=source_model) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.replace_standard", "macro.datavault4dbt.snowflake__nh_sat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.2080364}, "macro.datavault4dbt.default__ma_sat_v0": {"unique_id": "macro.datavault4dbt.default__ma_sat_v0", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/bigquery/ma_sat_v0.sql", "original_file_path": "macros/tables/bigquery/ma_sat_v0.sql", "name": "default__ma_sat_v0", "macro_sql": "{%- macro default__ma_sat_v0(parent_hashkey, src_hashdiff, src_ma_key, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[parent_hashkey, src_hashdiff, src_ldts, src_rsrc, src_ma_key, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ src_hashdiff }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{# Get a list of all distinct hashdiffs that exist for each parent_hashkey. #}\ndeduped_row_hashdiff AS (\n\n  SELECT \n    {{ parent_hashkey }},\n    {{ src_ldts }},\n    {{ src_hashdiff }}\n  FROM source_data\n  QUALIFY CASE\n            WHEN {{ src_hashdiff }} = LAG({{ src_hashdiff }}) OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n          END\n),\n\n{# Dedupe the source data regarding non-delta groups. #}\ndeduped_rows AS (\n\n  SELECT \n    {{ datavault4dbt.alias_all(columns=source_cols, prefix='source_data') }}\n  FROM source_data\n  INNER JOIN deduped_row_hashdiff\n    ON {{ datavault4dbt.multikey(parent_hashkey, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(src_ldts, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(src_hashdiff, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT\n        {{ datavault4dbt.alias_all(columns=source_cols, prefix='deduped_rows') }}\n    FROM deduped_rows\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }}\n            AND {{ datavault4dbt.multikey(src_hashdiff, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }} \n            )\n    {%- endif %}\n\n    )\n\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.214059}, "macro.datavault4dbt.default__sat_v1": {"unique_id": "macro.datavault4dbt.default__sat_v1", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/bigquery/sat_v1.sql", "original_file_path": "macros/tables/bigquery/sat_v1.sql", "name": "default__sat_v1", "macro_sql": "{%- macro default__sat_v1(sat_v0, hashkey, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = [hashkey, hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD(TIMESTAMP_SUB({{ src_ldts }}, INTERVAL 1 MICROSECOND)) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) as {{ ledts_alias }},\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {{ hashkey }},\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n        THEN TRUE\n        ELSE FALSE\n        END AS {{ is_current_col_alias }},\n    {% endif -%}\n    {{ datavault4dbt.print_list(source_columns_to_select) }}\nFROM end_dated_source\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.2186735}, "macro.datavault4dbt.default__link": {"unique_id": "macro.datavault4dbt.default__link", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/bigquery/link.sql", "original_file_path": "macros/tables/bigquery/link.sql", "name": "default__link", "macro_sql": "{%- macro default__link(link_hashkey, foreign_hashkeys, source_models, src_ldts, src_rsrc) -%}\n\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# If no specific link_hk and fk_columns are defined for each source, we apply the values set in the link_hashkey and foreign_hashkeys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- for source_model in source_models.keys() %}\n\n    {%- if 'fk_columns' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'fk_columns': foreign_hashkeys}) -%}\n\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'link_hk': link_hashkey}) -%}\n\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n\n        {%- set ns.has_rsrc_static_defined = false -%}\n\n    {%- else -%}\n\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{% endfor %}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models.keys() %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n\n            {%- set source_number = loop.index | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n            {%- set source_in_target = true -%}\n\n            {% if not rsrc_static_result %}\n                {%- set source_in_target = false -%}\n            {% endif %}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models.keys() | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models.keys() %}\n            {%- set source_number = loop.index | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models.keys() %}\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = loop.index | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = source_models[source_model]['rsrc_static'] %}\n    {%- endif -%}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ source_models[source_model]['link_hk'] }} AS {{ link_hashkey }},\n            {% for fk in source_models[source_model]['fk_columns']|list -%}\n            {{ fk }},\n            {% endfor -%}\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model|string) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_model] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n        {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models.keys() -%}\n\n    {%- set source_number = loop.index | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_models[source_model]['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n    {# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {# Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ link_hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.2367349}, "macro.datavault4dbt.default__control_snap_v1": {"unique_id": "macro.datavault4dbt.default__control_snap_v1", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/bigquery/control_snap_v1.sql", "original_file_path": "macros/tables/bigquery/control_snap_v1.sql", "name": "default__control_snap_v1", "macro_sql": "{%- macro default__control_snap_v1(control_snap_v0, log_logic, sdts_alias) -%}\n\n{# Sample intervals\n   {%-set log_logic = {'daily': {'duration': 3,\n                                'unit': 'MONTH',\n                                'forever': 'FALSE'},\n                      'weekly': {'duration': 1,\n                                 'unit': 'YEAR'},\n                      'monthly': {'duration': 5,\n                                  'unit': 'YEAR'},\n                      'yearly': {'forever': 'TRUE'} } %} \n#}\n\n{%- if log_logic is not none %}\n    {%- for interval in log_logic.keys() %}\n        {%- if 'forever' not in log_logic[interval].keys() -%}\n            {% do log_logic[interval].update({'forever': 'FALSE'}) %}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endif %}\n\n{%- set v0_relation = ref(control_snap_v0) -%}\n{%- set ns = namespace(forever_status=FALSE) %}\n\n{%- set snapshot_trigger_column = var('datavault4dbt.snapshot_trigger_column', 'is_active') -%}\n\nWITH\n\nlatest_row AS (\n\n    SELECT\n        {{ sdts_alias }}\n    FROM {{ v0_relation }}\n    ORDER BY {{ sdts_alias }} DESC\n    LIMIT 1\n\n),\n\nvirtual_logic AS (\n\n    SELECT\n        c.{{ sdts_alias }},\n        c.replacement_sdts,\n        c.force_active,\n        {%- if log_logic is none %}\n        TRUE as {{ snapshot_trigger_column }},\n        {%- else %}\n        CASE\n            WHEN\n            {% if 'daily' in log_logic.keys() %}\n                {%- if log_logic['daily']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (1=1)\n                {%- else %}\n\n                    {%- set daily_duration = log_logic['daily']['duration'] -%}\n                    {%- set daily_unit = log_logic['daily']['unit'] -%}\n\n                    (EXTRACT(DATE FROM c.{{ sdts_alias }}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL {{ daily_duration }} {{ daily_unit }}) AND CURRENT_DATE())\n                {%- endif -%}\n            {%- endif %}\n\n            {%- if 'weekly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['weekly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_weekly = TRUE)\n                {%- else %}\n\n                    {%- set weekly_duration = log_logic['weekly']['duration'] -%}\n                    {%- set weekly_unit = log_logic['weekly']['unit'] -%}\n\n                    (\n                (EXTRACT(DATE FROM c.{{ sdts_alias }}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL {{ weekly_duration }} {{ weekly_unit }}) AND CURRENT_DATE() )\n                AND\n                (c.is_weekly = TRUE)\n            )\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'monthly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['monthly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_monthly = TRUE)\n                {%- else %}\n\n                    {%- set monthly_duration = log_logic['monthly']['duration'] -%}\n                    {%- set monthly_unit = log_logic['monthly']['unit'] -%}\n\n                    (\n                (EXTRACT(DATE FROM c.{{ sdts_alias }}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL {{ monthly_duration }} {{ monthly_unit }}) AND CURRENT_DATE() )\n                AND\n                (c.is_monthly = TRUE)\n            )\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'yearly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['yearly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_yearly = TRUE)\n                {%- else %}\n\n                    {%- set yearly_duration = log_logic['yearly']['duration'] -%}\n                    {%- set yearly_unit = log_logic['yearly']['unit'] -%}\n\n                    (\n                (EXTRACT(DATE FROM c.{{ sdts_alias }}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL {{ yearly_duration }} {{ yearly_unit }}) AND CURRENT_DATE() )\n                AND\n                (c.is_yearly = TRUE)\n            )\n                {%- endif -%}\n            {% endif %}\n            THEN TRUE\n            ELSE FALSE\n\n        END AS {{ snapshot_trigger_column }},\n        {%- endif %}\n\n        CASE\n            WHEN l.{{ sdts_alias }} IS NULL THEN FALSE\n            ELSE TRUE\n        END AS is_latest,\n\n        c.caption,\n        c.is_hourly,\n        c.is_daily,\n        c.is_weekly,\n        c.is_monthly,\n        c.is_yearly,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE()) THEN TRUE\n            ELSE FALSE\n        END AS is_current_year,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE())-1 THEN TRUE\n            ELSE FALSE\n        END AS is_last_year,\n        CASE\n            WHEN EXTRACT(DATE FROM c.{{ sdts_alias }}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) AND CURRENT_DATE() THEN TRUE\n            ELSE FALSE\n        END AS is_rolling_year,\n        CASE\n            WHEN EXTRACT(DATE FROM c.{{ sdts_alias }}) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) THEN TRUE\n            ELSE FALSE\n        END AS is_last_rolling_year,\n        c.comment\n    FROM {{ v0_relation }} c\n    LEFT JOIN latest_row l\n        ON c.{{ sdts_alias }} = l.{{ sdts_alias }}\n\n),\n\nactive_logic_combined AS (\n\n    SELECT \n        {{ sdts_alias }},\n        replacement_sdts,\n        CASE\n            WHEN force_active AND {{ snapshot_trigger_column }} THEN TRUE\n            WHEN NOT force_active OR NOT {{ snapshot_trigger_column }} THEN FALSE\n        END AS {{ snapshot_trigger_column }},\n        is_latest, \n        caption,\n        is_hourly,\n        is_daily,\n        is_weekly,\n        is_monthly,\n        is_yearly,\n        is_current_year,\n        is_last_year,\n        is_rolling_year,\n        is_last_rolling_year,\n        comment\n    FROM virtual_logic\n\n)\n\nSELECT * FROM active_logic_combined\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.2555995}, "macro.datavault4dbt.default__nh_link": {"unique_id": "macro.datavault4dbt.default__nh_link", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/bigquery/nh_link.sql", "original_file_path": "macros/tables/bigquery/nh_link.sql", "name": "default__nh_link", "macro_sql": "{%- macro default__nh_link(link_hashkey, foreign_hashkeys, payload, source_models, src_ldts, src_rsrc) -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# If no specific link_hk, fk_columns, or payload are defined for each source, we apply the values set in the link_hashkey, foreign_hashkeys, and payload variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- for source_model in source_models.keys() %}\n\n    {%- if 'fk_columns' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'fk_columns': foreign_hashkeys}) -%}\n\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'link_hk': link_hashkey}) -%}\n\n    {%- endif -%}\n\n    {%- if 'payload' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'payload': payload}) -%}\n\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n\n        {%- set ns.has_rsrc_static_defined = false -%}\n\n    {%- else -%}\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n\n{% endfor %}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] + payload -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() -%}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models.keys() %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n\n            {%- set source_number = loop.index | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n            {%- set source_in_target = true -%}\n\n            {% if not rsrc_static_result %}\n                {%- set source_in_target = false -%}\n            {% endif %}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models.keys() | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                nh_link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models.keys() %}\n            {%- set source_number = loop.index | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{%- for source_model in source_models.keys() %}\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = loop.index | string -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = source_models[source_model]['rsrc_static'] %}\n    {%- endif -%}\n\nsrc_new_{{ source_number }} AS (\n\n    SELECT\n        {{ source_models[source_model]['link_hk'] }} AS {{ link_hashkey }},\n\n        {% for fk in source_models[source_model]['fk_columns']|list %}\n            {{ fk }},\n        {%- endfor %}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {{ datavault4dbt.print_list(source_models[source_model]['payload']) | indent(3) }}\n\n    FROM {{ ref(source_model|string) }} src\n    {# If the model is incremental and all sources has rsrc_static defined and valid and the source was already included before in the target transactional link #}\n    {# then an inner join is performed on the CTE for the maximum load date timestamp per record source static to get the records\n    that match any of the rsrc_static present in it #}\n    {# if there are records in the source with a newer load date time stamp than the ones present in the target, those will be selected to be inserted later #}\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_model] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models.keys() -%}\n\n    {%- set source_number = loop.index | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n\n        {% for fk in source_models[source_model]['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {% for col in source_models[source_model]['payload']|list %}\n            {{ col }} AS {{ payload[loop.index - 1] }}\n            {%- if not loop.last %}, {%- endif %}\n        {% endfor -%}\n\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n{# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n{# Select everything from the previous CTE, if its incremental then filter for hashkeys that are not already in the link. #}\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ link_hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.274445}, "macro.datavault4dbt.default__ma_sat_v1": {"unique_id": "macro.datavault4dbt.default__ma_sat_v1", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/bigquery/ma_sat_v1.sql", "original_file_path": "macros/tables/bigquery/ma_sat_v1.sql", "name": "default__ma_sat_v1", "macro_sql": "{%- macro default__ma_sat_v1(sat_v0, hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = datavault4dbt.expand_column_list(columns=[hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc]) -%}\n{%- set ma_attributes = datavault4dbt.expand_column_list(columns=[ma_attribute]) -%}\n\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Getting everything from the underlying v0 satellite. #}\nsource_satellite AS (\n\n    SELECT src.*\n    FROM {{ source_relation }} as src\n\n),\n\n{# Selecting all distinct loads per hashkey. #}\ndistinct_hk_ldts AS (\n\n    SELECT DISTINCT\n        {{ hashkey }},\n        {{ src_ldts }}\n    FROM source_satellite\n\n),\n\n{# End-dating each ldts for each hashkey, based on earlier ldts per hashkey. #}\nend_dated_loads AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ src_ldts }},\n        COALESCE(LEAD(TIMESTAMP_SUB({{ src_ldts }}, INTERVAL 1 MICROSECOND)) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format,end_of_all_times) }}) as {{ ledts_alias }}\n    FROM distinct_hk_ldts\n\n),\n\n{# End-date each source record, based on the end-date for each load. #}\nend_dated_source AS (\n\n    SELECT\n        src.{{ hashkey }},\n        src.{{ hashdiff }},\n        src.{{ src_rsrc }},\n        src.{{ src_ldts }},\n        edl.{{ ledts_alias }},\n        {%- if add_is_current_flag %}\n            CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            THEN TRUE\n            ELSE FALSE\n            END AS {{ is_current_col_alias }},\n        {% endif %}\n        {{- datavault4dbt.print_list(ma_attributes, indent=10, src_alias='src') }},\n        {{- datavault4dbt.print_list(source_columns_to_select, indent=10, src_alias='src') }}\n    FROM source_satellite AS src\n    LEFT JOIN end_dated_loads edl\n        ON src.{{ hashkey }} = edl.{{ hashkey }}\n        AND src.{{ src_ldts }} = edl.{{ src_ldts }}\n\n)\n\nSELECT * FROM end_dated_source\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.279616}, "macro.datavault4dbt.default__control_snap_v0": {"unique_id": "macro.datavault4dbt.default__control_snap_v0", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/bigquery/control_snap_v0.sql", "original_file_path": "macros/tables/bigquery/control_snap_v0.sql", "name": "default__control_snap_v0", "macro_sql": "{%- macro default__control_snap_v0(start_date, daily_snapshot_time, sdts_alias) -%}\n\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if not datavault4dbt.is_something(sdts_alias) -%}\n    {%- set sdts_alias = var('datavault4dbt.sdts_alias', 'sdts') -%}\n{%- endif -%}\n\nWITH\n\ninitial_timestamps AS (\n\n    SELECT sdts\n    FROM\n        UNNEST(GENERATE_TIMESTAMP_ARRAY(\n            TIMESTAMP_ADD(\n                TIMESTAMP_ADD(\n                    TIMESTAMP(PARSE_DATE('%Y-%m-%d', '{{ start_date }}')),\n                INTERVAL EXTRACT(HOUR FROM TIME '{{ daily_snapshot_time }}') HOUR),\n            INTERVAL EXTRACT(MINUTE FROM TIME '{{ daily_snapshot_time }}') MINUTE),\n            TIMESTAMP_ADD(\n                TIMESTAMP_ADD(\n                    TIMESTAMP_TRUNC(CURRENT_TIMESTAMP(), DAY),\n                INTERVAL EXTRACT(HOUR FROM TIME '{{ daily_snapshot_time }}') HOUR),\n            INTERVAL EXTRACT(MINUTE FROM TIME '{{ daily_snapshot_time }}') MINUTE),\n        INTERVAL 1 DAY)) AS sdts\n\n    {%- if is_incremental() %}\n    WHERE sdts > (SELECT MAX({{ sdts_alias }}) FROM {{ this }})\n    {%- endif -%}\n\n),\n\nenriched_timestamps AS (\n\n    SELECT\n        sdts as {{ sdts_alias }},\n        TRUE as force_active,\n        sdts as replacement_sdts,\n        CONCAT(\"Snapshot \", DATE(sdts)) as caption,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END as is_hourly,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 AND EXTRACT(HOUR FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END as is_daily,\n        CASE\n            WHEN EXTRACT(DAYOFWEEK FROM  sdts) = 2 THEN TRUE\n            ELSE FALSE\n        END as is_weekly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END as is_monthly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 AND EXTRACT(MONTH FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END as is_yearly,\n        NULL as comment\n    FROM initial_timestamps\n\n)\n\nSELECT * FROM enriched_timestamps\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.2826347}, "macro.datavault4dbt.default__hub": {"unique_id": "macro.datavault4dbt.default__hub", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/bigquery/hub.sql", "original_file_path": "macros/tables/bigquery/hub.sql", "name": "default__hub", "macro_sql": "{%- macro default__hub(hashkey, business_keys, src_ldts, src_rsrc, source_models) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{# Select the Business Key column from the first source model definition provided in the hub model and put them in an array. #}\n{%- set business_keys = datavault4dbt.expand_column_list(columns=[business_keys]) -%}\n\n{# If no specific bk_columns is defined for each source, we apply the values set in the business_keys variable. #}\n{# If no specific hk_column is defined for each source, we apply the values set in the hashkey variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- for source_model in source_models.keys() -%}\n\n    {%- if 'hk_column' not in source_models[source_model].keys() -%}\n        {%- do source_models[source_model].update({'hk_column': hashkey}) -%}\n    {%- endif -%}\n\n    {%- if 'bk_columns' in source_models[source_model].keys() -%}\n        {%- set bk_column_input = source_models[source_model]['bk_columns'] -%}\n\n        {%- if not (bk_column_input is iterable and bk_column_input is not string) -%}\n            {%- set bk_column_input = [bk_column_input] -%}\n        {%- endif -%}\n\n        {%- do source_models[source_model].update({'bk_columns': bk_column_input}) -%}\n    {%- elif not datavault4dbt.is_list(bk_column_input) -%}\n        {%- set bk_list = datavault4dbt.expand_column_list(columns=[bk_column_input]) -%}\n        {%- do source_models[source_model].update({'bk_columns': bk_list}) -%}\n    {%- else -%}{%- do source_models[source_model].update({'bk_columns': business_keys}) -%}\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n        {%- set ns.has_rsrc_static_defined = false -%}\n    {%- else -%}\n\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- endfor -%}\n\n{%- set final_columns_to_select = [hashkey] + business_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target hashkeys out of the existing hub for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n            {{ hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models.keys() %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = loop.index | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n            {%- set source_in_target = true -%}\n\n            {% if not rsrc_static_result %}\n                {%- set source_in_target = false -%}\n            {% endif %}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models.keys() | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models.keys() %}\n            {%- set source_number = loop.index | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models.keys() %}\n\n    {%- set source_number = loop.index | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n    {%- endif -%}\n\n    {%- if 'hk_column' not in source_models[source_model].keys() %}\n        {%- set hk_column = hashkey -%}\n    {%- else -%}\n        {%- set hk_column = source_models[source_model]['hk_column'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ hk_column }} AS {{ hashkey }},\n            {% for bk in source_models[source_model]['bk_columns'] -%}\n            {{ bk }},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_model] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models.keys() -%}\n\n    {%- set source_number = loop.index | string -%}\n\n    SELECT\n        {{ hashkey }},\n\n        {% for bk in source_models[source_model]['bk_columns'] -%}\n            {{ bk }} AS {{ business_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.3032784}, "macro.datavault4dbt.default__rec_track_sat": {"unique_id": "macro.datavault4dbt.default__rec_track_sat", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/bigquery/rec_track_sat.sql", "original_file_path": "macros/tables/bigquery/rec_track_sat.sql", "name": "default__rec_track_sat", "macro_sql": "{%- macro default__rec_track_sat(tracked_hashkey, source_models, src_ldts, src_rsrc, src_stg) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the unknown and error ghost record value for record source column #}\n{%- set rsrc_unknown = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') -%}\n{%- set rsrc_error = var('datavault4dbt.default_error_rsrc', 'ERROR') -%}\n\n{# Setting the rsrc and stg_alias default datatype and length #}\n{%- set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') -%}\n{%- set stg_default_dtype = var('datavault4dbt.stg_default_dtype', 'STRING') -%}\n{%- set ns = namespace(last_cte = '', source_included_before = {},  source_models_rsrc_dict={},  has_rsrc_static_defined=true) -%}\n\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n\n{# If no specific hk_column is defined for each source, we apply the values set in the tracked_hashkey input variable. #}\n{# If no rsrc_static parameter is defined in a source model then the record source performance look up wont be executed  #}\n{%- for source_model in source_models.keys() %}\n\n    {%- if 'hk_column' not in source_models[source_model].keys() -%}\n        {%- do source_models[source_model].update({'hk_column': tracked_hashkey}) -%}\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n        {%- set ns.has_rsrc_static_defined = false -%}\n    {%- else -%}\n\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{% endfor %}\n\n{%- set final_columns_to_select = [tracked_hashkey] + [src_ldts] + [src_rsrc] + [src_stg] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n\n    distinct_concated_target AS (\n        {%- set concat_columns = [tracked_hashkey, src_ldts, src_rsrc] -%}\n        {{ \"\\n\" }}\n        SELECT\n        {{ datavault4dbt.concat_ws(concat_columns) }} as concat\n        FROM {{ this }}\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        rsrc_static_unionized AS (\n        {% for source_model in source_models.keys() %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = loop.index | string -%}\n            {%- set hk_column = source_models[source_model]['hk_column'] -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            {{ rsrc_static_query_source }}  \n\n            {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n            {%- set source_in_target = true -%}\n\n            {% if not rsrc_static_result %}\n                {%- set source_in_target = false -%}\n            {% endif %}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n            {# Unionize over all sources #}\n            {%- if not loop.last %}\n                UNION ALL \n            {% endif -%}\n\n        {% endfor -%}\n        {%- set ns.last_cte = \"rsrc_static_unionized\" -%}\n        ),\n\n        max_ldts_per_rsrc_static_in_target AS (\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif -%}\n{% endif -%}\n\n{#\n    We deduplicate each source over hashkey + ldts + rsrc_static and if is_incremental only select the rows, where the ldts is later\n    than the latest one in the existing satellite for that rsrc_static. If a source is added to the existing satellite, all deduplicated\n    rows from that source are loaded into the satellite.\n#}\n\n{%- for source_model in source_models.keys() %}\n\n    {%- set source_number = loop.index | string -%}\n    {%- set hk_column = source_models[source_model]['hk_column'] -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n        src_new_{{ source_number }} AS (\n        {%- for rsrc_static in rsrc_statics %}\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST('{{ rsrc_static }}' AS {{ rsrc_default_dtype }} ) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model }}') AS {{ stg_default_dtype }})  AS {{ src_stg }}\n            FROM {{ ref(source_model) }} src\n\n\n            {%- if is_incremental() and ns.source_included_before[source_model] %}\n                INNER JOIN max_ldts_per_rsrc_static_in_target max\n                    ON max.rsrc_static = '{{ rsrc_static }}'\n                WHERE src.{{ src_ldts }} > max.max_ldts\n            {%- endif %}\n\n            {%- if not loop.last %}\n                UNION ALL\n            {% endif -%}\n        {% endfor %}\n\n        ),\n    {%- else -%}\n        src_new_{{ source_number}} AS (\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST({{ src_rsrc }} AS {{ rsrc_default_dtype }}) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model }}') AS {{ stg_default_dtype }}) AS {{ src_stg }}\n            FROM {{ ref(source_model) }} src\n        ),\n    {%- endif -%}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n{% endfor %}\n\n{#\n    If more than one source model is selected, all previously created deduplicated CTEs are unionized.\n#}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n    {% for source_model in source_models.keys() %}\n        {%- set hk_column = source_models[source_model]['hk_column'] -%}\n        {%- set source_number = loop.index | string -%}\n\n        SELECT\n        {{ tracked_hashkey }},\n        {{ src_ldts }},\n        {{ src_rsrc }},\n        {{ src_stg }}\n        FROM src_new_{{ source_number }}\n\n        {%- if not loop.last %}\n        UNION ALL\n        {% endif -%}\n\n    {% endfor %}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif -%}\n\n{#\n    Selecting everything, either from the unionized data, or from the single CTE (if single source). Checking against the existing\n    satellite to only inserts that are not already inserted, if incremental run.\n#}\n\nrecords_to_insert AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }} \n    AND {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}\n    {%- if is_incremental() %}\n        AND {{ datavault4dbt.concat_ws(concat_columns) }} NOT IN (SELECT * FROM distinct_concated_target)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.3207653}, "macro.datavault4dbt.default__sat_v0": {"unique_id": "macro.datavault4dbt.default__sat_v0", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/bigquery/sat_v0.sql", "original_file_path": "macros/tables/bigquery/sat_v0.sql", "name": "default__sat_v0", "macro_sql": "{%- macro default__sat_v0(parent_hashkey, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ src_hashdiff }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each hashkey.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN {{ ns.hdiff_alias }} = LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND deduplicated_numbered_source.rn = 1)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.3274686}, "macro.datavault4dbt.default__pit": {"unique_id": "macro.datavault4dbt.default__pit", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/bigquery/pit.sql", "original_file_path": "macros/tables/bigquery/pit.sql", "name": "default__pit", "macro_sql": "{%- macro default__pit(tracked_entity, hashkey, sat_names, ldts, ledts, sdts, snapshot_relation, dimension_key,snapshot_trigger_column=none, custom_rsrc=none, pit_type=none) -%}\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- set rsrc = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if datavault4dbt.is_something(pit_type) -%}\n    {%- set hashed_cols = [pit_type, datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- else -%}\n    {%- set hashed_cols = [datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- endif -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() %}\n\nexisting_dimension_keys AS (\n\n    SELECT\n        {{ dimension_key }}\n    FROM {{ this }}\n\n),\n\n{%- endif %}\n\npit_records AS (\n\n    SELECT\n        \n        {% if datavault4dbt.is_something(pit_type) -%}\n            {{ datavault4dbt.as_constant(pit_type) }} as type,\n        {%- endif %}\n        {% if datavault4dbt.is_something(custom_rsrc) -%}\n        '{{ custom_rsrc }}' as {{ rsrc }},\n        {%- endif %}\n        {{ datavault4dbt.hash(columns=hashed_cols,\n                    alias=dimension_key,\n                    is_hashdiff=false)   }} ,\n        te.{{ hashkey }},\n        snap.{{ sdts }},\n        {% for satellite in sat_names %}\n            COALESCE({{ satellite }}.{{ hashkey }}, CAST('{{ unknown_key }}' AS {{ hash_dtype }})) AS hk_{{ satellite }},\n            COALESCE({{ satellite }}.{{ ldts }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) AS {{ ldts }}_{{ satellite }}\n            {{- \",\" if not loop.last }}\n        {%- endfor %}\n\n    FROM\n            {{ ref(tracked_entity) }} te\n        FULL OUTER JOIN\n            {{ ref(snapshot_relation) }} snap\n            {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n                ON snap.{{ snapshot_trigger_column }} = true\n            {% else -%}\n                ON 1=1\n            {%- endif %}\n        {% for satellite in sat_names %}\n        {%- set sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n        LEFT JOIN {{ ref(satellite) }}\n            ON\n                {{ satellite }}.{{ hashkey}} = te.{{ hashkey }}\n                {% if ledts|string|lower in sat_columns|map('lower') %}\n                    AND snap.{{ sdts }} BETWEEN {{ satellite }}.{{ ldts }} AND {{ satellite }}.{{ ledts }}\n                {%- else -%}\n                    AND {{ satellite }}.{{ ldts }} > snap.{{ sdts }}\n                {%- endif -%}\n        {% endfor %}\n    {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n        WHERE snap.{{ snapshot_trigger_column }}\n    {%- endif %}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT *\n    FROM pit_records\n    {%- if is_incremental() %}\n    WHERE {{ dimension_key }} NOT IN (SELECT * FROM existing_dimension_keys)\n    {% endif -%}\n\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.datavault4dbt.prefix", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.hash", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.source_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.3393898}, "macro.datavault4dbt.default__nh_sat": {"unique_id": "macro.datavault4dbt.default__nh_sat", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/bigquery/nh_sat.sql", "original_file_path": "macros/tables/bigquery/nh_sat.sql", "name": "default__nh_sat", "macro_sql": "{%- macro default__nh_sat(parent_hashkey, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[parent_hashkey, src_ldts, src_rsrc, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{% if is_incremental() -%}\n{# Get distinct list of hashkeys inside the existing satellite, if incremental. #}\ndistinct_hashkeys AS (\n\n    SELECT DISTINCT\n        {{ parent_hashkey }}\n    FROM {{ this }}\n\n    ),\n\n{%- endif %}\n\n{#\n    Select all records from the source. If incremental, insert only records, where the\n    hashkey is not already in the existing satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM source_data\n    {%- if is_incremental() %}\n    WHERE {{ parent_hashkey }} NOT IN (SELECT * FROM distinct_hashkeys)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.3424459}, "macro.datavault4dbt.exasol__ma_sat_v0": {"unique_id": "macro.datavault4dbt.exasol__ma_sat_v0", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/exasol/ma_sat_v0.sql", "original_file_path": "macros/tables/exasol/ma_sat_v0.sql", "name": "exasol__ma_sat_v0", "macro_sql": "{%- macro exasol__ma_sat_v0(parent_hashkey, src_hashdiff, src_ma_key, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[parent_hashkey, src_hashdiff, src_ldts, src_rsrc, src_ma_key, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ src_hashdiff }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{# Get a list of all distinct hashdiffs that exist for each parent_hashkey. #}\ndeduped_row_hashdiff AS (\n\n  SELECT \n    {{ parent_hashkey }},\n    {{ src_ldts }},\n    {{ src_hashdiff }}\n  FROM source_data\n  QUALIFY CASE\n            WHEN {{ src_hashdiff }} = LAG({{ src_hashdiff }}) OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n          END\n),\n\n{# Dedupe the source data regarding non-delta groups. #}\ndeduped_rows AS (\n\n  SELECT \n    {{ datavault4dbt.alias_all(columns=source_cols, prefix='source_data') }}\n  FROM source_data\n  INNER JOIN deduped_row_hashdiff\n    ON {{ datavault4dbt.multikey(parent_hashkey, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(src_ldts, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(src_hashdiff, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT\n        {{ datavault4dbt.alias_all(columns=source_cols, prefix='deduped_rows') }}\n    FROM deduped_rows\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }}\n            AND {{ datavault4dbt.multikey(src_hashdiff, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }} \n            )\n    {%- endif %}\n\n    )\n\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.3481896}, "macro.datavault4dbt.exasol__sat_v1": {"unique_id": "macro.datavault4dbt.exasol__sat_v1", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/exasol/sat_v1.sql", "original_file_path": "macros/tables/exasol/sat_v1.sql", "name": "exasol__sat_v1", "macro_sql": "{%- macro exasol__sat_v1(sat_v0, hashkey, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = [hashkey, hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD(ADD_SECONDS({{ src_ldts }}, -0.001)) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }}) as {{ ledts_alias }},\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {{ hashkey }},\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }}\n        THEN TRUE\n        ELSE FALSE\n        END AS {{ is_current_col_alias }},\n    {% endif -%}\n    {{ datavault4dbt.print_list(source_columns_to_select) }}\nFROM end_dated_source\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.3523138}, "macro.datavault4dbt.exasol__link": {"unique_id": "macro.datavault4dbt.exasol__link", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/exasol/link.sql", "original_file_path": "macros/tables/exasol/link.sql", "name": "exasol__link", "macro_sql": "{%- macro exasol__link(link_hashkey, foreign_hashkeys, source_models, src_ldts, src_rsrc) -%}\n\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# If no specific link_hk and fk_columns are defined for each source, we apply the values set in the link_hashkey and foreign_hashkeys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- for source_model in source_models.keys() %}\n\n    {%- if 'fk_columns' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'fk_columns': foreign_hashkeys}) -%}\n\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'link_hk': link_hashkey}) -%}\n\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n\n        {%- set ns.has_rsrc_static_defined = false -%}\n\n    {%- else -%}\n\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{% endfor %}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models.keys() %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n\n            {%- set source_number = loop.index | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT {{ this }}.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT {{ this }}.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n            {%- set source_in_target = true -%}\n\n            {% if not rsrc_static_result %}\n                {%- set source_in_target = false -%}\n            {% endif %}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models.keys() | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models.keys() %}\n            {%- set source_number = loop.index | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models.keys() %}\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = loop.index | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = source_models[source_model]['rsrc_static'] %}\n    {%- endif -%}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ source_models[source_model]['link_hk'] }} AS {{ link_hashkey }},\n            {% for fk in source_models[source_model]['fk_columns']|list -%}\n            {{ fk }},\n            {% endfor -%}\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model|string) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_model] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n        {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models.keys() -%}\n\n    {%- set source_number = loop.index | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_models[source_model]['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n    {# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {# Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ link_hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.3707812}, "macro.datavault4dbt.exasol__control_snap_v1": {"unique_id": "macro.datavault4dbt.exasol__control_snap_v1", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/exasol/control_snap_v1.sql", "original_file_path": "macros/tables/exasol/control_snap_v1.sql", "name": "exasol__control_snap_v1", "macro_sql": "{%- macro exasol__control_snap_v1(control_snap_v0, log_logic, sdts_alias) -%}\n\n{# sample log_logic \n   {%-set log_logic = {'daily': {'duration': 3,\n                                'unit': 'MONTH',\n                                'forever': 'FALSE'},\n                      'monthly': {'duration': 5,\n                                  'unit': 'YEAR'},\n                      'yearly': {'duration': 10,\n                                'unit': 'YEAR'} } %} \n\n#}\n\n{%- if log_logic is not none %}\n    {%- for interval in log_logic.keys() %}\n        {%- if 'forever' not in log_logic[interval].keys() -%}\n            {% do log_logic[interval].update({'forever': 'FALSE'}) %}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endif %}\n\n{%- set v0_relation = ref(control_snap_v0) -%}\n{%- set ns = namespace(forever_status=FALSE) %}\n\n{%- set snapshot_trigger_column = var('datavault4dbt.snapshot_trigger_column', 'is_active') -%}\n\nWITH\n\nlatest_row AS (\n\n    SELECT\n        {{ sdts_alias }}\n    FROM {{ v0_relation }}\n    ORDER BY {{ sdts_alias }} DESC\n    LIMIT 1\n\n),\n\nvirtual_logic AS (\n\n    SELECT\n        c.{{ sdts_alias }},\n        c.replacement_sdts,\n        c.force_active,\n        {%- if log_logic is none %}\n        TRUE as {{ snapshot_trigger_column }},\n        {%- else %}\n        CASE \n            WHEN\n            {% if 'daily' in log_logic.keys() %}\n                {%- if log_logic['daily']['forever'] == 'TRUE' -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                  (1=1)\n                {%- else %}                            \n                    {%- set daily_duration = log_logic['daily']['duration'] -%}\n                    {%- set daily_unit = log_logic['daily']['unit'] -%}\n                  (DATE_TRUNC('DAY', TO_DATE(c.{{ sdts_alias }})) BETWEEN ADD_{{ daily_unit}}S(CURRENT_DATE, -{{ daily_duration }}) AND CURRENT_DATE)\n                {%- endif -%}   \n            {%- endif %}\n\n            {%- if 'monthly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['monthly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_monthly = TRUE)\n                {%- else %}\n                    {%- set monthly_duration = log_logic['monthly']['duration'] -%}\n                    {%- set monthly_unit = log_logic['monthly']['unit'] %}            \n              ((DATE_TRUNC('DAY', TO_DATE(c.{{ sdts_alias }})) BETWEEN ADD_{{ monthly_unit }}S(CURRENT_DATE, -{{ monthly_duration }}) AND CURRENT_DATE) AND (c.is_monthly = TRUE))\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'yearly' in log_logic.keys() %}\n            OR\n                {%- if log_logic['yearly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                    (c.is_yearly = TRUE)\n                {%- else %}\n                    {%- set yearly_duration = log_logic['yearly']['duration'] -%}\n                    {%- set yearly_unit = log_logic['yearly']['unit'] %}                    \n              ((DATE_TRUNC('DAY', TO_DATE(c.{{ sdts_alias }})) BETWEEN ADD_{{ yearly_unit }}S(CURRENT_DATE, - {{ yearly_duration }}) AND CURRENT_DATE) AND (c.is_yearly = TRUE))\n                {%- endif -%}\n            {% endif %}\n            THEN TRUE\n            ELSE FALSE\n\n        END AS {{ snapshot_trigger_column }},\n        {%- endif %}\n        CASE\n            WHEN l.{{ sdts_alias }} IS NULL THEN FALSE\n            ELSE TRUE\n        END AS is_latest,\n\n        c.caption,\n        c.is_hourly,\n        c.is_daily,\n        c.is_monthly,\n        c.is_yearly,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE) THEN TRUE\n            ELSE FALSE\n        END AS is_current_year,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE)-1 THEN TRUE\n            ELSE FALSE\n        END AS is_last_year,\n        CASE\n            WHEN DATE_TRUNC('DAY', TO_DATE(c.{{ sdts_alias }})) BETWEEN ADD_YEARS(CURRENT_DATE,-1) AND CURRENT_DATE THEN TRUE\n            ELSE FALSE\n        END AS is_rolling_year,\n        CASE\n            WHEN DATE_TRUNC('DAY', TO_DATE(c.{{ sdts_alias }})) BETWEEN ADD_YEARS(CURRENT_DATE,-2) AND ADD_YEARS(CURRENT_DATE,-1) THEN TRUE\n            ELSE FALSE\n        END AS is_last_rolling_year,\n        c.comment\n    FROM {{ v0_relation }} c\n    LEFT JOIN latest_row l\n        ON c.{{ sdts_alias }} = l.{{ sdts_alias }}\n\n),\n\nactive_logic_combined AS (\n\n    SELECT \n        {{ sdts_alias }},\n        replacement_sdts,\n        CASE\n            WHEN force_active AND {{ snapshot_trigger_column }} THEN TRUE\n            WHEN NOT force_active OR NOT {{ snapshot_trigger_column }} THEN FALSE\n        END AS {{ snapshot_trigger_column }},\n        is_latest, \n        caption,\n        is_hourly,\n        is_daily,\n        is_monthly,\n        is_yearly,\n        is_current_year,\n        is_last_year,\n        is_rolling_year,\n        is_last_rolling_year,\n        comment\n    FROM virtual_logic\n\n)\n\nSELECT * FROM active_logic_combined\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.38483}, "macro.datavault4dbt.exasol__nh_link": {"unique_id": "macro.datavault4dbt.exasol__nh_link", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/exasol/nh_link.sql", "original_file_path": "macros/tables/exasol/nh_link.sql", "name": "exasol__nh_link", "macro_sql": "{%- macro exasol__nh_link(link_hashkey, foreign_hashkeys, payload, source_models, src_ldts, src_rsrc) -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# If no specific link_hk, fk_columns, or payload are defined for each source, we apply the values set in the link_hashkey, foreign_hashkeys, and payload variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- for source_model in source_models.keys() %}\n\n    {%- if 'fk_columns' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'fk_columns': foreign_hashkeys}) -%}\n\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'link_hk': link_hashkey}) -%}\n\n    {%- endif -%}\n\n    {%- if 'payload' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'payload': payload}) -%}\n\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n\n        {%- set ns.has_rsrc_static_defined = false -%}\n\n    {%- else -%}\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n\n{% endfor %}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] + payload -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() -%}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models.keys() %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n\n            {%- set source_number = loop.index | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT {{ this }}.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT {{ this }}.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n            {%- set source_in_target = true -%}\n\n            {% if not rsrc_static_result %}\n                {%- set source_in_target = false -%}\n            {% endif %}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models.keys() | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                nh_link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models.keys() %}\n            {%- set source_number = loop.index | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{%- for source_model in source_models.keys() %}\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = loop.index | string -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = source_models[source_model]['rsrc_static'] %}\n    {%- endif -%}\n\nsrc_new_{{ source_number }} AS (\n\n    SELECT\n        {{ source_models[source_model]['link_hk'] }} AS {{ link_hashkey }},\n\n        {% for fk in source_models[source_model]['fk_columns']|list %}\n            {{ fk }},\n        {%- endfor %}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {{ datavault4dbt.print_list(source_models[source_model]['payload']) | indent(3) }}\n\n    FROM {{ ref(source_model|string) }} src\n    {# If the model is incremental and all sources has rsrc_static defined and valid and the source was already included before in the target transactional link #}\n    {# then an inner join is performed on the CTE for the maximum load date timestamp per record source static to get the records\n    that match any of the rsrc_static present in it #}\n    {# if there are records in the source with a newer load date time stamp than the ones present in the target, those will be selected to be inserted later #}\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_model] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models.keys() -%}\n\n    {%- set source_number = loop.index | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n\n        {% for fk in source_models[source_model]['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {% for col in source_models[source_model]['payload']|list %}\n            {{ col }} AS {{ payload[loop.index - 1] }}\n            {%- if not loop.last %}, {%- endif %}\n        {% endfor -%}\n\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n{# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n{# Select everything from the previous CTE, if its incremental then filter for hashkeys that are not already in the link. #}\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ link_hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.4043138}, "macro.datavault4dbt.exasol__ma_sat_v1": {"unique_id": "macro.datavault4dbt.exasol__ma_sat_v1", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/exasol/ma_sat_v1.sql", "original_file_path": "macros/tables/exasol/ma_sat_v1.sql", "name": "exasol__ma_sat_v1", "macro_sql": "{%- macro exasol__ma_sat_v1(sat_v0, hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = datavault4dbt.expand_column_list(columns=[hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc]) -%}\n{%- set ma_attributes = datavault4dbt.expand_column_list(columns=[ma_attribute]) -%}\n\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Getting everything from the underlying v0 satellite. #}\nsource_satellite AS (\n\n    SELECT src.*\n    FROM {{ source_relation }} as src\n\n),\n\n{# Selecting all distinct loads per hashkey. #}\ndistinct_hk_ldts AS (\n\n    SELECT DISTINCT\n        {{ hashkey }},\n        {{ src_ldts }}\n    FROM source_satellite\n\n),\n\n{# End-dating each ldts for each hashkey, based on earlier ldts per hashkey. #}\nend_dated_loads AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ src_ldts }},\n        COALESCE(LEAD(ADD_SECONDS({{ src_ldts }}, -0.001)) OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }}) as {{ ledts_alias }}\n    FROM distinct_hk_ldts\n\n),\n\n{# End-date each source record, based on the end-date for each load. #}\nend_dated_source AS (\n\n    SELECT\n        src.{{ hashkey }},\n        src.{{ hashdiff }},\n        src.{{ src_rsrc }},\n        src.{{ src_ldts }},\n        edl.{{ ledts_alias }},\n        {%- if add_is_current_flag %}\n            CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            THEN TRUE\n            ELSE FALSE\n            END AS {{ is_current_col_alias }},\n        {% endif %}\n        {{- datavault4dbt.print_list(ma_attributes, indent=10, src_alias='src') }},\n        {{- datavault4dbt.print_list(source_columns_to_select, indent=10, src_alias='src') }}\n    FROM source_satellite AS src\n    LEFT JOIN end_dated_loads edl\n        ON src.{{ hashkey }} = edl.{{ hashkey }}\n        AND src.{{ src_ldts }} = edl.{{ src_ldts }}\n\n)\n\nSELECT * FROM end_dated_source\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.4094183}, "macro.datavault4dbt.exasol__control_snap_v0": {"unique_id": "macro.datavault4dbt.exasol__control_snap_v0", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/exasol/control_snap_v0.sql", "original_file_path": "macros/tables/exasol/control_snap_v0.sql", "name": "exasol__control_snap_v0", "macro_sql": "{%- macro exasol__control_snap_v0(start_date, daily_snapshot_time, sdts_alias) -%}\n\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n{%- set date_format_std = 'YYYY-mm-dd' -%}\n{%- set daily_snapshot_time = '0001-01-01 ' ~ daily_snapshot_time -%}\n{%- set last_cte = '' -%}\nWITH \ninitial_timestamps AS \n(\n    select\n    add_days(ADD_MINUTES(ADD_HOURS(DATE_TRUNC('day', DATE '{{ start_date }}' ), EXTRACT(HOUR FROM {{ datavault4dbt.string_to_timestamp(timestamp_format, daily_snapshot_time) }}) ),\n                                                        EXTRACT(MINUTE FROM  {{ datavault4dbt.string_to_timestamp(timestamp_format, daily_snapshot_time) }}) \n                                                    ), level-1) as sdts\n    from dual\n    connect by level <= days_between(ADD_MINUTES(ADD_HOURS(CURRENT_DATE(), EXTRACT(HOUR FROM {{ datavault4dbt.string_to_timestamp(timestamp_format, daily_snapshot_time) }}) ),\n                                                        EXTRACT(MINUTE FROM  {{ datavault4dbt.string_to_timestamp(timestamp_format, daily_snapshot_time) }}) \n                                                    ), TO_DATE('{{ start_date}}', '{{ date_format_std }}')\n                                    )+1\n    order by local.sdts\n\n    {%- set last_cte = 'initial_timestamps' -%}\n)\n\n\n{%- if is_incremental() %}\n, incremental_cte AS (\n    SELECT \n        src.* \n    FROM initial_timestamps src\n\n    WHERE src.sdts > (SELECT MAX(t.\"{{ sdts_alias }}\") FROM {{ this }} t)\n    {%- set last_cte = 'incremental_cte' -%}\n\n)\n{%- endif %}\n\n, enriched_timestamps AS \n(\n    SELECT\n        sdts as \"{{ sdts_alias }}\",\n        TRUE as force_active,\n        sdts AS replacement_sdts,\n        CONCAT('Snapshot ', DATE_TRUNC('day', sdts)) AS caption,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END AS is_hourly,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 AND EXTRACT(HOUR FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END AS is_daily,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_monthly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 AND EXTRACT(MONTH FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_yearly,\n        NULL AS comment\n    FROM \n        {{ last_cte }}\n)\n\nSELECT * FROM enriched_timestamps\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.string_to_timestamp", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.4136624}, "macro.datavault4dbt.exasol__hub": {"unique_id": "macro.datavault4dbt.exasol__hub", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/exasol/hub.sql", "original_file_path": "macros/tables/exasol/hub.sql", "name": "exasol__hub", "macro_sql": "{%- macro exasol__hub(hashkey, business_keys, src_ldts, src_rsrc, source_models) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{# Select the Business Key column from the first source model definition provided in the hub model and put them in an array. #}\n{%- set business_keys = datavault4dbt.expand_column_list(columns=[business_keys]) -%}\n\n{# If no specific bk_columns is defined for each source, we apply the values set in the business_keys variable. #}\n{# If no specific hk_column is defined for each source, we apply the values set in the hashkey variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- for source_model in source_models.keys() -%}\n\n    {%- if 'hk_column' not in source_models[source_model].keys() -%}\n        {%- do source_models[source_model].update({'hk_column': hashkey}) -%}\n    {%- endif -%}\n\n    {%- if 'bk_columns' in source_models[source_model].keys() -%}\n        {%- set bk_column_input = source_models[source_model]['bk_columns'] -%}\n\n        {%- if not (bk_column_input is iterable and bk_column_input is not string) -%}\n            {%- set bk_column_input = [bk_column_input] -%}\n        {%- endif -%}\n\n        {%- do source_models[source_model].update({'bk_columns': bk_column_input}) -%}\n    {%- elif not datavault4dbt.is_list(bk_column_input) -%}\n        {%- set bk_list = datavault4dbt.expand_column_list(columns=[bk_column_input]) -%}\n        {%- do source_models[source_model].update({'bk_columns': bk_list}) -%}\n    {%- else -%}{%- do source_models[source_model].update({'bk_columns': business_keys}) -%}\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n        {%- set ns.has_rsrc_static_defined = false -%}\n    {%- else -%}\n\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- endfor -%}\n\n{%- set final_columns_to_select = [hashkey] + business_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target hashkeys out of the existing hub for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n            {{ hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models.keys() %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = loop.index | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT {{ this }}.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ this }}.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n            {%- set source_in_target = true -%}\n\n            {% if not rsrc_static_result %}\n                {%- set source_in_target = false -%}\n            {% endif %}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models.keys() | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models.keys() %}\n            {%- set source_number = loop.index | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models.keys() %}\n\n    {%- set source_number = loop.index | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n    {%- endif -%}\n\n    {%- if 'hk_column' not in source_models[source_model].keys() %}\n        {%- set hk_column = hashkey -%}\n    {%- else -%}\n        {%- set hk_column = source_models[source_model]['hk_column'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ hk_column }} AS {{ hashkey }},\n            {% for bk in source_models[source_model]['bk_columns'] -%}\n            {{ bk }},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_model] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models.keys() -%}\n\n    {%- set source_number = loop.index | string -%}\n\n    SELECT\n        {{ hashkey }},\n\n        {% for bk in source_models[source_model]['bk_columns'] -%}\n            {{ bk }} AS {{ business_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.435055}, "macro.datavault4dbt.exasol__rec_track_sat": {"unique_id": "macro.datavault4dbt.exasol__rec_track_sat", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/exasol/rec_track_sat.sql", "original_file_path": "macros/tables/exasol/rec_track_sat.sql", "name": "exasol__rec_track_sat", "macro_sql": "{%- macro exasol__rec_track_sat(tracked_hashkey, source_models, src_ldts, src_rsrc, src_stg) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the unknown and error ghost record value for record source column #}\n{%- set rsrc_unknown = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') -%}\n{%- set rsrc_error = var('datavault4dbt.default_error_rsrc', 'ERROR') -%}\n\n{# Setting the rsrc and stg_alias default datatype and length #}\n{%- set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'VARCHAR (2000000) UTF8') -%}\n{%- set stg_default_dtype = var('datavault4dbt.stg_default_dtype', 'VARCHAR (200) UTF8') -%}\n{%- set ns = namespace(last_cte = '', source_included_before = {},  source_models_rsrc_dict={},  has_rsrc_static_defined=true) -%}\n\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n\n{# If no specific hk_column is defined for each source, we apply the values set in the tracked_hashkey input variable. #}\n{# If no rsrc_static parameter is defined in a source model then the record source performance look up wont be executed  #}\n{%- for source_model in source_models.keys() %}\n\n    {%- if 'hk_column' not in source_models[source_model].keys() -%}\n        {%- do source_models[source_model].update({'hk_column': tracked_hashkey}) -%}\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n        {%- set ns.has_rsrc_static_defined = false -%}\n    {%- else -%}\n\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{% endfor %}\n\n{%- set final_columns_to_select = [tracked_hashkey] + [src_ldts] + [src_rsrc] + [src_stg] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n\n    distinct_concated_target AS (\n        {%- set concat_columns = [tracked_hashkey, src_ldts, src_rsrc] -%}\n        {{ \"\\n\" }}\n        SELECT\n        {{ datavault4dbt.concat_ws(concat_columns) }} as concat\n        FROM {{ this }}\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        rsrc_static_unionized AS (\n        {% for source_model in source_models.keys() %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = loop.index | string -%}\n            {%- set hk_column = source_models[source_model]['hk_column'] -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            {{ rsrc_static_query_source }}  \n\n            {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n            {%- set source_in_target = true -%}\n\n            {% if not rsrc_static_result %}\n                {%- set source_in_target = false -%}\n            {% endif %}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n            {# Unionize over all sources #}\n            {%- if not loop.last %}\n                UNION ALL \n            {% endif -%}\n\n        {% endfor -%}\n        {%- set ns.last_cte = \"rsrc_static_unionized\" -%}\n        ),\n\n        max_ldts_per_rsrc_static_in_target AS (\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif -%}\n{% endif -%}\n\n{#\n    We deduplicate each source over hashkey + ldts + rsrc_static and if is_incremental only select the rows, where the ldts is later\n    than the latest one in the existing satellite for that rsrc_static. If a source is added to the existing satellite, all deduplicated\n    rows from that source are loaded into the satellite.\n#}\n\n{%- for source_model in source_models.keys() %}\n\n    {%- set source_number = loop.index | string -%}\n    {%- set hk_column = source_models[source_model]['hk_column'] -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n        src_new_{{ source_number }} AS (\n        {%- for rsrc_static in rsrc_statics %}\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST('{{ rsrc_static }}' AS {{ rsrc_default_dtype }} ) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model }}') AS {{ stg_default_dtype }})  AS {{ src_stg }}\n            FROM {{ ref(source_model) }} src\n\n\n            {%- if is_incremental() and ns.source_included_before[source_model] %}\n                INNER JOIN max_ldts_per_rsrc_static_in_target max\n                    ON max.rsrc_static = '{{ rsrc_static }}'\n                WHERE src.{{ src_ldts }} > max.max_ldts\n            {%- endif %}\n\n            {%- if not loop.last %}\n                UNION ALL\n            {% endif -%}\n        {% endfor %}\n\n        ),\n    {%- else -%}\n        src_new_{{ source_number}} AS (\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST({{ src_rsrc }} AS {{ rsrc_default_dtype }}) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model }}') AS {{ stg_default_dtype }}) AS {{ src_stg }}\n            FROM {{ ref(source_model) }} src\n        ),\n    {%- endif -%}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n{% endfor %}\n\n{#\n    If more than one source model is selected, all previously created deduplicated CTEs are unionized.\n#}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n    {% for source_model in source_models.keys() %}\n        {%- set hk_column = source_models[source_model]['hk_column'] -%}\n        {%- set source_number = loop.index | string -%}\n\n        SELECT\n        {{ tracked_hashkey }},\n        {{ src_ldts }},\n        {{ src_rsrc }},\n        {{ src_stg }}\n        FROM src_new_{{ source_number }}\n\n        {%- if not loop.last %}\n        UNION ALL\n        {% endif -%}\n\n    {% endfor %}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif -%}\n\n{#\n    Selecting everything, either from the unionized data, or from the single CTE (if single source). Checking against the existing\n    satellite to only inserts that are not already inserted, if incremental run.\n#}\n\nrecords_to_insert AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }} \n    AND {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}\n    {%- if is_incremental() %}\n        AND {{ datavault4dbt.concat_ws(concat_columns) }} NOT IN (SELECT * FROM distinct_concated_target)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.4522395}, "macro.datavault4dbt.exasol__sat_v0": {"unique_id": "macro.datavault4dbt.exasol__sat_v0", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/exasol/sat_v0.sql", "original_file_path": "macros/tables/exasol/sat_v0.sql", "name": "exasol__sat_v0", "macro_sql": "{%- macro exasol__sat_v0(parent_hashkey, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ src_hashdiff }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each hashkey.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n     , ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN {{ ns.hdiff_alias }} = LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND deduplicated_numbered_source.rn = 1)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.4589136}, "macro.datavault4dbt.exasol__pit": {"unique_id": "macro.datavault4dbt.exasol__pit", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/exasol/pit.sql", "original_file_path": "macros/tables/exasol/pit.sql", "name": "exasol__pit", "macro_sql": "{%- macro exasol__pit(tracked_entity, hashkey, sat_names, ldts, ledts, sdts, snapshot_relation, dimension_key,snapshot_trigger_column=none, custom_rsrc=none, pit_type=none) -%}\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'HASHTYPE') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- set rsrc = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n{%- set hashkey = hashkey | upper -%}\n{%- set dimension_key = dimension_key | upper -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if datavault4dbt.is_something(pit_type) -%}\n    {%- set hashed_cols = [pit_type, datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- else -%}\n    {%- set hashed_cols = [datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- endif -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() %}\n\nexisting_dimension_keys AS (\n\n    SELECT\n        {{ dimension_key }}\n    FROM {{ this }}\n\n),\n\n{%- endif %}\n\npit_records AS (\n\n    SELECT\n        \n        {% if datavault4dbt.is_something(pit_type) -%}\n            {{ datavault4dbt.as_constant(pit_type) }} as type,\n        {%- endif %}\n        {% if datavault4dbt.is_something(custom_rsrc) -%}\n        '{{ custom_rsrc }}' as {{ rsrc }},\n        {%- endif %}\n        {{ datavault4dbt.hash(columns=hashed_cols,\n                    alias=dimension_key,\n                    is_hashdiff=false)   }} ,\n        te.{{ hashkey }},\n        snap.{{ sdts }},\n        {% for satellite in sat_names %}\n            COALESCE({{ satellite }}.{{ hashkey }}, CAST('{{ unknown_key }}' AS {{ hash_dtype }})) AS hk_{{ satellite }},\n            COALESCE({{ satellite }}.{{ ldts }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) AS {{ ldts }}_{{ satellite }}\n            {{- \",\" if not loop.last }}\n        {%- endfor %}\n\n    FROM\n            {{ ref(tracked_entity) }} te\n        FULL OUTER JOIN\n            {{ ref(snapshot_relation) }} snap\n            {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n                ON snap.{{ snapshot_trigger_column }} = true\n            {% else -%}\n                ON 1=1\n            {%- endif %}\n        {% for satellite in sat_names %}\n        {%- set sat_columns = datavault4dbt.source_columns(ref(satellite)) -%}\n        LEFT JOIN {{ ref(satellite) }}\n            ON\n                {{ satellite }}.{{ hashkey}} = te.{{ hashkey }}\n                {% if ledts|string|lower in sat_columns|map('lower') %}\n                    AND snap.{{ sdts }} BETWEEN {{ satellite }}.{{ ldts }} AND {{ satellite }}.{{ ledts }}\n                {%- else -%}\n                    AND {{ satellite }}.{{ ldts }} > snap.{{ sdts }}\n                {%- endif -%}\n        {% endfor %}\n    {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n        WHERE snap.{{ snapshot_trigger_column }}\n    {%- endif %}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT *\n    FROM pit_records\n    {%- if is_incremental() %}\n    WHERE {{ dimension_key }} NOT IN (SELECT * FROM existing_dimension_keys)\n    {% endif -%}\n\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.datavault4dbt.prefix", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.hash", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.source_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.4710138}, "macro.datavault4dbt.exasol__nh_sat": {"unique_id": "macro.datavault4dbt.exasol__nh_sat", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/exasol/nh_sat.sql", "original_file_path": "macros/tables/exasol/nh_sat.sql", "name": "exasol__nh_sat", "macro_sql": "{%- macro exasol__nh_sat(parent_hashkey, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[parent_hashkey, src_ldts, src_rsrc, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{% if is_incremental() -%}\n{# Get distinct list of hashkeys inside the existing satellite, if incremental. #}\ndistinct_hashkeys AS (\n\n    SELECT DISTINCT\n        {{ parent_hashkey }}\n    FROM {{ this }}\n\n    ),\n\n{%- endif %}\n\n{#\n    Select all records from the source. If incremental, insert only records, where the\n    hashkey is not already in the existing satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM source_data\n    {%- if is_incremental() %}\n    WHERE {{ parent_hashkey }} NOT IN (SELECT * FROM distinct_hashkeys)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.4740627}, "macro.datavault4dbt.snowflake__ma_sat_v0": {"unique_id": "macro.datavault4dbt.snowflake__ma_sat_v0", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/snowflake/ma_sat_v0.sql", "original_file_path": "macros/tables/snowflake/ma_sat_v0.sql", "name": "snowflake__ma_sat_v0", "macro_sql": "{%- macro snowflake__ma_sat_v0(parent_hashkey, src_hashdiff, src_ma_key, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[parent_hashkey, src_hashdiff, src_ldts, src_rsrc, src_ma_key, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ src_hashdiff }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{# Get a list of all distinct hashdiffs that exist for each parent_hashkey. #}\ndeduped_row_hashdiff AS (\n\n  SELECT \n    {{ parent_hashkey }},\n    {{ src_ldts }},\n    {{ src_hashdiff }}\n  FROM source_data\n  QUALIFY CASE\n            WHEN {{ src_hashdiff }} = LAG({{ src_hashdiff }}) OVER (PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n          END\n),\n\n{# Dedupe the source data regarding non-delta groups. #}\ndeduped_rows AS (\n\n  SELECT \n    {{ datavault4dbt.alias_all(columns=source_cols, prefix='source_data') }}\n  FROM source_data\n  INNER JOIN deduped_row_hashdiff\n    ON {{ datavault4dbt.multikey(parent_hashkey, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(src_ldts, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n    AND {{ datavault4dbt.multikey(src_hashdiff, prefix=['source_data', 'deduped_row_hashdiff'], condition='=') }}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT\n        {{ datavault4dbt.alias_all(columns=source_cols, prefix='deduped_rows') }}\n    FROM deduped_rows\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }}\n            AND {{ datavault4dbt.multikey(src_hashdiff, prefix=['latest_entries_in_sat', 'deduped_rows'], condition='=') }} \n            )\n    {%- endif %}\n\n    )\n\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.alias_all", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.479957}, "macro.datavault4dbt.snowflake__sat_v1": {"unique_id": "macro.datavault4dbt.snowflake__sat_v1", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/snowflake/sat_v1.sql", "original_file_path": "macros/tables/snowflake/sat_v1.sql", "name": "snowflake__sat_v1", "macro_sql": "{%- macro snowflake__sat_v1(sat_v0, hashkey, hashdiff, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n{%- set ledts_alias = var('datavault4dbt.ledts_alias', 'ledts') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = [hashkey, hashdiff, src_ldts, src_rsrc] -%}\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Calculate ledts based on the ldts of the earlier record. #}\nend_dated_source AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ hashdiff }},\n        {{ src_rsrc }},\n        {{ src_ldts }},\n        COALESCE(LEAD({{ src_ldts }} - INTERVAL '1 MICROSECOND') OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}) AS {{ ledts_alias }},\n        {{ datavault4dbt.print_list(source_columns_to_select) }}\n    FROM {{ source_relation }}\n\n)\n\nSELECT\n    {{ hashkey }},\n    {{ hashdiff }},\n    {{ src_rsrc }},\n    {{ src_ldts }},\n    {{ ledts_alias }},\n    {%- if add_is_current_flag %}\n        CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n          THEN TRUE\n          ELSE FALSE\n        END AS {{ is_current_col_alias }},\n    {% endif -%}\n    {{ datavault4dbt.print_list(source_columns_to_select) }}\nFROM end_dated_source\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.4839919}, "macro.datavault4dbt.snowflake__link": {"unique_id": "macro.datavault4dbt.snowflake__link", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/snowflake/link.sql", "original_file_path": "macros/tables/snowflake/link.sql", "name": "snowflake__link", "macro_sql": "{%- macro snowflake__link(link_hashkey, foreign_hashkeys, source_models, src_ldts, src_rsrc) -%}\n\n{%- if not (foreign_hashkeys is iterable and foreign_hashkeys is not string) -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Only one foreign key provided for this link. At least two required.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# If no specific link_hk and fk_columns are defined for each source, we apply the values set in the link_hashkey and foreign_hashkeys variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- for source_model in source_models.keys() %}\n\n    {%- if 'fk_columns' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'fk_columns': foreign_hashkeys}) -%}\n\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'link_hk': link_hashkey}) -%}\n\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n\n        {%- set ns.has_rsrc_static_defined = false -%}\n\n    {%- else -%}\n\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{% endfor %}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n        \n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models.keys() %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n\n            {%- set source_number = loop.index | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n            {%- set source_in_target = true -%}\n\n            {% if not rsrc_static_result %}\n                {%- set source_in_target = false -%}\n            {% endif %}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models.keys() | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models.keys() %}\n            {%- set source_number = loop.index | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models.keys() %}\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = loop.index | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = source_models[source_model]['rsrc_static'] %}\n    {%- endif -%}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ source_models[source_model]['link_hk'] }} AS {{ link_hashkey }},\n            {% for fk in source_models[source_model]['fk_columns']|list -%}\n            {{ fk }},\n            {% endfor -%}\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model|string) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_model] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n        {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models.keys() -%}\n\n    {%- set source_number = loop.index | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n        {% for fk in source_models[source_model]['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n    {# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {# Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the link. #}\n\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) | indent(4) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ link_hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.5014236}, "macro.datavault4dbt.snowflake__control_snap_v1": {"unique_id": "macro.datavault4dbt.snowflake__control_snap_v1", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/snowflake/control_snap_v1.sql", "original_file_path": "macros/tables/snowflake/control_snap_v1.sql", "name": "snowflake__control_snap_v1", "macro_sql": "{%- macro snowflake__control_snap_v1(control_snap_v0, log_logic, sdts_alias) -%}\n\n{# Sample intervals\n   {%-set log_logic = {'daily': {'duration': 3,\n                                'unit': 'MONTH',\n                                'forever': 'FALSE'},\n                      'weekly': {'duration': 1,\n                                 'unit': 'YEAR'},\n                      'monthly': {'duration': 5,\n                                  'unit': 'YEAR'},\n                      'yearly': {'forever': 'TRUE'} } %} \n#}\n\n{%- if log_logic is not none %}\n    {%- for interval in log_logic.keys() %}\n        {%- if 'forever' not in log_logic[interval].keys() -%}\n            {% do log_logic[interval].update({'forever': 'FALSE'}) %}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endif %}\n\n{%- set v0_relation = ref(control_snap_v0) -%}\n{%- set ns = namespace(forever_status=FALSE) %}\n\n{%- set snapshot_trigger_column = var('datavault4dbt.snapshot_trigger_column', 'is_active') -%}\n\nWITH \n\nlatest_row AS (\n\n    SELECT\n        {{ sdts_alias }}\n    FROM {{ v0_relation }}\n    ORDER BY {{ sdts_alias }} DESC\n    LIMIT 1\n\n), \n\nvirtual_logic AS (\n    \n    SELECT\n        c.{{ sdts_alias }},\n        c.replacement_sdts,\n        c.force_active,\n        {%- if log_logic is none %}\n        TRUE AS {{ snapshot_trigger_column }},\n        {%- else %}\n        CASE \n            WHEN\n            {% if 'daily' in log_logic.keys() %}\n                {%- if log_logic['daily']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n                  (1=1)\n                {%- else %}                            \n                    {%- set daily_duration = log_logic['daily']['duration'] -%}\n                    {%- set daily_unit = log_logic['daily']['unit'] -%}\n                  (DATE_TRUNC('DAY', c.{{ sdts_alias }}::DATE) BETWEEN CURRENT_DATE() - INTERVAL '{{ daily_duration }} {{ daily_unit }}' AND CURRENT_DATE())\n                {%- endif -%}   \n            {%- endif %}\n\n            {%- if 'weekly' in log_logic.keys() %} OR \n                {%- if log_logic['weekly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' -%}\n              (c.is_weekly = TRUE)\n                {%- else %} \n                    {%- set weekly_duration = log_logic['weekly']['duration'] -%}\n                    {%- set weekly_unit = log_logic['weekly']['unit'] %}            \n              ((DATE_TRUNC('DAY', c.{{ sdts_alias }}::DATE) BETWEEN CURRENT_DATE() - INTERVAL '{{ weekly_duration }} {{ weekly_unit }}' AND CURRENT_DATE()) AND (c.is_weekly = TRUE))\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'monthly' in log_logic.keys() %} OR\n                {%- if log_logic['monthly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' %}\n              (c.is_monthly = TRUE)\n                {%- else %}\n                    {%- set monthly_duration = log_logic['monthly']['duration'] -%}\n                    {%- set monthly_unit = log_logic['monthly']['unit'] %}            \n              ((DATE_TRUNC('DAY', c.{{ sdts_alias }}::DATE) BETWEEN CURRENT_DATE() - INTERVAL '{{ monthly_duration }} {{ monthly_unit }}' AND CURRENT_DATE()) AND (c.is_monthly = TRUE))\n                {%- endif -%}\n            {% endif -%}\n\n            {%- if 'yearly' in log_logic.keys() %} OR \n                {%- if log_logic['yearly']['forever'] is true -%}\n                    {%- set ns.forever_status = 'TRUE' %}\n              (c.is_yearly = TRUE)\n                {%- else %}\n                    {%- set yearly_duration = log_logic['yearly']['duration'] -%}\n                    {%- set yearly_unit = log_logic['yearly']['unit'] %}                    \n              ((DATE_TRUNC('DAY', c.{{ sdts_alias }}::DATE) BETWEEN CURRENT_DATE() - INTERVAL '{{ yearly_duration }} {{ yearly_unit }}' AND CURRENT_DATE()) AND (c.is_yearly = TRUE))\n                {%- endif -%}\n            {% endif %}\n            THEN TRUE\n            ELSE FALSE\n        END AS {{ snapshot_trigger_column }},\n        {%- endif %}\n\n        CASE\n            WHEN l.{{ sdts_alias }} IS NULL THEN FALSE\n            ELSE TRUE\n        END AS is_latest,\n\n        c.caption,\n        c.is_hourly,\n        c.is_daily,\n        c.is_weekly,\n        c.is_monthly,\n        c.is_yearly,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE()) THEN TRUE\n            ELSE FALSE\n        END AS is_current_year,\n        CASE\n            WHEN EXTRACT(YEAR FROM c.{{ sdts_alias }}) = EXTRACT(YEAR FROM CURRENT_DATE())-1 THEN TRUE\n            ELSE FALSE\n        END AS is_last_year,\n        CASE\n            WHEN DATE_TRUNC('DAY', c.{{ sdts_alias }}::DATE) BETWEEN (CURRENT_DATE() - INTERVAL '1 YEAR') AND CURRENT_DATE() THEN TRUE\n            ELSE FALSE\n        END AS is_rolling_year,\n        CASE\n            WHEN DATE_TRUNC('DAY', c.{{ sdts_alias }}::DATE) BETWEEN (CURRENT_DATE() - INTERVAL '2 YEAR') AND (CURRENT_DATE() - INTERVAL '1 YEAR') THEN TRUE\n            ELSE FALSE\n        END AS is_last_rolling_year,\n        c.comment\n    FROM {{ v0_relation }} c\n    LEFT JOIN latest_row l\n    ON c.{{ sdts_alias }} = l.{{ sdts_alias }}\n),\n\nactive_logic_combined AS (\n\n    SELECT \n        {{ sdts_alias }},\n        replacement_sdts,\n        CASE\n            WHEN force_active AND {{ snapshot_trigger_column }} THEN TRUE\n            WHEN NOT force_active OR NOT {{ snapshot_trigger_column }} THEN FALSE\n        END AS {{ snapshot_trigger_column }},\n        is_latest, \n        caption,\n        is_hourly,\n        is_daily,\n        is_weekly,\n        is_monthly,\n        is_yearly,\n        is_current_year,\n        is_last_year,\n        is_rolling_year,\n        is_last_rolling_year,\n        comment\n    FROM virtual_logic\n\n)\n\nSELECT * FROM active_logic_combined\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.5190487}, "macro.datavault4dbt.snowflake__nh_link": {"unique_id": "macro.datavault4dbt.snowflake__nh_link", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/snowflake/nh_link.sql", "original_file_path": "macros/tables/snowflake/nh_link.sql", "name": "snowflake__nh_link", "macro_sql": "{%- macro snowflake__nh_link(link_hashkey, foreign_hashkeys, payload, source_models, src_ldts, src_rsrc) -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n\n{# If no specific link_hk, fk_columns, or payload are defined for each source, we apply the values set in the link_hashkey, foreign_hashkeys, and payload variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- for source_model in source_models.keys() %}\n\n    {%- if 'fk_columns' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'fk_columns': foreign_hashkeys}) -%}\n\n    {%- endif -%}\n\n    {%- if 'link_hk' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'link_hk': link_hashkey}) -%}\n\n    {%- endif -%}\n\n    {%- if 'payload' not in source_models[source_model].keys() -%}\n\n        {%- do source_models[source_model].update({'payload': payload}) -%}\n\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n\n        {%- set ns.has_rsrc_static_defined = false -%}\n\n    {%- else -%}\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n\n{% endfor %}\n\n{%- set final_columns_to_select = [link_hashkey] + foreign_hashkeys + [src_ldts] + [src_rsrc] + payload -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() -%}\n{# Get all link hashkeys out of the existing link for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n        {{ link_hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models.keys() %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n\n            {%- set source_number = loop.index | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT {{ this }}.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT {{ this }}.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n            {%- set source_in_target = true -%}\n\n            {% if not rsrc_static_result %}\n                {%- set source_in_target = false -%}\n            {% endif %}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models.keys() | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                nh_link, but extended by the rsrc_static column. #}\n\n            {% for source_model in source_models.keys() %}\n            {%- set source_number = loop.index | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) AS max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{%- for source_model in source_models.keys() %}\n{#  Select all deduplicated records from each source, and filter for records that are newer\n    than the max ldts inside the existing link, if incremental. #}\n\n    {%- set source_number = loop.index | string -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = source_models[source_model]['rsrc_static'] %}\n    {%- endif -%}\n\nsrc_new_{{ source_number }} AS (\n\n    SELECT\n        {{ source_models[source_model]['link_hk'] }} AS {{ link_hashkey }},\n\n        {% for fk in source_models[source_model]['fk_columns']|list %}\n            {{ fk }},\n        {%- endfor %}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {{ datavault4dbt.print_list(source_models[source_model]['payload']) | indent(3) }}\n\n    FROM {{ ref(source_model|string) }} src\n    {# If the model is incremental and all sources has rsrc_static defined and valid and the source was already included before in the target transactional link #}\n    {# then an inner join is performed on the CTE for the maximum load date timestamp per record source static to get the records\n    that match any of the rsrc_static present in it #}\n    {# if there are records in the source with a newer load date time stamp than the ones present in the target, those will be selected to be inserted later #}\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_model] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n{# Unionize the new records from all sources. #}\n\n    {%- for source_model in source_models.keys() -%}\n\n    {%- set source_number = loop.index | string -%}\n\n    SELECT\n        {{ link_hashkey }},\n\n        {% for fk in source_models[source_model]['fk_columns']|list %}\n            {{ fk }} AS {{ foreign_hashkeys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }},\n\n        {% for col in source_models[source_model]['payload']|list %}\n            {{ col }} AS {{ payload[loop.index - 1] }}\n            {%- if not loop.last %}, {%- endif %}\n        {% endfor -%}\n\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n{# Deduplicate the unionized records again to only insert the earliest one. #}\n\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ link_hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n{# Select everything from the previous CTE, if its incremental then filter for hashkeys that are not already in the link. #}\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ link_hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.5379636}, "macro.datavault4dbt.snowflake__ma_sat_v1": {"unique_id": "macro.datavault4dbt.snowflake__ma_sat_v1", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/snowflake/ma_sat_v1.sql", "original_file_path": "macros/tables/snowflake/ma_sat_v1.sql", "name": "snowflake__ma_sat_v1", "macro_sql": "{%- macro snowflake__ma_sat_v1(sat_v0, hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc, ledts_alias, add_is_current_flag) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set is_current_col_alias = var('datavault4dbt.is_current_col_alias', 'IS_CURRENT') -%}\n\n{%- set source_relation = ref(sat_v0) -%}\n{%- set all_columns = datavault4dbt.source_columns(source_relation=source_relation) -%}\n{%- set exclude = datavault4dbt.expand_column_list(columns=[hashkey, hashdiff, ma_attribute, src_ldts, src_rsrc]) -%}\n{%- set ma_attributes = datavault4dbt.expand_column_list(columns=[ma_attribute]) -%}\n\n\n{%- set source_columns_to_select = datavault4dbt.process_columns_to_select(all_columns, exclude) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Getting everything from the underlying v0 satellite. #}\nsource_satellite AS (\n\n    SELECT src.*\n    FROM {{ source_relation }} as src\n\n),\n\n{# Selecting all distinct loads per hashkey. #}\ndistinct_hk_ldts AS (\n\n    SELECT DISTINCT\n        {{ hashkey }},\n        {{ src_ldts }}\n    FROM source_satellite\n\n),\n\n{# End-dating each ldts for each hashkey, based on earlier ldts per hashkey. #}\nend_dated_loads AS (\n\n    SELECT\n        {{ hashkey }},\n        {{ src_ldts }},\n        COALESCE(LEAD({{ src_ldts }} - INTERVAL '1 MICROSECOND') OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}),{{ datavault4dbt.string_to_timestamp(timestamp_format,end_of_all_times) }}) as {{ ledts_alias }}\n    FROM distinct_hk_ldts\n\n),\n\n{# End-date each source record, based on the end-date for each load. #}\nend_dated_source AS (\n\n    SELECT\n        src.{{ hashkey }},\n        src.{{ hashdiff }},\n        src.{{ src_rsrc }},\n        src.{{ src_ldts }},\n        edl.{{ ledts_alias }},\n        {%- if add_is_current_flag %}\n            CASE WHEN {{ ledts_alias }} = {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n              THEN TRUE\n              ELSE FALSE\n            END AS {{ is_current_col_alias }},\n        {% endif %}\n        {{- datavault4dbt.print_list(ma_attributes, indent=10, src_alias='src') }},\n        {{- datavault4dbt.print_list(source_columns_to_select, indent=10, src_alias='src') }}\n    FROM source_satellite AS src\n    LEFT JOIN end_dated_loads edl\n        ON src.{{ hashkey }} = edl.{{ hashkey }}\n        AND src.{{ src_ldts }} = edl.{{ src_ldts }}\n\n)\n\nSELECT * FROM end_dated_source\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.source_columns", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.process_columns_to_select", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.542977}, "macro.datavault4dbt.snowflake__control_snap_v0": {"unique_id": "macro.datavault4dbt.snowflake__control_snap_v0", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/snowflake/control_snap_v0.sql", "original_file_path": "macros/tables/snowflake/control_snap_v0.sql", "name": "snowflake__control_snap_v0", "macro_sql": "{%- macro snowflake__control_snap_v0(start_date, daily_snapshot_time, sdts_alias) -%}\n\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n{%- set start_date = start_date | replace('00:00:00', daily_snapshot_time) -%}\n\nWITH \n\ninitial_timestamps AS (\n    \n    SELECT\n        DATEADD(DAY, SEQ4(), \n        TIMESTAMPADD(SECOND, EXTRACT(SECOND FROM TO_TIME('{{ daily_snapshot_time }}')), \n            TIMESTAMPADD(MINUTE, EXTRACT(MINUTE FROM TO_TIME('{{ daily_snapshot_time }}')), \n                TIMESTAMPADD(HOUR, EXTRACT(HOUR FROM TO_TIME('{{ daily_snapshot_time }}')), TO_DATE('{{ start_date }}', 'YYYY-MM-DD')))\n                ))::TIMESTAMP AS sdts\n    FROM \n        TABLE(GENERATOR(ROWCOUNT => 100000))\n    WHERE \n        sdts <= CURRENT_TIMESTAMP\n    {%- if is_incremental() %}\n    AND sdts > (SELECT MAX({{ sdts_alias }}) FROM {{ this }})\n    {%- endif %}\n\n),\n\nenriched_timestamps AS (\n\n    SELECT\n        sdts as {{ sdts_alias }},\n        TRUE as force_active,\n        sdts AS replacement_sdts,\n        CONCAT('Snapshot ', DATE(sdts)) AS caption,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END AS is_hourly,\n        CASE\n            WHEN EXTRACT(MINUTE FROM sdts) = 0 AND EXTRACT(SECOND FROM sdts) = 0 AND EXTRACT(HOUR FROM sdts) = 0 THEN TRUE\n            ELSE FALSE\n        END AS is_daily,\n        CASE\n            WHEN EXTRACT(DAYOFWEEK FROM  sdts) = 2 THEN TRUE\n            ELSE FALSE\n        END AS is_weekly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_monthly,\n        CASE\n            WHEN EXTRACT(DAY FROM sdts) = 1 AND EXTRACT(MONTH FROM sdts) = 1 THEN TRUE\n            ELSE FALSE\n        END AS is_yearly,\n        NULL AS comment\n    FROM initial_timestamps\n\n)\n\nSELECT * FROM enriched_timestamps\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.timestamp_format", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.54548}, "macro.datavault4dbt.snowflake__hub": {"unique_id": "macro.datavault4dbt.snowflake__hub", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/snowflake/hub.sql", "original_file_path": "macros/tables/snowflake/hub.sql", "name": "snowflake__hub", "macro_sql": "{%- macro snowflake__hub(hashkey, business_keys, src_ldts, src_rsrc, source_models) -%}\n\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns = namespace(last_cte= \"\", source_included_before = {}, has_rsrc_static_defined=true, source_models_rsrc_dict={}) -%}\n\n{# Select the Business Key column from the first source model definition provided in the hub model and put them in an array. #}\n{%- set business_keys = datavault4dbt.expand_column_list(columns=[business_keys]) -%}\n\n{# If no specific bk_columns is defined for each source, we apply the values set in the business_keys variable. #}\n{# If no specific hk_column is defined for each source, we apply the values set in the hashkey variable. #}\n{# If no rsrc_static parameter is defined in ANY of the source models then the whole code block of record_source performance lookup is not executed  #}\n{# For the use of record_source performance lookup it is required that every source model has the parameter rsrc_static defined and it cannot be an empty string #}\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n{%- for source_model in source_models.keys() -%}\n\n    {%- if 'hk_column' not in source_models[source_model].keys() -%}\n        {%- do source_models[source_model].update({'hk_column': hashkey}) -%}\n    {%- endif -%}\n\n    {%- if 'bk_columns' in source_models[source_model].keys() -%}\n        {%- set bk_column_input = source_models[source_model]['bk_columns'] -%}\n\n        {%- if not (bk_column_input is iterable and bk_column_input is not string) -%}\n            {%- set bk_column_input = [bk_column_input] -%}\n        {%- endif -%}\n\n        {%- do source_models[source_model].update({'bk_columns': bk_column_input}) -%}\n    {%- elif not datavault4dbt.is_list(bk_column_input) -%}\n        {%- set bk_list = datavault4dbt.expand_column_list(columns=[bk_column_input]) -%}\n        {%- do source_models[source_model].update({'bk_columns': bk_list}) -%}\n    {%- else -%}{%- do source_models[source_model].update({'bk_columns': business_keys}) -%}\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n        {%- set ns.has_rsrc_static_defined = false -%}\n    {%- else -%}\n\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- endfor -%}\n\n{%- set final_columns_to_select = [hashkey] + business_keys + [src_ldts] + [src_rsrc] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() -%}\n{# Get all target hashkeys out of the existing hub for later incremental logic. #}\n    distinct_target_hashkeys AS (\n\n        SELECT\n            {{ hashkey }}\n        FROM {{ this }}\n\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        {% for source_model in source_models.keys() %}\n         {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = loop.index | string -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT t.{{ src_rsrc }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            rsrc_static_{{ source_number }} AS (\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    t.*,\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }} t\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %}\n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n                {%- set ns.last_cte = \"rsrc_static_{}\".format(source_number) -%}\n            ),\n\n            {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n            {%- set source_in_target = true -%}\n\n            {% if not rsrc_static_result %}\n                {%- set source_in_target = false -%}\n            {% endif %}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n\n        {% endfor -%}\n\n        {%- if source_models.keys() | length > 1 %}\n\n        rsrc_static_union AS (\n            {#  Create one unionized table over all sources. It will be the same as the already existing\n                hub, but extended by the rsrc_static column. #}\n            {% for source_model in source_models.keys() %}\n            {%- set source_number = loop.index | string -%}\n\n            SELECT rsrc_static_{{ source_number }}.* FROM rsrc_static_{{ source_number }}\n\n            {%- if not loop.last %}\n            UNION ALL\n            {% endif -%}\n            {%- endfor %}\n            {%- set ns.last_cte = \"rsrc_static_union\" -%}\n        ),\n\n        {%- endif %}\n\n        max_ldts_per_rsrc_static_in_target AS (\n        {# Use the previously created CTE to calculate the max load date timestamp per rsrc_static. #}\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif %}\n{% endif -%}\n\n{% for source_model in source_models.keys() %}\n\n    {%- set source_number = loop.index | string -%}\n\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n    {%- endif -%}\n\n    {%- if 'hk_column' not in source_models[source_model].keys() %}\n        {%- set hk_column = hashkey -%}\n    {%- else -%}\n        {%- set hk_column = source_models[source_model]['hk_column'] -%}\n    {% endif %}\n\n    src_new_{{ source_number }} AS (\n\n        SELECT\n            {{ hk_column }} AS {{ hashkey }},\n            {% for bk in source_models[source_model]['bk_columns'] -%}\n            {{ bk }},\n            {% endfor -%}\n\n            {{ src_ldts }},\n            {{ src_rsrc }}\n        FROM {{ ref(source_model) }} src\n\n    {%- if is_incremental() and ns.has_rsrc_static_defined and ns.source_included_before[source_model] %}\n        INNER JOIN max_ldts_per_rsrc_static_in_target max ON\n        ({%- for rsrc_static in rsrc_statics -%}\n            max.rsrc_static = '{{ rsrc_static }}'\n            {%- if not loop.last -%} OR\n            {% endif -%}\n        {%- endfor %})\n        WHERE src.{{ src_ldts }} > max.max_ldts\n    {%- endif %}\n\n         {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n    ),\n{%- endfor -%}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n\n    {%- for source_model in source_models.keys() -%}\n\n    {%- set source_number = loop.index | string -%}\n\n    SELECT\n        {{ hashkey }},\n\n        {% for bk in source_models[source_model]['bk_columns'] -%}\n            {{ bk }} AS {{ business_keys[loop.index - 1] }},\n        {% endfor -%}\n\n        {{ src_ldts }},\n        {{ src_rsrc }}\n    FROM src_new_{{ source_number }}\n\n    {%- if not loop.last %}\n    UNION ALL\n    {% endif -%}\n\n    {%- endfor -%}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif %}\n\nearliest_hk_over_all_sources AS (\n\n    {#- Deduplicate the unionized records again to only insert the earliest one. #}\n    SELECT\n        lcte.*\n    FROM {{ ns.last_cte }} AS lcte\n\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY {{ hashkey }} ORDER BY {{ src_ldts }}) = 1\n\n    {%- set ns.last_cte = 'earliest_hk_over_all_sources' -%}\n\n),\n\nrecords_to_insert AS (\n    {#- Select everything from the previous CTE, if incremental filter for hashkeys that are not already in the hub. #}\n    SELECT\n        {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n\n    {%- if is_incremental() %}\n    WHERE {{ hashkey }} NOT IN (SELECT * FROM distinct_target_hashkeys)\n    {% endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.is_list", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.5668144}, "macro.datavault4dbt.snowflake__rec_track_sat": {"unique_id": "macro.datavault4dbt.snowflake__rec_track_sat", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/snowflake/rec_track_sat.sql", "original_file_path": "macros/tables/snowflake/rec_track_sat.sql", "name": "snowflake__rec_track_sat", "macro_sql": "{%- macro snowflake__rec_track_sat(tracked_hashkey, source_models, src_ldts, src_rsrc, src_stg) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{# Setting the unknown and error ghost record value for record source column #}\n{%- set rsrc_unknown = var('datavault4dbt.default_unknown_rsrc', 'SYSTEM') -%}\n{%- set rsrc_error = var('datavault4dbt.default_error_rsrc', 'ERROR') -%}\n\n{# Setting the rsrc and stg_alias default datatype and length #}\n{%- set rsrc_default_dtype = var('datavault4dbt.rsrc_default_dtype', 'STRING') -%}\n{%- set stg_default_dtype = var('datavault4dbt.stg_default_dtype', 'STRING') -%}\n{%- set ns = namespace(last_cte = '', source_included_before = {},  source_models_rsrc_dict={},  has_rsrc_static_defined=true) -%}\n\n{%- if source_models is not mapping -%}\n    {%- set source_models = {source_models: {}} -%}\n{%- endif -%}\n\n\n{# If no specific hk_column is defined for each source, we apply the values set in the tracked_hashkey input variable. #}\n{# If no rsrc_static parameter is defined in a source model then the record source performance look up wont be executed  #}\n{%- for source_model in source_models.keys() %}\n\n    {%- if 'hk_column' not in source_models[source_model].keys() -%}\n        {%- do source_models[source_model].update({'hk_column': tracked_hashkey}) -%}\n    {%- endif -%}\n\n    {%- if 'rsrc_static' not in source_models[source_model].keys() -%}\n        {%- set ns.has_rsrc_static_defined = false -%}\n    {%- else -%}\n\n        {%- if not (source_models[source_model]['rsrc_static'] is iterable and source_models[source_model]['rsrc_static'] is not string) -%}\n\n            {%- if source_models[source_model]['rsrc_static'] == '' or source_models[source_model]['rsrc_static'] is none -%}\n                {%- if execute -%}\n                    {{ exceptions.raise_compiler_error(\"If rsrc_static is defined -> it must not be an empty string \") }}\n                {%- endif %}\n            {%- else -%}\n                {%- do ns.source_models_rsrc_dict.update({source_model : [source_models[source_model]['rsrc_static']] } ) -%}\n            {%- endif -%}\n\n        {%- elif source_models[source_model]['rsrc_static'] is iterable -%}\n            {%- do ns.source_models_rsrc_dict.update({source_model : source_models[source_model]['rsrc_static'] } ) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n\n{% endfor %}\n\n{%- set final_columns_to_select = [tracked_hashkey] + [src_ldts] + [src_rsrc] + [src_stg] -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{% if is_incremental() %}\n\n    distinct_concated_target AS (\n        {%- set concat_columns = [tracked_hashkey, src_ldts, src_rsrc] -%}\n        {{ \"\\n\" }}\n        SELECT\n        {{ datavault4dbt.concat_ws(concat_columns) }} as concat\n        FROM {{ this }}\n    ),\n    {%- if ns.has_rsrc_static_defined -%}\n        rsrc_static_unionized AS (\n        {% for source_model in source_models.keys() %}\n        {# Create a query with a rsrc_static column with each rsrc_static for each source model. #}\n            {%- set source_number = loop.index | string -%}\n            {%- set hk_column = source_models[source_model]['hk_column'] -%}\n            {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n            {%- set rsrc_static_query_source -%}\n                {%- for rsrc_static in rsrc_statics -%}\n                    SELECT \n                    {{ tracked_hashkey }},\n                    {{ src_ldts }},\n                    '{{ rsrc_static }}' AS rsrc_static\n                    FROM {{ this }}\n                    WHERE {{ src_rsrc }} like '{{ rsrc_static }}'\n                    {%- if not loop.last %} \n                        UNION ALL\n                    {% endif -%}\n                {%- endfor -%}\n            {% endset %}\n\n            {{ rsrc_static_query_source }}  \n\n            {%- set rsrc_static_result = run_query(rsrc_static_query_source) -%}\n            {%- set source_in_target = true -%}\n\n            {% if not rsrc_static_result %}\n                {%- set source_in_target = false -%}\n            {% endif %}\n\n            {%- do ns.source_included_before.update({source_model: source_in_target}) -%}\n            {# Unionize over all sources #}\n            {%- if not loop.last %}\n                UNION ALL \n            {% endif -%}\n\n        {% endfor -%}\n        {%- set ns.last_cte = \"rsrc_static_unionized\" -%}\n        ),\n\n        max_ldts_per_rsrc_static_in_target AS (\n\n            SELECT\n                rsrc_static,\n                MAX({{ src_ldts }}) as max_ldts\n            FROM {{ ns.last_cte }}\n            WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n            GROUP BY rsrc_static\n\n        ),\n    {%- endif -%}\n{% endif -%}\n\n{#\n    We deduplicate each source over hashkey + ldts + rsrc_static and if is_incremental only select the rows, where the ldts is later\n    than the latest one in the existing satellite for that rsrc_static. If a source is added to the existing satellite, all deduplicated\n    rows from that source are loaded into the satellite.\n#}\n\n{%- for source_model in source_models.keys() %}\n\n    {%- set source_number = loop.index | string -%}\n    {%- set hk_column = source_models[source_model]['hk_column'] -%}\n    {%- if ns.has_rsrc_static_defined -%}\n        {%- set rsrc_statics = ns.source_models_rsrc_dict[source_model] -%}\n\n        src_new_{{ source_number }} AS (\n        {%- for rsrc_static in rsrc_statics %}\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST('{{ rsrc_static }}' AS {{ rsrc_default_dtype }} ) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model }}') AS {{ stg_default_dtype }})  AS {{ src_stg }}\n            FROM {{ ref(source_model) }} src\n\n\n            {%- if is_incremental() and ns.source_included_before[source_model] %}\n                INNER JOIN max_ldts_per_rsrc_static_in_target max\n                    ON max.rsrc_static = '{{ rsrc_static }}'\n                WHERE src.{{ src_ldts }} > max.max_ldts\n            {%- endif %}\n\n            {%- if not loop.last %}\n                UNION ALL\n            {% endif -%}\n        {% endfor %}\n\n        ),\n    {%- else -%}\n        src_new_{{ source_number}} AS (\n            SELECT DISTINCT\n                {{ hk_column }} AS {{ tracked_hashkey }},\n                {{ src_ldts }},\n                CAST({{ src_rsrc }} AS {{ rsrc_default_dtype }}) AS {{ src_rsrc }},\n                CAST(UPPER('{{ source_model }}') AS {{ stg_default_dtype }}) AS {{ src_stg }}\n            FROM {{ ref(source_model) }} src\n        ),\n    {%- endif -%}\n\n    {%- set ns.last_cte = \"src_new_{}\".format(source_number) %}\n\n{% endfor %}\n\n{#\n    If more than one source model is selected, all previously created deduplicated CTEs are unionized.\n#}\n\n{%- if source_models.keys() | length > 1 %}\n\nsource_new_union AS (\n    {% for source_model in source_models.keys() %}\n        {%- set hk_column = source_models[source_model]['hk_column'] -%}\n        {%- set source_number = loop.index | string -%}\n\n        SELECT\n        {{ tracked_hashkey }},\n        {{ src_ldts }},\n        {{ src_rsrc }},\n        {{ src_stg }}\n        FROM src_new_{{ source_number }}\n\n        {%- if not loop.last %}\n        UNION ALL\n        {% endif -%}\n\n    {% endfor %}\n\n    {%- set ns.last_cte = 'source_new_union' -%}\n\n),\n\n{%- endif -%}\n\n{#\n    Selecting everything, either from the unionized data, or from the single CTE (if single source). Checking against the existing\n    satellite to only inserts that are not already inserted, if incremental run.\n#}\n\nrecords_to_insert AS (\n\n    SELECT\n    {{ datavault4dbt.print_list(final_columns_to_select) }}\n    FROM {{ ns.last_cte }}\n    WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }} \n    AND {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}\n    {%- if is_incremental() %}\n        AND {{ datavault4dbt.concat_ws(concat_columns) }} NOT IN (SELECT * FROM distinct_concated_target)\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.concat_ws", "macro.dbt.run_query", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.print_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.5843606}, "macro.datavault4dbt.snowflake__sat_v0": {"unique_id": "macro.datavault4dbt.snowflake__sat_v0", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/snowflake/sat_v0.sql", "original_file_path": "macros/tables/snowflake/sat_v0.sql", "name": "snowflake__sat_v0", "macro_sql": "{%- macro snowflake__sat_v0(parent_hashkey, src_hashdiff, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set ns=namespace(src_hashdiff=\"\", hdiff_alias=\"\") %}\n\n{%- if  src_hashdiff is mapping and src_hashdiff is not none -%}\n    {% set ns.src_hashdiff = src_hashdiff[\"source_column\"] %}\n    {% set ns.hdiff_alias = src_hashdiff[\"alias\"] %}\n{% else %}\n    {% set ns.src_hashdiff = src_hashdiff %}\n    {% set ns.hdiff_alias = src_hashdiff  %}\n{%- endif -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[src_rsrc, src_ldts, src_payload]) -%}\n\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{# Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ ns.src_hashdiff }} as {{ ns.hdiff_alias }},\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM {{ source_relation }}\n\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT\n            MAX({{ src_ldts }}) FROM {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n\n{# Get the latest record for each parent hashkey in existing sat, if incremental. #}\n{%- if is_incremental() %}\nlatest_entries_in_sat AS (\n\n    SELECT\n        {{ parent_hashkey }},\n        {{ src_hashdiff }}\n    FROM \n        {{ this }}\n    QUALIFY ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }} DESC) = 1  \n),\n{%- endif %}\n\n{#\n    Deduplicate source by comparing each hashdiff to the hashdiff of the previous record, for each hashkey.\n    Additionally adding a row number based on that order, if incremental.\n#}\ndeduplicated_numbered_source AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    {% if is_incremental() -%}\n    , ROW_NUMBER() OVER(PARTITION BY {{ parent_hashkey }} ORDER BY {{ src_ldts }}) as rn\n    {%- endif %}\n    FROM source_data\n    QUALIFY\n        CASE\n            WHEN {{ ns.hdiff_alias }} = LAG({{ ns.hdiff_alias }}) OVER(PARTITION BY {{ parent_hashkey|lower }} ORDER BY {{ src_ldts }}) THEN FALSE\n            ELSE TRUE\n        END\n),\n\n{#\n    Select all records from the previous CTE. If incremental, compare the oldest incoming entry to\n    the existing records in the satellite.\n#}\nrecords_to_insert AS (\n\n    SELECT\n    {{ parent_hashkey }},\n    {{ ns.hdiff_alias }},\n    {{ datavault4dbt.print_list(source_cols) }}\n    FROM deduplicated_numbered_source\n    {%- if is_incremental() %}\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM latest_entries_in_sat\n        WHERE {{ datavault4dbt.multikey(parent_hashkey, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND {{ datavault4dbt.multikey(ns.hdiff_alias, prefix=['latest_entries_in_sat', 'deduplicated_numbered_source'], condition='=') }}\n            AND deduplicated_numbered_source.rn = 1)\n    {%- endif %}\n\n    )\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.multikey"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.5911474}, "macro.datavault4dbt.snowflake__pit": {"unique_id": "macro.datavault4dbt.snowflake__pit", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/snowflake/pit.sql", "original_file_path": "macros/tables/snowflake/pit.sql", "name": "snowflake__pit", "macro_sql": "{%- macro snowflake__pit(tracked_entity, hashkey, sat_names, ldts, ledts, sdts, snapshot_relation, dimension_key,snapshot_trigger_column=none, custom_rsrc=none, pit_type=none) -%}\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- set rsrc = var('datavault4dbt.rsrc_alias', 'rsrc') -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if datavault4dbt.is_something(pit_type) -%}\n    {%- set hashed_cols = [pit_type, datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- else -%}\n    {%- set hashed_cols = [datavault4dbt.prefix([hashkey],'te'), datavault4dbt.prefix([sdts], 'snap')] -%}\n{%- endif -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n\n{%- if is_incremental() %}\n\nexisting_dimension_keys AS (\n\n    SELECT\n        {{ dimension_key }}\n    FROM {{ this }}\n\n),\n\n{%- endif %}\n\npit_records AS (\n\n    SELECT\n        \n        {% if datavault4dbt.is_something(pit_type) -%}\n            {{ datavault4dbt.as_constant(pit_type) }} as type,\n        {%- endif %}\n        {% if datavault4dbt.is_something(custom_rsrc) -%}\n        '{{ custom_rsrc }}' as {{ rsrc }},\n        {%- endif %}\n        {{ datavault4dbt.hash(columns=hashed_cols,\n                    alias=dimension_key,\n                    is_hashdiff=false)   }} ,\n        te.{{ hashkey }},\n        snap.{{ sdts }},\n        {%- for satellite in sat_names %}\n            COALESCE({{ satellite }}.{{ hashkey }}, CAST({{ unknown_key }} AS {{ hash_dtype }})) AS hk_{{ satellite }},\n            COALESCE({{ satellite }}.{{ ldts }}, {{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }}) AS {{ ldts }}_{{ satellite }}\n            {{- \",\" if not loop.last }}\n        {%- endfor %}\n\n    FROM\n            {{ ref(tracked_entity) }} te\n        FULL OUTER JOIN\n            {{ ref(snapshot_relation) }} snap\n            {% if datavault4dbt.is_something(snapshot_trigger_column) -%}\n                ON snap.{{ snapshot_trigger_column }} = true\n            {% else -%}\n                ON 1=1\n            {%- endif %}\n        {% for satellite in sat_names %}\n        {%- set sat_columns = datavault4dbt.source_columns(ref(satellite)) %}\n        LEFT JOIN {{ ref(satellite) }}\n            ON\n                {{ satellite }}.{{ hashkey}} = te.{{ hashkey }}\n                {%- if ledts|string|lower in sat_columns|map('lower') %}\n                    AND snap.{{ sdts }} BETWEEN {{ satellite }}.{{ ldts }} AND {{ satellite }}.{{ ledts }}\n                {%- else %}\n                    AND {{ satellite }}.{{ ldts }} > snap.{{ sdts }}\n                {%- endif -%}\n        {% endfor %}\n    {% if datavault4dbt.is_something(snapshot_trigger_column) %}\n        WHERE snap.{{ snapshot_trigger_column }}\n    {%- endif %}\n\n),\n\nrecords_to_insert AS (\n\n    SELECT *\n    FROM pit_records\n    {%- if is_incremental() %}\n    WHERE {{ dimension_key }} NOT IN (SELECT * FROM existing_dimension_keys)\n    {% endif -%}\n\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.is_something", "macro.datavault4dbt.prefix", "macro.datavault4dbt.prepend_generated_by", "macro.dbt.is_incremental", "macro.datavault4dbt.as_constant", "macro.datavault4dbt.hash", "macro.datavault4dbt.string_to_timestamp", "macro.datavault4dbt.source_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.603295}, "macro.datavault4dbt.snowflake__nh_sat": {"unique_id": "macro.datavault4dbt.snowflake__nh_sat", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/tables/snowflake/nh_sat.sql", "original_file_path": "macros/tables/snowflake/nh_sat.sql", "name": "snowflake__nh_sat", "macro_sql": "{%- macro snowflake__nh_sat(parent_hashkey, src_payload, src_ldts, src_rsrc, source_model) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set source_cols = datavault4dbt.expand_column_list(columns=[parent_hashkey, src_ldts, src_rsrc, src_payload]) -%}\n{%- set source_relation = ref(source_model) -%}\n\n{{ datavault4dbt.prepend_generated_by() }}\n\nWITH\n{#- Selecting all source data, that is newer than latest data in sat if incremental #}\nsource_data AS \n(\n    SELECT\n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM \n        {{ source_relation }}\n    {%- if is_incremental() %}\n    WHERE {{ src_ldts }} > (\n        SELECT \n            MAX({{ src_ldts }}) \n        FROM \n            {{ this }}\n        WHERE {{ src_ldts }} != {{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }}\n    )\n    {%- endif %}\n),\n{% if is_incremental() -%}\n{#- Get distinct list of hashkeys inside the existing satellite, if incremental. #}\ndistinct_hashkeys AS \n(\n    SELECT DISTINCT\n        {{ parent_hashkey }}\n    FROM \n        {{ this }}    \n),\n{%- endif %}\n{#- Select all records from the source. If incremental, insert only records, where the\n    hashkey is not already in the existing satellite. #}\nrecords_to_insert AS \n(\n    SELECT \n        {{ datavault4dbt.print_list(source_cols) }}\n    FROM \n        source_data\n    {%- if is_incremental() %}\n    WHERE {{ parent_hashkey }} NOT IN (SELECT * FROM distinct_hashkeys)\n    {%- endif %}\n)\nSELECT \n  * \nFROM \n  records_to_insert                      \n \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.expand_column_list", "macro.datavault4dbt.prepend_generated_by", "macro.datavault4dbt.print_list", "macro.dbt.is_incremental", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6065173}, "macro.datavault4dbt.attribute_standardise": {"unique_id": "macro.datavault4dbt.attribute_standardise", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "name": "attribute_standardise", "macro_sql": "{% macro attribute_standardise() %}\n        {{- adapter.dispatch('attribute_standardise', 'datavault4dbt')() -}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.snowflake__attribute_standardise"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6340396}, "macro.datavault4dbt.default__attribute_standardise": {"unique_id": "macro.datavault4dbt.default__attribute_standardise", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "name": "default__attribute_standardise", "macro_sql": "\n\n{%- macro default__attribute_standardise() -%}\n\nCONCAT('\\\"', REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(CAST([EXPRESSION] AS STRING)), r'\\\\', r'\\\\\\\\'), '[QUOTE]', '\\\"'), '[NULL_PLACEHOLDER_STRING]', '--'), '\\\"')\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6342597}, "macro.datavault4dbt.exasol__attribute_standardise": {"unique_id": "macro.datavault4dbt.exasol__attribute_standardise", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "name": "exasol__attribute_standardise", "macro_sql": "{%- macro exasol__attribute_standardise() -%}\n\n{%- set concat_string = var('concat_string', '||') -%}\n{%- set quote = var('quote', '\"') -%}\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n\nCONCAT('\"', REPLACE(REPLACE(REPLACE(TRIM(CAST([EXPRESSION] AS VARCHAR(20000) UTF8 )), '\\\\\\', '\\\\\\\\\\'), '[QUOTE]', '\"'), '[NULL_PLACEHOLDER_STRING]', '--'), '\\\"')\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.634928}, "macro.datavault4dbt.snowflake__attribute_standardise": {"unique_id": "macro.datavault4dbt.snowflake__attribute_standardise", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "name": "snowflake__attribute_standardise", "macro_sql": "{%- macro snowflake__attribute_standardise() -%}\n\nCONCAT('\\'', REPLACE(REPLACE(REPLACE(TRIM(CAST([EXPRESSION] AS STRING)), '\\\\', '\\\\\\\\'), '[QUOTE]', '\\\"'), '[NULL_PLACEHOLDER_STRING]', '--'), '\\'')\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6351233}, "macro.datavault4dbt.concattenated_standardise": {"unique_id": "macro.datavault4dbt.concattenated_standardise", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "name": "concattenated_standardise", "macro_sql": "{%- macro concattenated_standardise(case_sensitive, hash_alg, all_null, zero_key, alias) -%}\n\n{{ return(adapter.dispatch('concattenated_standardise', 'datavault4dbt')(case_sensitive=case_sensitive,\n                                                                              hash_alg=hash_alg,\n                                                                              all_null=all_null,\n                                                                              zero_key=zero_key,\n                                                                              alias=alias) )}}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.snowflake__concattenated_standardise"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6357872}, "macro.datavault4dbt.default__concattenated_standardise": {"unique_id": "macro.datavault4dbt.default__concattenated_standardise", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "name": "default__concattenated_standardise", "macro_sql": "{%- macro default__concattenated_standardise(case_sensitive, hash_alg, all_null, zero_key, alias) -%}\n\n{%- set dict_result = {} -%}\n\n{%- if case_sensitive -%}\n    {%- set standardise_prefix = \"IFNULL(TO_HEX(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n    {%- set standardise_suffix = \"\\n)), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '{}')))), '{}') AS {}\".format(all_null | join(\"\"),zero_key, alias)-%}\n{%- else -%}\n    {%- set standardise_prefix = \"IFNULL(TO_HEX(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n    {%- set standardise_suffix = \"\\n), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '{}')))), '{}') AS {}\".format(all_null | join(\"\"),zero_key, alias)-%}\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6374354}, "macro.datavault4dbt.snowflake__concattenated_standardise": {"unique_id": "macro.datavault4dbt.snowflake__concattenated_standardise", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "name": "snowflake__concattenated_standardise", "macro_sql": "{%- macro snowflake__concattenated_standardise(case_sensitive, hash_alg, all_null, zero_key, alias) -%}\n\n{%- set dict_result = {} -%}\n\n{%- if case_sensitive -%}\n    {%- set standardise_prefix = \"IFNULL(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n    {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '{}'))), '{}') AS {}\".format(all_null | join(\"\"),zero_key, alias)-%}\n{%- else -%}\n    {%- set standardise_prefix = \"IFNULL(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n    {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '{}'))), '{}') AS {}\".format(all_null | join(\"\"),zero_key, alias)-%}\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6390977}, "macro.datavault4dbt.exasol__concattenated_standardise": {"unique_id": "macro.datavault4dbt.exasol__concattenated_standardise", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "name": "exasol__concattenated_standardise", "macro_sql": "{%- macro exasol__concattenated_standardise(case_sensitive, hash_alg, all_null, zero_key, alias) -%}\n{%- set dict_result = {} -%}\n{%- if case_sensitive -%}\n    {%- set standardise_prefix = \"NULLIF({}(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n    {%- if alias is not none -%}\n        {%- set standardise_suffix = \")), char(10), '') , char(9), ''), char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8),'{}')), '{}') AS {} \".format(all_null | join(\"\"), zero_key, alias) -%}\n    {%- else -%}\n        {%- set standardise_suffix = \")), char(10), '') , char(9), ''), char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8),'{}')), '{}')\".format(all_null | join(\"\"), zero_key, alias) -%}\n    {%- endif -%}\n\n{%- else -%}\n    {%- set standardise_prefix = \"NULLIF({}(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(CONCAT(\".format(hash_alg) -%}\n\n    {%- if alias is not none -%}\n        {%- set standardise_suffix = \"), char(10), '') , char(9), '') , char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8), '{}')), '{}') AS {} \".format(all_null | join(\"\"), zero_key , alias) -%}\n    {%- else %}\n        {%- set standardise_suffix = \"), char(10), '') , char(9), '') , char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8), '{}')), '{}')\".format(all_null | join(\"\"), zero_key) -%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n\n\n\n\n\n\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.641493}, "macro.datavault4dbt.multi_active_concattenated_standardise": {"unique_id": "macro.datavault4dbt.multi_active_concattenated_standardise", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "name": "multi_active_concattenated_standardise", "macro_sql": "{%- macro multi_active_concattenated_standardise(case_sensitive, hash_alg, all_null, zero_key, alias, multi_active_key, main_hashkey_column) -%}\n\n{{ adapter.dispatch('multi_active_concattenated_standardise', 'datavault4dbt')(case_sensitive=case_sensitive,\n                                                                              hash_alg=hash_alg,\n                                                                              all_null=all_null,\n                                                                              zero_key=zero_key,\n                                                                              alias=alias,\n                                                                              multi_active_key=multi_active_key,\n                                                                              main_hashkey_column=main_hashkey_column) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.snowflake__multi_active_concattenated_standardise"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6422868}, "macro.datavault4dbt.default__multi_active_concattenated_standardise": {"unique_id": "macro.datavault4dbt.default__multi_active_concattenated_standardise", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "name": "default__multi_active_concattenated_standardise", "macro_sql": "{%- macro default__multi_active_concattenated_standardise(case_sensitive, hash_alg, all_null, zero_key, alias, multi_active_key, main_hashkey_column) -%}\n{%- set dict_result = {} -%}\n\n{%- if datavault4dbt.is_list(multi_active_key) -%}\n    {%- set multi_active_key = multi_active_key|join(\", \") -%}\n{%- endif -%}\n\n{%- if case_sensitive -%}\n    {%- set standardise_prefix = \"IFNULL(TO_HEX(LOWER({}(STRING_AGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n    {%- set standardise_suffix = \"\\n)), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '{}') ORDER BY {})))), '{}') AS {}\".format(all_null | join(\"\"),multi_active_key,zero_key, alias)-%}\n{%- else -%}\n    {%- set standardise_prefix = \"IFNULL(TO_HEX(LOWER({}(STRING_AGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n    {%- set standardise_suffix = \"\\n), r'\\\\n', '') \\n, r'\\\\t', '') \\n, r'\\\\v', '') \\n, r'\\\\r', '') AS STRING), '{}') ORDER BY {})))), '{}') AS {}\".format(all_null | join(\"\"),multi_active_key,zero_key, alias)-%}\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6442847}, "macro.datavault4dbt.exasol__multi_active_concattenated_standardise": {"unique_id": "macro.datavault4dbt.exasol__multi_active_concattenated_standardise", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "name": "exasol__multi_active_concattenated_standardise", "macro_sql": "{%- macro exasol__multi_active_concattenated_standardise(case_sensitive, hash_alg, all_null, zero_key, alias, multi_active_key, main_hashkey_column) -%}\n\n    {%- set dict_result = {} -%}\n\n    {%- if multi_active_key is not string and multi_active_key is iterable -%}\n        {%- set multi_active_key = multi_active_key|join(\", \") -%}\n    {%- endif -%}\n    {%- if case_sensitive -%}\n        {%- set standardise_prefix = \"NULLIF({}(LISTAGG(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \")), char(10), '') , char(9), ''), char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8),'{}')) WITHIN GROUP (ORDER BY {})), '{}') AS {} \".format(all_null | join(\"\"), multi_active_key, zero_key, alias) -%}\n        {%- else -%}\n            {%- set standardise_suffix = \")), char(10), '') , char(9), ''), char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8),'{}')) WITHIN GROUP (ORDER BY {})), '{}')\".format(all_null | join(\"\"), multi_active_key, zero_key, alias) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- set standardise_prefix = \"NULLIF({}(LISTAGG(NULLIF(CAST(REPLACE(REPLACE(REPLACE(REPLACE(CONCAT(\".format(hash_alg) -%}\n\n        {%- if alias is not none -%}\n            {%- set standardise_suffix = \"), char(10), '') , char(9), '') , char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8), '{}')) WITHIN GROUP (ORDER BY {})), '{}') AS {} \".format(all_null | join(\"\"), multi_active_key, zero_key , alias) -%}\n        {%- else %}\n            {%- set standardise_suffix = \"), char(10), '') , char(9), '') , char(11), '') , char(13), '') AS VARCHAR(2000000) UTF8), '{}')) WITHIN GROUP (ORDER BY {})), '{}')\".format(all_null | join(\"\"),  multi_active_key, zero_key) -%}\n        {%- endif -%}\n\n    {%- endif -%}\n    {%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n    {{ return(dict_result | tojson ) }}\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.64738}, "macro.datavault4dbt.snowflake__multi_active_concattenated_standardise": {"unique_id": "macro.datavault4dbt.snowflake__multi_active_concattenated_standardise", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_standardization.sql", "original_file_path": "macros/supporting/hash_standardization.sql", "name": "snowflake__multi_active_concattenated_standardise", "macro_sql": "{%- macro snowflake__multi_active_concattenated_standardise(case_sensitive, hash_alg, all_null, zero_key, alias, multi_active_key, main_hashkey_column) -%}\n\n{%- set ldts_alias = var('datavault4dbt.ldts_alias', 'ldts') -%}\n\n{%- set dict_result = {} -%}\n\n{%- if datavault4dbt.is_list(multi_active_key) -%}\n    {%- set multi_active_key = multi_active_key|join(\", \") -%}\n{%- endif -%}\n\n{%- if case_sensitive -%}\n    {%- set standardise_prefix = \"IFNULL(LOWER({}(LISTAGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(\".format(hash_alg)-%}\n    {%- set standardise_suffix = \"\\n)), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '{}')) WITHIN GROUP (ORDER BY {}) OVER (PARTITION BY {}, {}))), '{}') AS {}\".format(all_null | join(\"\"), multi_active_key, main_hashkey_column, ldts_alias, zero_key, alias)-%}\n{%- else -%}\n    {%- set standardise_prefix = \"IFNULL(LOWER({}(LISTAGG(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(\".format(hash_alg)-%}\n    {%- set standardise_suffix = \"\\n), '\\\\n', '') \\n, '\\\\t', '') \\n, '\\\\v', '') \\n, '\\\\r', '') AS STRING), '{}')) WITHIN GROUP (ORDER BY {}) OVER (PARTITION BY {}, {}))), '{}') AS {}\".format(all_null | join(\"\"), multi_active_key, main_hashkey_column, ldts_alias, zero_key, alias)-%}\n{%- endif -%}\n\n{%- do dict_result.update({\"standardise_suffix\": standardise_suffix, \"standardise_prefix\": standardise_prefix }) -%}\n\n{{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6495955}, "macro.datavault4dbt.max_datetime": {"unique_id": "macro.datavault4dbt.max_datetime", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "name": "max_datetime", "macro_sql": "{%- macro max_datetime() -%}\n\n    {{- return(adapter.dispatch('max_datetime', 'datavault4dbt')()) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__max_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6505396}, "macro.datavault4dbt.default__max_datetime": {"unique_id": "macro.datavault4dbt.default__max_datetime", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "name": "default__max_datetime", "macro_sql": "\n\n{%- macro default__max_datetime() %}\n\n    {% do return('9999-12-31 23:59:59.999999') %}\n\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.650846}, "macro.datavault4dbt.sqlserver__max_datetime": {"unique_id": "macro.datavault4dbt.sqlserver__max_datetime", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "name": "sqlserver__max_datetime", "macro_sql": "{%- macro sqlserver__max_datetime() %}\n\n    {% do return('9999-12-31 23:59:59.9999999') %}\n\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6511338}, "macro.datavault4dbt.bigquery__max_datetime": {"unique_id": "macro.datavault4dbt.bigquery__max_datetime", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "name": "bigquery__max_datetime", "macro_sql": "{%- macro bigquery__max_datetime() %}\n\n    {% do return('9999-12-31 23:59:59.999999') %}\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6514175}, "macro.datavault4dbt.get_standard_string": {"unique_id": "macro.datavault4dbt.get_standard_string", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/get_standard_string.sql", "original_file_path": "macros/supporting/get_standard_string.sql", "name": "get_standard_string", "macro_sql": "{%- macro get_standard_string(string_list) -%}\n\nRTRIM(CONCAT(\n    {%- for column in string_list -%}\n        IFNULL(TRIM(CAST({{ column }} AS STRING)), '^^'), '||'\n        {%- if not loop.last -%}, {% endif %}\n    {% endfor %}\n))\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6522703}, "macro.datavault4dbt.current_timestamp": {"unique_id": "macro.datavault4dbt.current_timestamp", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/current_timestamp.sql", "original_file_path": "macros/supporting/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'datavault4dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6531858}, "macro.datavault4dbt.default__current_timestamp": {"unique_id": "macro.datavault4dbt.default__current_timestamp", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/current_timestamp.sql", "original_file_path": "macros/supporting/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.653451}, "macro.datavault4dbt.sqlserver__current_timestamp": {"unique_id": "macro.datavault4dbt.sqlserver__current_timestamp", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/current_timestamp.sql", "original_file_path": "macros/supporting/current_timestamp.sql", "name": "sqlserver__current_timestamp", "macro_sql": "{% macro sqlserver__current_timestamp() %}\n    sysdatetime()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6536264}, "macro.datavault4dbt.current_timestamp_in_utc": {"unique_id": "macro.datavault4dbt.current_timestamp_in_utc", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/current_timestamp.sql", "original_file_path": "macros/supporting/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'datavault4dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.653976}, "macro.datavault4dbt.default__current_timestamp_in_utc": {"unique_id": "macro.datavault4dbt.default__current_timestamp_in_utc", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/current_timestamp.sql", "original_file_path": "macros/supporting/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp_in_utc()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6542294}, "macro.datavault4dbt.sqlserver__current_timestamp_in_utc": {"unique_id": "macro.datavault4dbt.sqlserver__current_timestamp_in_utc", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/current_timestamp.sql", "original_file_path": "macros/supporting/current_timestamp.sql", "name": "sqlserver__current_timestamp_in_utc", "macro_sql": "{% macro sqlserver__current_timestamp_in_utc() %}\n    sysutcdatetime()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6543996}, "macro.datavault4dbt.beginning_of_all_times": {"unique_id": "macro.datavault4dbt.beginning_of_all_times", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/beginning_of_all_times.sql", "original_file_path": "macros/supporting/beginning_of_all_times.sql", "name": "beginning_of_all_times", "macro_sql": "{%- macro beginning_of_all_times() %}\n\n    {{ return( adapter.dispatch('beginning_of_all_times', 'datavault4dbt')() ) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.snowflake__beginning_of_all_times"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6586878}, "macro.datavault4dbt.default__beginning_of_all_times": {"unique_id": "macro.datavault4dbt.default__beginning_of_all_times", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/beginning_of_all_times.sql", "original_file_path": "macros/supporting/beginning_of_all_times.sql", "name": "default__beginning_of_all_times", "macro_sql": "{%- macro default__beginning_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.beginning_of_all_times', none) -%}\n{%- set beginning_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'bigquery' in global_var.keys()|map('lower') -%}\n        {% set beginning_of_all_times = global_var['bigquery'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.beginning_of_all_times' to a dictionary, but have not included the adapter you use (bigquery) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set beginning_of_all_times = \"0001-01-01T00-00-01\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set beginning_of_all_times = global_var -%}\n{%- else -%}\n    {%- set beginning_of_all_times = \"0001-01-01T00-00-01\" -%}\n{%- endif -%}\n\n{{ return(beginning_of_all_times) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6604598}, "macro.datavault4dbt.snowflake__beginning_of_all_times": {"unique_id": "macro.datavault4dbt.snowflake__beginning_of_all_times", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/beginning_of_all_times.sql", "original_file_path": "macros/supporting/beginning_of_all_times.sql", "name": "snowflake__beginning_of_all_times", "macro_sql": "{%- macro snowflake__beginning_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.beginning_of_all_times', none) -%}\n{%- set beginning_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'snowflake' in global_var.keys()|map('lower') -%}\n        {% set beginning_of_all_times = global_var['snowflake'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.beginning_of_all_times' to a dictionary, but have not included the adapter you use (snowflake) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set beginning_of_all_times = \"0001-01-01T00:00:01\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set beginning_of_all_times = global_var -%}\n{%- else -%}\n    {%- set beginning_of_all_times = \"0001-01-01T00:00:01\" -%}\n{%- endif -%}\n\n{{ return(beginning_of_all_times) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.662085}, "macro.datavault4dbt.exasol__beginning_of_all_times": {"unique_id": "macro.datavault4dbt.exasol__beginning_of_all_times", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/beginning_of_all_times.sql", "original_file_path": "macros/supporting/beginning_of_all_times.sql", "name": "exasol__beginning_of_all_times", "macro_sql": "{%- macro exasol__beginning_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.beginning_of_all_times', none) -%}\n{%- set beginning_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'exasol' in global_var.keys()|map('lower') -%}\n        {% set beginning_of_all_times = global_var['exasol'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.beginning_of_all_times' to a dictionary, but have not included the adapter you use (exasol) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set beginning_of_all_times = \"0001-01-01 00:00:01\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set beginning_of_all_times = global_var -%}\n{%- else -%}\n    {%- set beginning_of_all_times = \"0001-01-01 00:00:01\" -%}\n{%- endif -%}\n\n{{ return(beginning_of_all_times) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6637108}, "macro.datavault4dbt.prefix": {"unique_id": "macro.datavault4dbt.prefix", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/prefix.sql", "original_file_path": "macros/supporting/prefix.sql", "name": "prefix", "macro_sql": "{%- macro prefix(columns, prefix_str, alias_target) -%}\n\n    {{- adapter.dispatch('prefix', 'datavault4dbt')(columns=columns,\n                                               prefix_str=prefix_str,\n                                               alias_target=alias_target) -}}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6664834}, "macro.datavault4dbt.default__prefix": {"unique_id": "macro.datavault4dbt.default__prefix", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/prefix.sql", "original_file_path": "macros/supporting/prefix.sql", "name": "default__prefix", "macro_sql": "{%- macro default__prefix(columns=none, prefix_str=none, alias_target='source') -%}\n\n    {%- if columns and prefix_str -%}\n\n        {%- for col in columns -%}\n\n            {%- if col is mapping -%}\n\n                {%- if alias_target == 'source' -%}\n\n                    {{- datavault4dbt.prefix([col['source_column']], prefix_str) -}}\n\n                {%- elif alias_target == 'target' -%}\n\n                    {{- datavault4dbt.prefix([col['alias']], prefix_str) -}}\n\n                {%- else -%}\n\n                    {{- datavault4dbt.prefix([col['source_column']], prefix_str) -}}\n\n                {%- endif -%}\n\n                {%- if not loop.last -%} , {% endif %}\n\n            {%- else -%}\n\n                {%- if col is iterable and col is not string -%}\n\n                    {{- datavault4dbt.prefix(col, prefix_str) -}}\n\n                {%- elif col is not none -%}\n\n                    {{- prefix_str}}.{{col.strip() -}}\n                {% else %}\n\n                    {%- if execute -%}\n                        {{- exceptions.raise_compiler_error(\"Unexpected or missing configuration for '\" ~ this ~ \"' Unable to prefix columns.\") -}}\n                    {%- endif -%}\n                {%- endif -%}\n\n                {{- ', ' if not loop.last -}}\n\n            {%- endif -%}\n\n        {%- endfor -%}\n\n    {%- else -%}\n\n        {%- if execute -%}\n            {{- exceptions.raise_compiler_error(\"Invalid parameters provided to prefix macro. Expected: (columns [list/string], prefix_str [string]) got: (\" ~ columns ~ \", \" ~ prefix_str ~ \")\") -}}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.669444}, "macro.datavault4dbt.hash": {"unique_id": "macro.datavault4dbt.hash", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "name": "hash", "macro_sql": "{%- macro hash(columns=none, alias=none, is_hashdiff=false, multi_active_key=none, main_hashkey_column=none) -%}\n\n    {%- if is_hashdiff is none -%}\n        {%- set is_hashdiff = false -%}\n    {%- endif -%}\n\n    {{- adapter.dispatch('hash', 'datavault4dbt')(columns=columns,\n                                             alias=alias,\n                                             is_hashdiff=is_hashdiff,\n                                             multi_active_key=multi_active_key,\n                                             main_hashkey_column=main_hashkey_column) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6756432}, "macro.datavault4dbt.default__hash": {"unique_id": "macro.datavault4dbt.default__hash", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "name": "default__hash", "macro_sql": "\n\n\n{%- macro default__hash(columns, alias, is_hashdiff, multi_active_key, main_hashkey_column) -%}\n\n{%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n{%- set concat_string = var('concat_string', '||') -%}\n{%- set quote = var('quote', '\"') -%}\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n\n{%- set hashkey_input_case_sensitive = var('datavault4dbt.hashkey_input_case_sensitive', FALSE) -%}\n{%- set hashdiff_input_case_sensitive = var('datavault4dbt.hashdiff_input_case_sensitive', TRUE) -%}\n\n{#- Select hashing algorithm -#}\n{%- set hash_dtype = var('datavault4dbt.hash_datatype', 'STRING') -%}\n{%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n{%- set hash_alg = hash_default_values['hash_alg'] -%}\n{%- set unknown_key = hash_default_values['unknown_key'] -%}\n{%- set error_key = hash_default_values['error_key'] -%}\n\n{%- set attribute_standardise = datavault4dbt.attribute_standardise() %}\n\n\n{#- If single column to hash -#}\n{%- if columns is string -%}\n    {%- set columns = [columns] -%}\n{%- endif -%}\n\n{%- set all_null = [] -%}\n\n{%- if is_hashdiff  and datavault4dbt.is_something(multi_active_key) -%}\n    {%- set std_dict = fromjson(datavault4dbt.multi_active_concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, alias=alias, zero_key=unknown_key, multi_active_key=multi_active_key, main_hashkey_column=main_hashkey_column)) -%}\n{%- elif is_hashdiff -%}\n    {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, alias=alias, zero_key=unknown_key)) -%}\n{%- else -%}\n    {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashkey_input_case_sensitive, hash_alg=hash_alg, alias=alias, zero_key=unknown_key)) -%}\n{%- endif -%}\n\n    {%- set standardise_prefix = std_dict['standardise_prefix'] -%}\n    {%- set standardise_suffix = std_dict['standardise_suffix'] -%}\n\n{{ standardise_prefix }}\n\n{%- for column in columns -%}\n\n    {%- do all_null.append(null_placeholder_string) -%}\n\n    {%- if '.' in column %}\n        {% set column_str = column -%}\n    {%- else -%}\n        {%- set column_str = datavault4dbt.as_constant(column) -%}\n    {%- endif -%}\n\n    {{- \"\\nIFNULL(({}), '{}')\".format(attribute_standardise | replace('[EXPRESSION]', column_str) | replace('[QUOTE]', quote) | replace('[NULL_PLACEHOLDER_STRING]', null_placeholder_string), null_placeholder_string) | indent(4) -}}\n    {{- \",'{}',\".format(concat_string) if not loop.last -}}\n\n    {%- if loop.last -%}\n\n        {{ standardise_suffix | indent(4) }}\n\n    {%- else -%}\n\n        {%- do all_null.append(concat_string) -%}\n\n    {%- endif -%}\n\n{%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.attribute_standardise", "macro.datavault4dbt.is_something", "macro.datavault4dbt.multi_active_concattenated_standardise", "macro.datavault4dbt.concattenated_standardise", "macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6814802}, "macro.datavault4dbt.exasol__hash": {"unique_id": "macro.datavault4dbt.exasol__hash", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "name": "exasol__hash", "macro_sql": "{%- macro exasol__hash(columns, alias, is_hashdiff, multi_active_key, main_hashkey_column) -%}\n\n    {%- set hash = var('datavault4dbt.hash', 'MD5') -%}\n    {%- set concat_string = var('concat_string', '||') -%}\n    {%- set quote = var('quote', '\"') -%}\n    {%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n\n    {%- set hashkey_input_case_sensitive = var('datavault4dbt.hashkey_input_case_sensitive', FALSE) -%}\n    {%- set hashdiff_input_case_sensitive = var('datavault4dbt.hashdiff_input_case_sensitive', TRUE) -%}\n\n    {#- Select hashing algorithm -#}\n    {%- set hash_dtype = var('datavault4dbt.hash_datatype', 'HASHTYPE') -%}\n    {%- set hash_default_values = fromjson(datavault4dbt.hash_default_values(hash_function=hash,hash_datatype=hash_dtype)) -%}\n    {%- set hash_alg = hash_default_values['hash_alg'] -%}\n    {%- set unknown_key = hash_default_values['unknown_key'] -%}\n    {%- set error_key = hash_default_values['error_key'] -%}\n\n    {%- set attribute_standardise = datavault4dbt.attribute_standardise() %}\n\n    {#- If single column to hash -#}\n    {%- if columns is string -%}\n        {%- set columns = [columns] -%}\n    {%- endif -%}\n\n    {%- set all_null = [] -%}\n\n    {%- if is_hashdiff  and datavault4dbt.is_something(multi_active_key) -%}\n        {%- set std_dict = fromjson(datavault4dbt.multi_active_concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, alias=alias, zero_key=unknown_key, multi_active_key=multi_active_key)) -%}\n    {%- elif is_hashdiff -%}\n        {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashdiff_input_case_sensitive, hash_alg=hash_alg, alias=alias, zero_key=unknown_key)) -%}\n    {%- else -%}\n        {%- set std_dict = fromjson(datavault4dbt.concattenated_standardise(case_sensitive=hashkey_input_case_sensitive, hash_alg=hash_alg, alias=none, zero_key=unknown_key)) -%}\n\n        CASE WHEN COALESCE(\n        {%- for column in columns -%}\n            CAST({{ column }} AS VARCHAR(200000) UTF8) {%- if not loop.last -%} , {% endif -%}\n        {% endfor -%}, NULL) IS NULL\n        THEN CAST('{{ unknown_key }}' as {{ hash_dtype }})\n        ELSE\n    {%- endif -%}\n\n    {%- set standardise_prefix = std_dict['standardise_prefix'] -%}\n    {%- set standardise_suffix = std_dict['standardise_suffix'] -%}\n\n    {{\" \"~ standardise_prefix }}\n\n    {%- for column in columns -%}\n\n        {%- do all_null.append(null_placeholder_string) -%}\n\n        {%- if '.' in column %}\n            {% set column_str = column -%}\n        {%- else -%}\n            {%- set column_str = datavault4dbt.as_constant(column) -%}\n        {%- endif -%}\n\n        {{- \"\\n NULLIF(({}), '{}')\".format(attribute_standardise | replace('[EXPRESSION]', column_str) | replace('[QUOTE]', quote) | replace('[NULL_PLACEHOLDER_STRING]', null_placeholder_string), null_placeholder_string) | indent(4) -}}\n        {{- \",'{}',\".format(concat_string) if not loop.last -}}\n\n        {%- if loop.last -%}\n\n            {{ standardise_suffix | indent(4) }}\n\n        {%- else -%}\n\n            {%- do all_null.append(concat_string) -%}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {% if not is_hashdiff -%}\n    {{- \"\\n END \" -}} {%- if alias is not none -%} {{\" AS \" }} \"{{ alias }}\" {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.attribute_standardise", "macro.datavault4dbt.is_something", "macro.datavault4dbt.multi_active_concattenated_standardise", "macro.datavault4dbt.concattenated_standardise", "macro.datavault4dbt.as_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6879473}, "macro.datavault4dbt.parse_iso8601": {"unique_id": "macro.datavault4dbt.parse_iso8601", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/parse_iso8601.sql", "original_file_path": "macros/supporting/parse_iso8601.sql", "name": "parse_iso8601", "macro_sql": "{%- macro parse_iso8601(column_name) -%}\n    PARSE_TIMESTAMP('%Y-%m-%dT%H-%M-%S', {{ column_name }})\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.688689}, "macro.datavault4dbt.end_of_all_times": {"unique_id": "macro.datavault4dbt.end_of_all_times", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/end_of_all_times.sql", "original_file_path": "macros/supporting/end_of_all_times.sql", "name": "end_of_all_times", "macro_sql": "{%- macro end_of_all_times() %}\n\n    {{ return(adapter.dispatch('end_of_all_times', 'datavault4dbt')()) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.snowflake__end_of_all_times"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6926482}, "macro.datavault4dbt.default__end_of_all_times": {"unique_id": "macro.datavault4dbt.default__end_of_all_times", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/end_of_all_times.sql", "original_file_path": "macros/supporting/end_of_all_times.sql", "name": "default__end_of_all_times", "macro_sql": "{%- macro default__end_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.end_of_all_times', none) -%}\n{%- set end_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'bigquery' in global_var.keys()|map('lower') -%}\n        {% set end_of_all_times = global_var['bigquery'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.end_of_all_times' to a dictionary, but have not included the adapter you use (bigquery) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set end_of_all_times = \"8888-12-31T23-59-59\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set end_of_all_times = global_var -%}\n{%- else -%}\n    {%- set end_of_all_times = \"8888-12-31T23-59-59\" -%}\n{%- endif -%}\n\n{{ return(end_of_all_times) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6944697}, "macro.datavault4dbt.snowflake__end_of_all_times": {"unique_id": "macro.datavault4dbt.snowflake__end_of_all_times", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/end_of_all_times.sql", "original_file_path": "macros/supporting/end_of_all_times.sql", "name": "snowflake__end_of_all_times", "macro_sql": "{%- macro snowflake__end_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.end_of_all_times', none) -%}\n{%- set end_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'snowflake' in global_var.keys()|map('lower') -%}\n        {% set end_of_all_times = global_var['snowflake'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.end_of_all_times' to a dictionary, but have not included the adapter you use (snowflake) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set end_of_all_times = \"8888-12-31T23:59:59\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set end_of_all_times = global_var -%}\n{%- else -%}\n    {%- set end_of_all_times = \"8888-12-31T23:59:59\" -%}\n{%- endif -%}\n\n{{ return(end_of_all_times) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.696106}, "macro.datavault4dbt.exasol__end_of_all_times": {"unique_id": "macro.datavault4dbt.exasol__end_of_all_times", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/end_of_all_times.sql", "original_file_path": "macros/supporting/end_of_all_times.sql", "name": "exasol__end_of_all_times", "macro_sql": "{%- macro exasol__end_of_all_times() %}\n\n{%- set global_var = var('datavault4dbt.end_of_all_times', none) -%}\n{%- set end_of_all_times = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'exasol' in global_var.keys()|map('lower') -%}\n        {% set end_of_all_times = global_var['exasol'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.end_of_all_times' to a dictionary, but have not included the adapter you use (exasol) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set end_of_all_times = \"8888-12-31 23:59:59\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set end_of_all_times = global_var -%}\n{%- else -%}\n    {%- set end_of_all_times = \"8888-12-31 23:59:59\" -%}\n{%- endif -%}\n\n{{ return(end_of_all_times) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.6977482}, "macro.datavault4dbt.ghost_record_per_datatype": {"unique_id": "macro.datavault4dbt.ghost_record_per_datatype", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/ghost_record_per_datatype.sql", "original_file_path": "macros/supporting/ghost_record_per_datatype.sql", "name": "ghost_record_per_datatype", "macro_sql": "{%- macro ghost_record_per_datatype(column_name, datatype, ghost_record_type) -%}\n\n{{ return(adapter.dispatch('ghost_record_per_datatype', 'datavault4dbt')(column_name=column_name,\n                                                                            datatype=datatype,\n                                                                            ghost_record_type=ghost_record_type)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.snowflake__ghost_record_per_datatype"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7236004}, "macro.datavault4dbt.default__ghost_record_per_datatype": {"unique_id": "macro.datavault4dbt.default__ghost_record_per_datatype", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/ghost_record_per_datatype.sql", "original_file_path": "macros/supporting/ghost_record_per_datatype.sql", "name": "default__ghost_record_per_datatype", "macro_sql": "{%- macro default__ghost_record_per_datatype(column_name, datatype, ghost_record_type) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set unknown_value__STRING = var('datavault4dbt.unknown_value__STRING', '(unknown)') -%}\n{%- set error_value__STRING = var('datavault4dbt.error_value__STRING', '(error)') -%}\n{%- if ghost_record_type == 'unknown' -%}\n        {%- if datatype == 'TIMESTAMP' %} {{ datavault4dbt.string_to_timestamp( timestamp_format , beginning_of_all_times) }} as {{ column_name }}\n        {%- elif datatype == 'STRING' %} '{{unknown_value__STRING}}' as {{ column_name }}\n        {%- elif datatype == 'INT64' %} CAST('0' as INT64) as {{ column_name }}\n        {%- elif datatype == 'FLOAT64' %} CAST('0' as FLOAT64) as {{ column_name }}\n        {%- elif datatype == 'BOOLEAN' %} CAST('FALSE' as BOOLEAN) as {{ column_name }}\n        {%- else %} CAST(NULL as {{ datatype }}) as {{ column_name }}\n        {% endif %}\n{%- elif ghost_record_type == 'error' -%}\n        {%- if datatype == 'TIMESTAMP' %} {{ datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }} as {{ column_name }}\n        {%- elif datatype == 'STRING' %} '{{error_value__STRING}}' as {{ column_name }}\n        {%- elif datatype == 'INT64' %} CAST('-1' as INT64) as {{ column_name }}\n        {%- elif datatype == 'FLOAT64' %} CAST('-1' as FLOAT64) as {{ column_name }}\n        {%- elif datatype == 'BOOLEAN' %} CAST('FALSE' as BOOLEAN) as {{ column_name }}\n        {%- else %} CAST(NULL as {{ datatype }}) as {{ column_name }}\n        {% endif %}\n{%- else -%}\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Invalid Ghost Record Type. Accepted are 'unknown' and 'error'.\") }}\n    {%- endif %}\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.726902}, "macro.datavault4dbt.exasol__ghost_record_per_datatype": {"unique_id": "macro.datavault4dbt.exasol__ghost_record_per_datatype", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/ghost_record_per_datatype.sql", "original_file_path": "macros/supporting/ghost_record_per_datatype.sql", "name": "exasol__ghost_record_per_datatype", "macro_sql": "{%- macro exasol__ghost_record_per_datatype(column_name, datatype, ghost_record_type) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- set beginning_of_all_times_date = var('datavault4dbt.beginning_of_all_times_date', '0001-01-01') -%}\n{%- set end_of_all_times_date = var('datavault4dbt.end_of_all_times_date', '8888-12-31') -%}\n\n\n{%- set unknown_value__STRING = var('datavault4dbt.unknown_value__STRING', '(unknown)') -%}\n{%- set error_value__STRING = var('datavault4dbt.error_value__STRING', '(error)') -%}\n{%- set unknown_value_alt__STRING = var('datavault4dbt.unknown_value_alt__STRING', 'u')  -%}\n{%- set error_value_alt__STRING = var('datavault4dbt.error_value_alt__STRING', 'e')  -%}\n{%- set format_date = var('datavault4dbt.format_date', 'YYYY-mm-dd') -%}\n{%- set hash = var('datavault4dbt.hash', 'MD5')-%}\n{%- set hash_default_values =  datavault4dbt.hash_default_values(hash_function=hash) -%}\n{%- set hash_alg= hash_default_values['hash_alg'] -%}\n{%- set unknown_value__HASHTYPE = hash_default_values['unknown_key'] -%}\n{%- set  error_value__HASHTYPE = hash_default_values['error_key'] -%}\n\n{%- if ghost_record_type == 'unknown' -%}\n\n        {%- if datatype == 'TIMESTAMP' or datatype == 'TIMESTAMP WITH LOCAL TIMEZONE' %} {{- datavault4dbt.string_to_timestamp( timestamp_format , beginning_of_all_times) }} as \"{{ column_name }}\"\n        {%- elif datatype == 'VARCHAR' -%} CAST('{{ unknown_value_alt__STRING }}' as VARCHAR(2000000) UTF8) as \"{{ column_name }}\"\n        {%- elif datatype.upper().startswith('VARCHAR') -%}\n            {%- set unknown_dtype_length = datatype.split(\")\")[0].split(\"(\")[1] | int -%}\n            {%- if unknown_dtype_length < unknown_value__STRING|length -%}\n                CAST('{{ unknown_value_alt__STRING }}' as {{ datatype }} ) as \"{{ column_name }}\"\n            {%- else -%}\n                CAST('{{ unknown_value__STRING }}' as {{ datatype }} ) as \"{{ column_name }}\"\n            {%- endif -%}\n        {%- elif datatype.upper().startswith('CHAR') -%} CAST('{{ unknown_value_alt__STRING }}' as {{ datatype }}) as \"{{ column_name }}\"\n        {%- elif datatype.upper().startswith('DECIMAL') -%} CAST('0' as {{ datatype }}) as \"{{ column_name }}\"\n        {%- elif datatype == 'DOUBLE PRECISION' %} CAST('0' as DOUBLE PRECISION) as \"{{ column_name }}\"\n        {%- elif datatype == 'DATE'-%} TO_DATE('{{ beginning_of_all_times_date }}', '{{ format_date }}' ) as \"{{ column_name }}\"\n        {%- elif datatype == 'BOOLEAN' %} FALSE as \"{{ column_name }}\"\n        {%- elif datatype.upper().startswith('HASHTYPE') -%} CAST('{{ unknown_value__HASHTYPE }}' as {{ datatype }}) as \"{{ column_name }}\"\n        {%- else %} CAST(NULL as {{ datatype }}) as \"{{ column_name }}\"\n        {% endif %}\n\n{%- elif ghost_record_type == 'error' -%}\n\n        {%- if datatype == 'TIMESTAMP' or datatype == 'TIMESTAMP WITH LOCAL TIME ZONE' %} {{- datavault4dbt.string_to_timestamp( timestamp_format , end_of_all_times) }} as \"{{ column_name }}\"\n        {%- elif datatype == 'VARCHAR' -%} CAST('{{ error_value_alt__STRING }}' as VARCHAR(2000000) UTF8) as \"{{ column_name }}\"\n        {%- elif datatype.upper().startswith('VARCHAR') -%}\n            {%- set error_dtype_length = datatype.split(\")\")[0].split(\"(\")[1] | int -%}\n            {%- if error_dtype_length < error_value__STRING|length  -%}\n                CAST('{{ error_value_alt__STRING }}' as {{ datatype }} ) as \"{{ column_name }}\"\n            {%- else -%}\n                CAST('{{ error_value__STRING }}' as {{ datatype }} ) as \"{{ column_name }}\"\n            {%- endif -%}\n        {%- elif datatype.upper().startswith('CHAR') -%} CAST('{{ error_value_alt__STRING }}' as {{ datatype }}) as \"{{ column_name }}\"\n        {%- elif datatype.upper().startswith('DECIMAL') -%} CAST('-1' as {{datatype}}) as \"{{ column_name }}\"\n        {%- elif datatype == 'DOUBLE PRECISION' %} CAST('-1' as DOUBLE PRECISION) as \"{{ column_name }}\"\n        {%- elif datatype == 'BOOLEAN' %} FALSE as \"{{ column_name }}\"\n        {%- elif datatype == 'DATE'-%} TO_DATE('{{ end_of_all_times_date }}', '{{ format_date }}' ) as \"{{ column_name }}\"\n        {%- elif datatype.upper().startswith('HASHTYPE') -%} CAST('{{ error_value__HASHTYPE }}' as {{ datatype }}) as \"{{ column_name }}\"\n        {%- else %} CAST(NULL as {{ datatype }}) as \"{{ column_name }}\"\n        {% endif %}\n\n{%- else -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Invalid Ghost Record Type. Accepted are 'unknown' and 'error'.\") }}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.hash_default_values", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7355094}, "macro.datavault4dbt.snowflake__ghost_record_per_datatype": {"unique_id": "macro.datavault4dbt.snowflake__ghost_record_per_datatype", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/ghost_record_per_datatype.sql", "original_file_path": "macros/supporting/ghost_record_per_datatype.sql", "name": "snowflake__ghost_record_per_datatype", "macro_sql": "{%- macro snowflake__ghost_record_per_datatype(column_name, datatype, ghost_record_type) -%}\n\n{%- set beginning_of_all_times = datavault4dbt.beginning_of_all_times() -%}\n{%- set end_of_all_times = datavault4dbt.end_of_all_times() -%}\n{%- set timestamp_format = datavault4dbt.timestamp_format() -%}\n\n{%- if ghost_record_type == 'unknown' -%}\n     {%- if datatype in ['TIMESTAMP_NTZ','TIMESTAMP'] %}{{ datavault4dbt.string_to_timestamp(timestamp_format, beginning_of_all_times) }} AS {{ column_name }}\n     {% elif datatype in ['STRING','VARCHAR'] %}'(unknown)' AS {{ column_name }}\n     {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] %}0 AS {{ column_name }}\n     {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ column_name }}\n     {% else %}NULL AS {{ column_name }}\n     {% endif %}\n{%- elif ghost_record_type == 'error' -%}\n     {%- if datatype in ['TIMESTAMP_NTZ','TIMESTAMP'] %}{{ datavault4dbt.string_to_timestamp(timestamp_format, end_of_all_times) }} AS {{ column_name }}\n     {% elif datatype in ['STRING','VARCHAR'] %}'(error)' AS {{ column_name }}\n     {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] %}-1 AS {{ column_name }}\n     {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ column_name }}\n     {% else %}NULL AS {{ column_name }}\n      {% endif %}\n{%- else -%}\n    {%- if execute -%}\n     {{ exceptions.raise_compiler_error(\"Invalid Ghost Record Type. Accepted are 'unknown' and 'error'.\") }}\n    {%- endif %}\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.beginning_of_all_times", "macro.datavault4dbt.end_of_all_times", "macro.datavault4dbt.timestamp_format", "macro.datavault4dbt.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7386127}, "macro.datavault4dbt.timestamp_format": {"unique_id": "macro.datavault4dbt.timestamp_format", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/timestamp_format.sql", "original_file_path": "macros/supporting/timestamp_format.sql", "name": "timestamp_format", "macro_sql": "{%- macro timestamp_format() %}\n\n    {{ return(adapter.dispatch('timestamp_format', 'datavault4dbt')()) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.snowflake__timestamp_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.74267}, "macro.datavault4dbt.default__timestamp_format": {"unique_id": "macro.datavault4dbt.default__timestamp_format", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/timestamp_format.sql", "original_file_path": "macros/supporting/timestamp_format.sql", "name": "default__timestamp_format", "macro_sql": "{%- macro default__timestamp_format() %}\n\n{%- set global_var = var('datavault4dbt.timestamp_format', none) -%}\n{%- set timestamp_format = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'bigquery' in global_var.keys()|map('lower') -%}\n        {% set timestamp_format = global_var['bigquery'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.timestamp_format' to a dictionary, but have not included the adapter you use (bigquery) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set timestamp_format = \"%Y-%m-%dT%H-%M-%S\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set timestamp_format = global_var -%}\n{%- else -%}\n    {%- set timestamp_format = \"%Y-%m-%dT%H-%M-%S\" -%}\n{%- endif -%}\n\n{{ return(timestamp_format) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7445593}, "macro.datavault4dbt.snowflake__timestamp_format": {"unique_id": "macro.datavault4dbt.snowflake__timestamp_format", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/timestamp_format.sql", "original_file_path": "macros/supporting/timestamp_format.sql", "name": "snowflake__timestamp_format", "macro_sql": "{%- macro snowflake__timestamp_format() %}\n\n{%- set global_var = var('datavault4dbt.timestamp_format', none) -%}\n{%- set timestamp_format = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'snowflake' in global_var.keys()|map('lower') -%}\n        {% set timestamp_format = global_var['snowflake'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.timestamp_format' to a dictionary, but have not included the adapter you use (snowflake) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set timestamp_format = \"YYYY-MM-DDTHH24:MI:SS\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set timestamp_format = global_var -%}\n{%- else -%}\n    {%- set timestamp_format = \"YYYY-MM-DDTHH24:MI:SS\" -%}\n{%- endif -%}\n\n{{ return(timestamp_format) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.746245}, "macro.datavault4dbt.exasol__timestamp_format": {"unique_id": "macro.datavault4dbt.exasol__timestamp_format", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/timestamp_format.sql", "original_file_path": "macros/supporting/timestamp_format.sql", "name": "exasol__timestamp_format", "macro_sql": "{%- macro exasol__timestamp_format() %}\n\n{%- set global_var = var('datavault4dbt.timestamp_format', none) -%}\n{%- set timestamp_format = '' -%}\n\n{%- if global_var is mapping -%}\n    {%- if 'exasol' in global_var.keys()|map('lower') -%}\n        {% set timestamp_format = global_var['exasol'] %}\n    {%- else -%}\n        {%- if execute -%}\n            {%- do exceptions.warn(\"Warning: You have set the global variable 'datavault4dbt.timestamp_format' to a dictionary, but have not included the adapter you use (exasol) as a key. Applying the default value.\") -%}\n        {% endif %}\n        {%- set timestamp_format = \"YYYY-mm-dd HH:MI:SS\" -%}\n    {% endif %}\n{%- elif global_var is not mapping and datavault4dbt.is_something(global_var) -%}\n    {%- set timestamp_format = global_var -%}\n{%- else -%}\n    {%- set timestamp_format = \"YYYY-mm-dd HH:MI:SS\" -%}\n{%- endif -%}\n\n{{ return(timestamp_format) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.is_something"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7479327}, "macro.datavault4dbt.get_query_results_as_dict": {"unique_id": "macro.datavault4dbt.get_query_results_as_dict", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/get_query_results_as_dict.sql", "original_file_path": "macros/supporting/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'datavault4dbt')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7494123}, "macro.datavault4dbt.default__get_query_results_as_dict": {"unique_id": "macro.datavault4dbt.default__get_query_results_as_dict", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/get_query_results_as_dict.sql", "original_file_path": "macros/supporting/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n    {{ return(dbt_utils.get_query_results_as_dict(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7497723}, "macro.datavault4dbt.sqlserver__get_query_results_as_dict": {"unique_id": "macro.datavault4dbt.sqlserver__get_query_results_as_dict", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/get_query_results_as_dict.sql", "original_file_path": "macros/supporting/get_query_results_as_dict.sql", "name": "sqlserver__get_query_results_as_dict", "macro_sql": "{% macro sqlserver__get_query_results_as_dict(query) %}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {# Column names in upper case for consistency #}\n            {% do sql_results.update({column_name.upper(): column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7511327}, "macro.datavault4dbt.string_to_timestamp": {"unique_id": "macro.datavault4dbt.string_to_timestamp", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/string_to_timestamp.sql", "original_file_path": "macros/supporting/string_to_timestamp.sql", "name": "string_to_timestamp", "macro_sql": "{% macro string_to_timestamp(format, timestamp) %}\n{{return(adapter.dispatch('string_to_timestamp', 'datavault4dbt')(format=format,\n                                                                        timestamp= timestamp)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.snowflake__string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7523143}, "macro.datavault4dbt.default__string_to_timestamp": {"unique_id": "macro.datavault4dbt.default__string_to_timestamp", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/string_to_timestamp.sql", "original_file_path": "macros/supporting/string_to_timestamp.sql", "name": "default__string_to_timestamp", "macro_sql": "{%- macro default__string_to_timestamp(format, timestamp) -%}\n    PARSE_TIMESTAMP('{{ format }}', '{{ timestamp }}')\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.752685}, "macro.datavault4dbt.exasol__string_to_timestamp": {"unique_id": "macro.datavault4dbt.exasol__string_to_timestamp", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/string_to_timestamp.sql", "original_file_path": "macros/supporting/string_to_timestamp.sql", "name": "exasol__string_to_timestamp", "macro_sql": "{%- macro exasol__string_to_timestamp(format, timestamp) -%}\n    TO_TIMESTAMP('{{ timestamp }}', '{{ format }}')\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7530043}, "macro.datavault4dbt.snowflake__string_to_timestamp": {"unique_id": "macro.datavault4dbt.snowflake__string_to_timestamp", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/string_to_timestamp.sql", "original_file_path": "macros/supporting/string_to_timestamp.sql", "name": "snowflake__string_to_timestamp", "macro_sql": "{%- macro snowflake__string_to_timestamp(format, timestamp) -%}\n    TO_TIMESTAMP('{{ timestamp }}', '{{ format }}')\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7533143}, "macro.datavault4dbt.generate_schema_name": {"unique_id": "macro.datavault4dbt.generate_schema_name", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/generate_schema_name.sql", "original_file_path": "macros/supporting/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7542737}, "macro.datavault4dbt.hash_default_values": {"unique_id": "macro.datavault4dbt.hash_default_values", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_default_values.sql", "original_file_path": "macros/supporting/hash_default_values.sql", "name": "hash_default_values", "macro_sql": "{%- macro hash_default_values(hash_function, hash_datatype=none) -%}\n\n    {{ return(adapter.dispatch('hash_default_values', 'datavault4dbt')(hash_function=hash_function,hash_datatype=hash_datatype)) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.snowflake__hash_default_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7612581}, "macro.datavault4dbt.default__hash_default_values": {"unique_id": "macro.datavault4dbt.default__hash_default_values", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_default_values.sql", "original_file_path": "macros/supporting/hash_default_values.sql", "name": "default__hash_default_values", "macro_sql": "{%- macro default__hash_default_values(hash_function, hash_datatype) -%}\n\n    {%- set dict_result = {} -%}\n\n    {%- if hash_function == 'MD5' and hash_datatype == 'STRING' -%}\n        {%- set hash_alg = 'MD5' -%}\n        {%- set unknown_key = '00000000000000000000000000000000' -%}\n        {%- set error_key = 'ffffffffffffffffffffffffffffffff' -%}\n    {%- elif hash_function == 'SHA' or hash_function == 'SHA1' and hash_datatype == 'STRING' -%}\n        {%- set hash_alg = 'SHA1' -%}\n        {%- set unknown_key = '0000000000000000000000000000000000000000' -%}\n        {%- set error_key = 'ffffffffffffffffffffffffffffffffffffffff' -%}\n    {%- elif hash_function == 'SHA2' or hash_function == 'SHA256' and hash_datatype == 'STRING' -%}\n        {%- set hash_alg = 'SHA256' -%}\n        {%- set unknown_key = '0000000000000000000000000000000000000000000000000000000000000000' -%}\n        {%- set error_key = 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' -%}\n    {%- endif -%}\n\n    {%- do dict_result.update({\"hash_alg\": hash_alg, \"unknown_key\": unknown_key, \"error_key\": error_key }) -%}\n\n    {{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7633965}, "macro.datavault4dbt.snowflake__hash_default_values": {"unique_id": "macro.datavault4dbt.snowflake__hash_default_values", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_default_values.sql", "original_file_path": "macros/supporting/hash_default_values.sql", "name": "snowflake__hash_default_values", "macro_sql": "{%- macro snowflake__hash_default_values(hash_function, hash_datatype) -%}\n\n    {%- set dict_result = {} -%}\n\n    {%- if hash_function == 'MD5' and hash_datatype == 'STRING' -%}\n        {%- set hash_alg = 'MD5' -%}\n        {%- set unknown_key = \"00000000000000000000000000000000\" -%}\n        {%- set error_key = \"ffffffffffffffffffffffffffffffff\" -%}\n    {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' -%} \n        {%- if hash_datatype == 'STRING' -%}\n            {%- set hash_alg = 'SHA1' -%}\n            {%- set unknown_key = \"0000000000000000000000000000000000000000\" -%}\n            {%- set error_key = \"ffffffffffffffffffffffffffffffffffffffff\" -%}\n        {%- elif hash_datatype == 'BINARY' -%}\n            {%- set hash_alg = 'SHA1_BINARY' -%}\n            {%- set unknown_key = \"TO_BINARY(0000000000000000000000000000000000000000)\" -%}\n            {%- set error_key = \"TO_BINARY(ffffffffffffffffffffffffffffffffffffffff)\" -%}        \n        {%- endif -%}\n    {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' -%}\n        {%- if hash_datatype == 'STRING' -%}\n            {%- set hash_alg = 'SHA2' -%}\n            {%- set unknown_key = \"0000000000000000000000000000000000000000000000000000000000000000\" -%}\n            {%- set error_key = \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\" -%}\n        {%- elif hash_datatype == 'BINARY' -%}\n            {%- set hash_alg = 'SHA2_BINARY' -%}\n            {%- set unknown_key = \"TO_BINARY(0000000000000000000000000000000000000000000000000000000000000000)\" -%}\n            {%- set error_key = \"TO_BINARY(ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\" -%}        \n        {%- endif -%}   \n    {%- endif -%}\n\n    {%- do dict_result.update({\"hash_alg\": hash_alg, \"unknown_key\": unknown_key, \"error_key\": error_key }) -%}\n\n    {{ return(dict_result | tojson ) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7665966}, "macro.datavault4dbt.exasol__hash_default_values": {"unique_id": "macro.datavault4dbt.exasol__hash_default_values", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/hash_default_values.sql", "original_file_path": "macros/supporting/hash_default_values.sql", "name": "exasol__hash_default_values", "macro_sql": "{%- macro exasol__hash_default_values(hash_function, hash_datatype=none) -%}\n\n    {%- set dict_result = {} -%}\n\n    {%- if hash_function == 'MD5' -%}\n        {%- set hash_alg = 'HASHTYPE_MD5' -%}\n        {%- set unknown_key = '00000000000000000000000000000000' -%}\n        {%- set error_key = 'ffffffffffffffffffffffffffffffff' -%}\n    {%- elif (hash_function == 'SHA' or hash_function == 'SHA1') -%}\n        {%- set hash_alg = 'HASHTYPE_SHA1' -%}\n        {%- set unknown_key = '0000000000000000000000000000000000000000' -%}\n        {%- set error_key = 'ffffffffffffffffffffffffffffffffffffffff' -%}\n    {%- elif (hash_function == 'SHA2' or hash_function == 'SHA256') -%}\n        {%- set hash_alg = 'HASHTYPE_SHA256' -%}\n        {%- set unknown_key = '0000000000000000000000000000000000000000000000000000000000000000' -%}\n        {%- set error_key = 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' -%}\n    {%- endif -%}\n\n    {%- do dict_result.update({\"hash_alg\": hash_alg, \"unknown_key\": unknown_key, \"error_key\": error_key }) -%}\n\n    {{ return(dict_result | tojson ) }}\n\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7688987}, "macro.datavault4dbt.type_timestamp": {"unique_id": "macro.datavault4dbt.type_timestamp", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/datatypes.sql", "original_file_path": "macros/supporting/datatypes.sql", "name": "type_timestamp", "macro_sql": "{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'datavault4dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.769782}, "macro.datavault4dbt.default__type_timestamp": {"unique_id": "macro.datavault4dbt.default__type_timestamp", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/datatypes.sql", "original_file_path": "macros/supporting/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{%- macro default__type_timestamp() -%}\n    {{ type_timestamp() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.770026}, "macro.datavault4dbt.sqlserver__type_timestamp": {"unique_id": "macro.datavault4dbt.sqlserver__type_timestamp", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/datatypes.sql", "original_file_path": "macros/supporting/datatypes.sql", "name": "sqlserver__type_timestamp", "macro_sql": "{%- macro sqlserver__type_timestamp() -%}\n    datetime2\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7703488}, "macro.datavault4dbt.get_distinct_value": {"unique_id": "macro.datavault4dbt.get_distinct_value", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/get_distinct_value.sql", "original_file_path": "macros/supporting/get_distinct_value.sql", "name": "get_distinct_value", "macro_sql": "{% macro get_distinct_value(source_relation, column_name, exclude_values=none) %}\n\n{{return(adapter.dispatch('get_distinct_value', 'datavault4dbt')(source_relation= source_relation, \n                                                            column_name= column_name,\n                                                            exclude_values=exclude_values) )}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.datavault4dbt.default__get_distinct_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7720635}, "macro.datavault4dbt.default__get_distinct_value": {"unique_id": "macro.datavault4dbt.default__get_distinct_value", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/get_distinct_value.sql", "original_file_path": "macros/supporting/get_distinct_value.sql", "name": "default__get_distinct_value", "macro_sql": "\n{%- macro default__get_distinct_value(source_relation, column_name, exclude_values) -%}\n\n{% set query %}\n    SELECT DISTINCT {{ column_name }}\n    from {{ source_relation }}\n    {% if exclude_values is not none %}\n        where {{ column_name }} not in ( {%- for value in exclude_values -%} \n                                            '{{ value }}'\n                                            {%- if not loop.last -%}, {%- endif -%}\n                                        {%- endfor -%} )\n    {% endif %}\n    LIMIT 1\n{% endset %}\n\n{% set results = run_query(query) %}\n\n{% if execute %}\n\n    {% set result_value = results.columns[0].values()[0] %}\n{% else %}\n    {% set result_value = \"\" %}\n{% endif %}\n\n{{ return(result_value) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.773689}, "macro.datavault4dbt.parse_iso8601_date": {"unique_id": "macro.datavault4dbt.parse_iso8601_date", "package_name": "datavault4dbt", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/datavault4dbt", "path": "macros/supporting/parse_iso8601_date.sql", "original_file_path": "macros/supporting/parse_iso8601_date.sql", "name": "parse_iso8601_date", "macro_sql": "{%- macro parse_iso8601_date(column_name) -%}\n    PARSE_DATE('%Y-%m-%d', {{ column_name }})\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7742045}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.776372}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7782543}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7797568}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {%- endif -%}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7820575}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7829528}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7832692}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.783576}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7883217}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7888553}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7893221}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7897646}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7901447}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7905395}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7919745}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7942224}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7952251}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7966695}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7981133}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7994096}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.7999303}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8007345}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8030524}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8065364}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8074243}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8079913}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.810918}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8118382}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8135028}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8146398}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8155024}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.81627}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8173974}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8180208}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8194077}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.821441}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.822916}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8247821}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.825727}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8263695}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.828438}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8290687}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8303072}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8320765}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8353353}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.839949}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8416586}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8426683}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8431184}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8442557}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8466954}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8478403}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8488653}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8493066}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8502054}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8510466}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8557594}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8626285}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8640757}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.865686}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.875612}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{ dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\") }},\n            {{ dbt_utils.current_timestamp() }}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{ datediff('start_timestamp',\n                           'stop_timestamp',\n                           period) }}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8767543}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8774488}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8785267}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- set deprecation_warning = \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8898485}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.890735}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8912947}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.892464}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8936145}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8955357}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8962314}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.896641}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8973217}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.89769}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8984604}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.8991554}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.900233}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9015245}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9023414}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.903282}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9044285}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9048476}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9051652}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.905459}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9071012}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9073591}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9075274}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9076946}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp_in_utc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9082527}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9085371}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{ dbt_utils.current_timestamp() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9088583}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9091008}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9093943}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_append', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9106164}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9109406}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9113533}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9117568}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_construct', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9131484}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9136937}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9140131}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.914325}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9146366}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('cast_array_to_string', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9159093}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9162233}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ type_string() }}){%- endset -%}\n    {{ replace(replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9168794}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.917203}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9174502}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9187334}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n  {% do dbt_utils.xdb_deprecation_warning('split_part', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.split_part", "macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9196143}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.920521}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n      {% do dbt_utils.xdb_deprecation_warning('escape_single_quotes', model.package_name, model.name) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.escape_single_quotes", "macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.921156}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9218712}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('length', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.length", "macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9224727}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9232507}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('right', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.right", "macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9239004}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9246216}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n  {% do dbt_utils.xdb_deprecation_warning('hash', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.hash", "macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.925347}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9260697}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('any_value', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.any_value", "macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9266772}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9275053}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n  {% do dbt_utils.xdb_deprecation_warning('replace', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.replace", "macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9282165}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9289382}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n  {% do dbt_utils.xdb_deprecation_warning('cast_bool_to_text', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.cast_bool_to_text", "macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.92952}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9302373}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('bool_or', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.bool_or", "macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9309874}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9316988}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n  {% do dbt_utils.xdb_deprecation_warning('concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.concat", "macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.932303}, "macro.dbt_utils.xdb_deprecation_warning": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning", "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n    {% if execute %}\n        {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\" ~ macro ~ \"` (no prefix) instead. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9335268}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {% if execute %}\n        {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9343605}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9354784}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.935853}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9360926}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9371045}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {% do dbt_utils.xdb_deprecation_warning('listagg', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.listagg", "macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9379222}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9387486}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('datediff', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.datediff", "macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9394708}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.940305}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {% do dbt_utils.xdb_deprecation_warning('dateadd', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.dateadd", "macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9411657}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.942541}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_string', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_string", "macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9431372}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9435036}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_timestamp', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9440763}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n    {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9444613}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_float', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_float", "macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9450378}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n    {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.945399}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_numeric', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_numeric", "macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9460716}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n    {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9464378}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_bigint', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_bigint", "macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9470174}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n    {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9475126}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_int', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_int", "macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9481065}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9489229}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n    {% do dbt_utils.xdb_deprecation_warning('position', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.position", "macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9497373}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.95047}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "default__string_literal", "macro_sql": "{%- macro default__string_literal(value) -%}\n  {% do dbt_utils.xdb_deprecation_warning('string_literal', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.string_literal", "macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9512084}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9519823}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  {% do dbt_utils.xdb_deprecation_warning('date_trunc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9526618}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9533455}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n  {% do dbt_utils.xdb_deprecation_warning('except', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.except", "macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9539282}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9546983}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n  {% do dbt_utils.xdb_deprecation_warning('safe_cast', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.safe_cast", "macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.955375}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9561565}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('last_day', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.last_day", "macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9569814}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9576883}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n  {% do dbt_utils.xdb_deprecation_warning('intersect', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.intersect", "macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.958438}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9595282}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.960185}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9610088}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9615192}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9628587}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9643457}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9653487}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9664567}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9673975}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9677968}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.969337}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9712408}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9723508}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9727647}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9736755}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9743361}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9754968}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.976345}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9775522}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9779444}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9833019}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9867573}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9882138}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.988986}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9902742}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9913106}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.992525}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9930322}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9943166}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9957502}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9967346}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.997555}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9987037}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265326.9994268}, "macro.codegen.generate_model_import_ctes": {"unique_id": "macro.codegen.generate_model_import_ctes", "package_name": "codegen", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "name": "generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':'(?i)(from|join)\\s+({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_source':'(?i)(from|join)\\s+({{\\s*source\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_1':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_2':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_table_1':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_2':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_3':'(?i)(from|join)\\s+([\\[`\\\"\\'])([\\w ]+)([\\]`\\\"\\'])(?=\\s|$)',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265327.0196724}, "macro.codegen.get_tables_in_schema": {"unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265327.0235136}, "macro.codegen.generate_source": {"unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='', name=schema_name, table_names=None) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265327.028648}, "macro.codegen.generate_base_model": {"unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265327.0333135}, "macro.codegen.generate_column_yaml": {"unique_id": "macro.codegen.generate_column_yaml", "package_name": "codegen", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265327.0376835}, "macro.codegen.generate_model_yaml": {"unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265327.040771}, "macro.codegen.get_model_dependencies": {"unique_id": "macro.codegen.get_model_dependencies", "package_name": "codegen", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265327.0422084}, "macro.codegen.add_model_column_descriptions_to_dict": {"unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "package_name": "codegen", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265327.0433033}, "macro.codegen.build_dict_column_descriptions": {"unique_id": "macro.codegen.build_dict_column_descriptions", "package_name": "codegen", "root_path": "/usr/src/develop/user-108654/environment-144770/repository-112102/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1675265327.0444427}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.datavault4dbt_snowflake_demo.stg_nation": ["source.datavault4dbt_snowflake_demo.tpc-h_sf1.nation"], "model.datavault4dbt_snowflake_demo.stg_lineitem": ["source.datavault4dbt_snowflake_demo.tpc-h_sf1.lineitem"], "model.datavault4dbt_snowflake_demo.stg_orders": ["source.datavault4dbt_snowflake_demo.tpc-h_sf1.customer", "source.datavault4dbt_snowflake_demo.tpc-h_sf1.customer", "source.datavault4dbt_snowflake_demo.tpc-h_sf1.customer", "source.datavault4dbt_snowflake_demo.tpc-h_sf1.orders"], "model.datavault4dbt_snowflake_demo.stg_customer": ["source.datavault4dbt_snowflake_demo.tpc-h_sf1.customer"], "model.datavault4dbt_snowflake_demo.stg_supplier": ["source.datavault4dbt_snowflake_demo.tpc-h_sf1.supplier"], "model.datavault4dbt_snowflake_demo.snap_v1": ["model.datavault4dbt_snowflake_demo.snap_v0"], "model.datavault4dbt_snowflake_demo.snap_v0": [], "model.datavault4dbt_snowflake_demo.customer_rs": ["model.datavault4dbt_snowflake_demo.stg_customer", "model.datavault4dbt_snowflake_demo.stg_supplier"], "model.datavault4dbt_snowflake_demo.orders_h": ["model.datavault4dbt_snowflake_demo.stg_orders"], "model.datavault4dbt_snowflake_demo.lineitem_p_ns": ["model.datavault4dbt_snowflake_demo.stg_lineitem"], "model.datavault4dbt_snowflake_demo.orders_n_s": ["model.datavault4dbt_snowflake_demo.orders_n0_s"], "model.datavault4dbt_snowflake_demo.orders_n0_s": ["model.datavault4dbt_snowflake_demo.stg_orders"], "model.datavault4dbt_snowflake_demo.lineitem_nl": ["model.datavault4dbt_snowflake_demo.stg_lineitem"], "model.datavault4dbt_snowflake_demo.nation_h": ["model.datavault4dbt_snowflake_demo.stg_nation"], "model.datavault4dbt_snowflake_demo.customer_p_s": ["model.datavault4dbt_snowflake_demo.customer_p0_s"], "model.datavault4dbt_snowflake_demo.customer_p0_s": ["model.datavault4dbt_snowflake_demo.stg_customer"], "model.datavault4dbt_snowflake_demo.orders_customer_l": ["model.datavault4dbt_snowflake_demo.stg_orders"], "model.datavault4dbt_snowflake_demo.customer_h": ["model.datavault4dbt_snowflake_demo.stg_customer", "model.datavault4dbt_snowflake_demo.stg_supplier"], "model.datavault4dbt_snowflake_demo.customer_n0_s": ["model.datavault4dbt_snowflake_demo.stg_customer"], "model.datavault4dbt_snowflake_demo.customer_n_s": ["model.datavault4dbt_snowflake_demo.customer_n0_s"], "model.datavault4dbt_snowflake_demo.customer_pb": ["model.datavault4dbt_snowflake_demo.customer_h", "model.datavault4dbt_snowflake_demo.customer_n_s", "model.datavault4dbt_snowflake_demo.customer_n_s", "model.datavault4dbt_snowflake_demo.customer_p_s", "model.datavault4dbt_snowflake_demo.customer_p_s", "model.datavault4dbt_snowflake_demo.snap_v1", "model.datavault4dbt_snowflake_demo.snap_v1"], "test.datavault4dbt_snowflake_demo.relationships_customer_n0_s_hk_customer_h__hk_customer_h__ref_customer_h_.dd700dfe2c": ["model.datavault4dbt_snowflake_demo.customer_h", "model.datavault4dbt_snowflake_demo.customer_n0_s"], "test.datavault4dbt_snowflake_demo.relationships_customer_p0_s_hk_customer_h__hk_customer_h__ref_customer_h_.c00927b7d0": ["model.datavault4dbt_snowflake_demo.customer_h", "model.datavault4dbt_snowflake_demo.customer_p0_s"], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.customer": [], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.lineitem": [], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.nation": [], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.orders": [], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.part": [], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.partsupp": [], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.region": [], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.supplier": []}, "child_map": {"model.datavault4dbt_snowflake_demo.stg_nation": ["model.datavault4dbt_snowflake_demo.nation_h"], "model.datavault4dbt_snowflake_demo.stg_lineitem": ["model.datavault4dbt_snowflake_demo.lineitem_nl", "model.datavault4dbt_snowflake_demo.lineitem_p_ns"], "model.datavault4dbt_snowflake_demo.stg_orders": ["model.datavault4dbt_snowflake_demo.orders_customer_l", "model.datavault4dbt_snowflake_demo.orders_h", "model.datavault4dbt_snowflake_demo.orders_n0_s"], "model.datavault4dbt_snowflake_demo.stg_customer": ["model.datavault4dbt_snowflake_demo.customer_h", "model.datavault4dbt_snowflake_demo.customer_n0_s", "model.datavault4dbt_snowflake_demo.customer_p0_s", "model.datavault4dbt_snowflake_demo.customer_rs"], "model.datavault4dbt_snowflake_demo.stg_supplier": ["model.datavault4dbt_snowflake_demo.customer_h", "model.datavault4dbt_snowflake_demo.customer_rs"], "model.datavault4dbt_snowflake_demo.snap_v1": ["model.datavault4dbt_snowflake_demo.customer_pb", "model.datavault4dbt_snowflake_demo.customer_pb"], "model.datavault4dbt_snowflake_demo.snap_v0": ["model.datavault4dbt_snowflake_demo.snap_v1"], "model.datavault4dbt_snowflake_demo.customer_rs": [], "model.datavault4dbt_snowflake_demo.orders_h": [], "model.datavault4dbt_snowflake_demo.lineitem_p_ns": [], "model.datavault4dbt_snowflake_demo.orders_n_s": [], "model.datavault4dbt_snowflake_demo.orders_n0_s": ["model.datavault4dbt_snowflake_demo.orders_n_s"], "model.datavault4dbt_snowflake_demo.lineitem_nl": [], "model.datavault4dbt_snowflake_demo.nation_h": [], "model.datavault4dbt_snowflake_demo.customer_p_s": ["model.datavault4dbt_snowflake_demo.customer_pb", "model.datavault4dbt_snowflake_demo.customer_pb"], "model.datavault4dbt_snowflake_demo.customer_p0_s": ["model.datavault4dbt_snowflake_demo.customer_p_s", "test.datavault4dbt_snowflake_demo.relationships_customer_p0_s_hk_customer_h__hk_customer_h__ref_customer_h_.c00927b7d0"], "model.datavault4dbt_snowflake_demo.orders_customer_l": [], "model.datavault4dbt_snowflake_demo.customer_h": ["model.datavault4dbt_snowflake_demo.customer_pb", "test.datavault4dbt_snowflake_demo.relationships_customer_n0_s_hk_customer_h__hk_customer_h__ref_customer_h_.dd700dfe2c", "test.datavault4dbt_snowflake_demo.relationships_customer_p0_s_hk_customer_h__hk_customer_h__ref_customer_h_.c00927b7d0"], "model.datavault4dbt_snowflake_demo.customer_n0_s": ["model.datavault4dbt_snowflake_demo.customer_n_s", "test.datavault4dbt_snowflake_demo.relationships_customer_n0_s_hk_customer_h__hk_customer_h__ref_customer_h_.dd700dfe2c"], "model.datavault4dbt_snowflake_demo.customer_n_s": ["model.datavault4dbt_snowflake_demo.customer_pb", "model.datavault4dbt_snowflake_demo.customer_pb"], "model.datavault4dbt_snowflake_demo.customer_pb": [], "test.datavault4dbt_snowflake_demo.relationships_customer_n0_s_hk_customer_h__hk_customer_h__ref_customer_h_.dd700dfe2c": [], "test.datavault4dbt_snowflake_demo.relationships_customer_p0_s_hk_customer_h__hk_customer_h__ref_customer_h_.c00927b7d0": [], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.customer": ["model.datavault4dbt_snowflake_demo.stg_customer", "model.datavault4dbt_snowflake_demo.stg_orders", "model.datavault4dbt_snowflake_demo.stg_orders", "model.datavault4dbt_snowflake_demo.stg_orders"], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.lineitem": ["model.datavault4dbt_snowflake_demo.stg_lineitem"], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.nation": ["model.datavault4dbt_snowflake_demo.stg_nation"], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.orders": ["model.datavault4dbt_snowflake_demo.stg_orders"], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.part": [], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.partsupp": [], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.region": [], "source.datavault4dbt_snowflake_demo.tpc-h_sf1.supplier": ["model.datavault4dbt_snowflake_demo.stg_supplier"]}}